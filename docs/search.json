[
  {
    "objectID": "documentation/index.html",
    "href": "documentation/index.html",
    "title": "Documentation",
    "section": "",
    "text": "Title\n\n\nDescription\n\n\n\n\n\n\n1. Optimization problem\n\n\nOptimization problem set up with CPLEX\n\n\n\n\n2. Input Data Processing\n\n\nPrepare data for the optimisation\n\n\n\n\n3. Run Optimisation\n\n\nRun the program\n\n\n\n\n4. Output Data Processing\n\n\nProcess results\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Noreden",
    "section": "",
    "text": "Repository\n  \n\n  \n  \nWelcome, this is the documentation website for NorEden Project. Here you will find information for\n\nworkflow for diet optimization and examples\nsoftware noreden\ndevelopment code for previous version\n\nPlease reach out by creating an issue."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Noreden",
    "section": "",
    "text": "This is the documentation of Noreden."
  },
  {
    "objectID": "documentation/define_problem.html",
    "href": "documentation/define_problem.html",
    "title": "Part 2: Problem definition",
    "section": "",
    "text": "The information we have are the food groups and constraints."
  },
  {
    "objectID": "data_example/info_data.html",
    "href": "data_example/info_data.html",
    "title": "NorEden",
    "section": "",
    "text": "Personliste\n1187 subjects\nsex, age, height, weight, BMI,…\n\n\nxx. Stoffinntak per person\nNutrition intake\nCan be linked with personliste via ID\nCan be linked with Alle matvarer naringsstoffer ICs (impact category)\n(energyprosenfordeling per person also has nutrients, but slightly mismathed)\n\n\nxx Matinntak for gruppen\nsame info as alle matvarer, do not need.\nMatvarers bidrag av stoffer\nnot needs\n\n\nAlle matvarer ICs\nEnv impact for each food and nutritional"
  },
  {
    "objectID": "notes_internal/resources.html",
    "href": "notes_internal/resources.html",
    "title": "Nutrition",
    "section": "",
    "text": "Nutrition\nhttps://cran.r-project.org/web/packages/NutrienTrackeR/NutrienTrackeR.pdf\n\n\nOptimization\nhttps://cran.r-project.org/web/views/Optimization.html\nhttps://www.mlstack.cafe/interview-questions/optimisation\nhttps://www.techinterviewhandbook.org/algorithms/math/"
  },
  {
    "objectID": "notes_internal/literature.html",
    "href": "notes_internal/literature.html",
    "title": "Cleghorn 2022",
    "section": "",
    "text": "Cleghorn 2022\nOptimise NZ versio nof EAT-lancet diet\nModel impact on population health\nConstraints\n\npopulation diet meets the nutritional recommendations\ndiet related greenhouse gas emission within boundary\ndiet cost witthin baseline cost of average diet\n\n\nDIET multi-state life-table modelling\npopulation (4.4m), modeled until deah/110 yo + sex, age, ethnicity\ndietary risk factors: red meat, processed meat, sugar beverage, sodium, low fruit, …\n9 diseases: coronary heart disease, stroke, …\n\n\n\nWalker 2021\nPuLP (python), linear optimizationn to determine the lowest possible impact diet for each scenario\nenv impact:\n\nClimate change\nbiodiversity loss\n\n\n\nNordman 2023\nOptimization targets (via QP)\n\nNutrient only\nnurient, health-based targets for food amounts\nGHGE only\nNutrient, health, GHGE\n\nCurrent GHGE: 4.37 kg CO2-eq\nmain food groups: 7 groups with smaller levels\nSub-groups: 50\nOptimized diet\n\nreduced proportion of animal based food (25% vs 43%) for energy\nmore grain and starches, lower cheese (not milk)\nmuch less discretional (junk) food and soft drinks"
  },
  {
    "objectID": "notes_internal/objective.html",
    "href": "notes_internal/objective.html",
    "title": "Formulation (QP)",
    "section": "",
    "text": "energy composition\nepi\nAcceptability\ncost"
  },
  {
    "objectID": "notes_internal/objective.html#food-groups",
    "href": "notes_internal/objective.html#food-groups",
    "title": "Formulation (QP)",
    "section": "Food groups",
    "text": "Food groups\n\n\n\nFood groups\nEnergy\nProtein\nFat\nCarb\nGHGE\n\n\n\n\nBread\n10.6956\n0.0912\n0.0302\n0.4413\n0.0011\n\n\nVegetables\n1.5653\n0.0149\n0.0084\n0.0498\n0.0010\n\n\nFruit, berries\n2.7289\n0.0076\n0.0041\n0.1341\n0.0007\n\n\nMeat\n7.7432\n0.1800\n0.1211\n0.0113\n0.0110\n\n\nFish\n6.0863\n0.1698\n0.0748\n0.0245\n0.0031\n\n\nMilk, yogurt\n1.9797\n0.0359\n0.0111\n0.0559\n0.0014\n\n\n\n\nObjective\nminimize deviation from current diet\n(x1 - 175.4)^2 +\n(x2 - 154.6)^2 +\n(x3 - 171.5)^2 +\n(x4 - 151.1)^2 +\n(x5 - 69.5)^2 +\n(x6 - 306.1)^2\n\n\nContraints, 5 categories\n(intake g 3681.2 )\nEnergy kj 9314\nprotein g 97.7\nfat g 86.3\ncarbs g 235.1\nGHGE &lt;= 4.7\n\n\n\nConstraint\nEnergy\nProtein\nFat\nCarb\nGHGE\n\n\n\n\nLower\n9000\n55\n61.8\n250\n0\n\n\nUpper\n10000\n111.5\n98.8\n334.6\n4.7"
  },
  {
    "objectID": "notes_internal/Optimization.html",
    "href": "notes_internal/Optimization.html",
    "title": "Option 1: constOptim",
    "section": "",
    "text": "https://cran.r-project.org/web/views/Optimization.html"
  },
  {
    "objectID": "notes_internal/Optimization.html#linear-programming-lp",
    "href": "notes_internal/Optimization.html#linear-programming-lp",
    "title": "Option 1: constOptim",
    "section": "Linear programming LP",
    "text": "Linear programming LP\nObjective linear, constraints linear equalities or inequalities\nmaximise f(x) = cx\ns.t. Ax &lt;= b\nx&gt;= 0"
  },
  {
    "objectID": "notes_internal/Optimization.html#quadratic-programming",
    "href": "notes_internal/Optimization.html#quadratic-programming",
    "title": "Option 1: constOptim",
    "section": "Quadratic programming",
    "text": "Quadratic programming\nsome QP are convex, some not\nConstraints: linear equality or inequality\nminimize 1/2 x^t Q x + c^t x\ns.t. Ax &lt; b"
  },
  {
    "objectID": "notes_internal/Optimization.html#nonlinear-optimizaion-more-general-than-qp",
    "href": "notes_internal/Optimization.html#nonlinear-optimizaion-more-general-than-qp",
    "title": "Option 1: constOptim",
    "section": "Nonlinear optimizaion (more general than QP)",
    "text": "Nonlinear optimizaion (more general than QP)\nminimize f(x)\ns.t. g(x) &lt;= 0\nh(x) = 0\nxl &lt;= x &lt;= xu"
  },
  {
    "objectID": "documentation/understand_data.html",
    "href": "documentation/understand_data.html",
    "title": "Part 1: Understand the current diet",
    "section": "",
    "text": "Load the aggregated food groups and their attributes. We have 28 food groups.\nDefine the constraints on"
  },
  {
    "objectID": "documentation/understand_data.html#exploratory-data-analysis-on-current-diet",
    "href": "documentation/understand_data.html#exploratory-data-analysis-on-current-diet",
    "title": "Part 1: Understand the current diet",
    "section": "Exploratory data analysis on current diet",
    "text": "Exploratory data analysis on current diet\nBefore we construct the optimization problem, we should always understand the data. This helps us picking the important food groups, as well as making sense of the constraints.\n\n# compute the contribution (indiv * intake) for 28 foods\nftotal <- apply(X = foods[, c('energy', 'protein', 'fat', \n                              'carbs', 'sugar', 'alcohol', 'ghge')], \n                MARGIN = 2, \n                FUN = function(x){x*foods$intake})\nrownames(ftotal) <- foods$food # name the rows\nhead(ftotal)\n\n                energy protein    fat   carbs  sugar alcohol   ghge\nBread        1876.0784 15.9614 5.2620 77.3514 0.3508       0 0.1754\nOther grains  630.9900  4.5000 1.8900 27.3150 0.4950       0 0.0900\nCakes         504.9860  2.3852 5.4112 15.0944 6.5860       0 0.0712\nPotatoes      257.0298  1.4238 0.4746 12.0684 0.0000       0 0.0000\nVegetables    241.9490  2.3190 1.2368  7.7300 0.7730       0 0.1546\nLegumes        29.9985  0.5005 0.1015  1.0010 0.0000       0 0.0035\n\n\nWe can also examine whether the current intake satisfy the constraints from above. For example, the energy contribution from bread is \\(175.4 \\times 10.696\\), which is the intake times per unit energy.\n\nt(as.matrix(foods$intake)) %*% as.matrix(foods[, .(energy, protein, fat, carbs, sugar, alcohol, ghge)])\n\n       energy protein     fat    carbs   sugar alcohol   ghge\n[1,] 9314.278 98.2159 85.7644 234.7172 39.2148  8.6498 3.7807\n\n\nIt looks like all categories but carbs fall within the expected range. Carb is slighter lower than the lower threshold.\nNow we can compute the percentage of each one of the 28 food group contribution towards the total.\n\n# divide by total of all 28 (upper constraints)\nfsum <- apply(ftotal, 2, sum)\nfsum\n\n   energy   protein       fat     carbs     sugar   alcohol      ghge \n9314.2778   98.2159   85.7644  234.7172   39.2148    8.6498    3.7807 \n\nfprop <- t(apply(X = ftotal, MARGIN = 1, FUN = function(x){x/fsum}))\nfprop <- round(fprop, digits = 3) # keep 3 digits\nrownames(fprop) <- foods$food\nhead(fprop)\n\n             energy protein   fat carbs sugar alcohol  ghge\nBread         0.201   0.163 0.061 0.330 0.009       0 0.046\nOther grains  0.068   0.046 0.022 0.116 0.013       0 0.024\nCakes         0.054   0.024 0.063 0.064 0.168       0 0.019\nPotatoes      0.028   0.014 0.006 0.051 0.000       0 0.000\nVegetables    0.026   0.024 0.014 0.033 0.020       0 0.041\nLegumes       0.003   0.005 0.001 0.004 0.000       0 0.001\n\n\nFor example, bread contributes to 20% towards the total energy, and 16.3% of the total protein."
  },
  {
    "objectID": "documentation/define_problem.html#formulation",
    "href": "documentation/define_problem.html#formulation",
    "title": "Part 2: Problem definition",
    "section": "Formulation",
    "text": "Formulation\nAim: find a diet combination that satisfy the nutritional and environmental constraints, while similar to the current diet.\n\nNotation\nWe make the following notation:\n\n\\(x_1, x_2, ..., x_{k}\\) are the target food intake (in grams, or other units) for \\(k\\) food groups.\n\\(X_1, X_2, ..., X_{k}\\) are the current food intake (in grams, or other units).\n\nFor the constraints,\n\n\\(e_1, ..., e_k\\): energy associated with each of the food groups\n\n\\(E\\) is the total energy for all foods, with range between \\(E_{lower}, E_{upper}\\)\nFor example, with the data we have, this range is (9000, 10000).\n\n\\(p_1, ..., p_k\\): protein\n\\(f_1, ..., f_k\\): fat\n\\(c_1, ..., c_k\\): carbs\n\\(s_1, ..., s_k\\): sugar\n\\(a_1, ..., a_k\\): alcohol\n\\(g_1, ..., g_k\\): ghge\n\n\n\nOptimization\nFind a set of \\(x_1, ..., x_k\\) such that the values would\nminimise the squared sum of differences between current diet and target diet:\n\\((x_1 - X_1)^2 + (x_2 - X_2)^2 + ... + (x_k - X_k)^2\\)\nand satisfy the following constraints:\n\\(x_1, ..., x_k >= 0\\) (realistic diet intake can not be negative)\n\\(x_1e_1 + x_2 e_2 + ... + x_k e_k >= E_{lower}\\), total energy above the lower limit\n\\(x_1e_1 + x_2 e_2 + ... + x_k e_k <= E_{upper}\\), total energy below the upper limit\n\\(x_1p_1 + x_2 p_2 + ... + x_k p_k >= P_{lower}\\), total protein below the upper limit\n\\(x_1p_1 + x_2 p_2 + ... + x_k e_k <= P_{upper}\\), total protein below the upper limit\nAnd so on."
  },
  {
    "objectID": "documentation/define_problem.html#solve-the-optimization-problem",
    "href": "documentation/define_problem.html#solve-the-optimization-problem",
    "title": "Part 2: Problem definition",
    "section": "Solve the optimization problem",
    "text": "Solve the optimization problem\nThis setting is a quadratic program (QP). It is an optimization problem with quadratic objective, and inequality constraints. We do not have equality constraints in this setting.\nWith R, there are various software to find a solution:\n\nnloptr in nloptr package (non-linear optimization),\nconstrOptim in stats package, which relies on optim function,\nsolve.QP in quadprog package\n\namong others."
  },
  {
    "objectID": "documentation/understand_data.html#compare-with-constraints",
    "href": "documentation/understand_data.html#compare-with-constraints",
    "title": "Part 1: Understand the current diet",
    "section": "Compare with constraints",
    "text": "Compare with constraints\nNow we can also examine whether the current intake satisfy the constraints.\n\nt(as.matrix(foods$intake)) %*% as.matrix(foods[, .(energy, protein, fat, carbs, sugar, alcohol, ghge)])\n\n       energy protein     fat    carbs   sugar alcohol   ghge\n[1,] 9314.278 98.2159 85.7644 234.7172 39.2148  8.6498 3.7807\n\n\nIt looks like all categories but carbs fall within the expected range. Carb is slighter lower than the lower threshold."
  },
  {
    "objectID": "documentation/small_demo.html",
    "href": "documentation/small_demo.html",
    "title": "Part 3: A simple problem with 3 foods and 3 constraints",
    "section": "",
    "text": "We document the optimization procedure with nloptr using a small example of 3 foods, and 3 constraints (energy, protein, ghge)."
  },
  {
    "objectID": "documentation/small_demo.html#optimization",
    "href": "documentation/small_demo.html#optimization",
    "title": "Part 3: A simple problem with 3 foods and 3 constraints",
    "section": "Optimization",
    "text": "Optimization\nNow we are going to solve the optimization problem using nloptr.\nThere are a few components that need to be specified:\n\nobjective function (as a function of x)\nconstraint functions\ninitial values\noptions\n\n\nObjective function\nThe objective is to minimize the following function:\n\\((x_1 - X_1)^2 + (x_2 - X_2)^2 + (x_3 - X_3)^2\\) where\n\\(x_1, x_2, x_3\\) are the target diet (grams or other units) we want to find, these three are unknown.\n\\(X_1, X_2, X_3\\) are the current diet for bread, vegetables and red meat. We have these values in the data: 175.4, 154.6, 117.6. In the function we use fd$intake to programmatically extract the values.\n\nfd$intake\n\n[1] 175.4 154.6 117.6\n\n# define objective \nobjective <- function(x)\n{\n  return ( (x[1]- fd$intake[1])^2 + \n             (x[2]- fd$intake[2])^2 + \n             (x[3]- fd$intake[3])^2)\n}\n\n\n\nConstraints\nNow we define the inequality constraints. For this demo, we only include 3 metrics (energy, protein, ghge) for simplicity.\n\n# select the metrics we want to keep \nc3 <- c3foods[, c('energy', 'protein', 'ghge')]\nc3\n\n      energy  protein    ghge\nlwr 2789.142 34.76268 1.67292\nupr 3099.047 38.62520 1.85880\n\n\nThe inequality constraints need to be reformulated for nloptr to work. More specifically, nloptr optimizes a function \\(f(x)\\) subject to a set of equality and inequality constraints. For the inequality constraints, they need to be the form of \\(g(x) <= 0\\).\nWe write out our own constraints for energy:\n\\(x_1 e_1 + x_2e_2 + x_3e_3 >= E_{lower}, x_1 e_1 + x_2e_2 + x_3e_3 <= E_{upper}\\)\nThese two need to be re-written to be in the format of \\(g(x) <= 0\\).\n\\(-(x_1 e_1 + x_2e_2 + x_3e_3)+E_{lower} <= 0\\)\n\\(x_1 e_1 + x_2e_2 + x_3e_3 - E_{upper} <= 0\\)\nThe constraints for protein, ghge can be written in similar ways.\n\n# define the inequality constraints\ninequalconstr <- function (x) {\n  constr <- c(\n    # energy\n    - x[1]*fd$energy[1] - x[2]*fd$energy[2] - x[3]*fd$energy[3] + c3$energy[1], # lower\n    x[1]*fd$energy[1] + x[2]*fd$energy[2] + x[3]*fd$energy[3] - c3$energy[2], # upper\n    \n    # protein\n    - x[1]*fd$protein[1] - x[2]*fd$protein[2] - x[3]*fd$protein[3] + c3$protein[1],\n    x[1]*fd$protein[1] + x[2]*fd$protein[2] + x[3]*fd$protein[3] - c3$protein[2],\n\n    # ghge\n    - x[1]*fd$ghge[1] - x[2]*fd$ghge[2] - x[3]*fd$ghge[3]+ c3$ghge[1],\n    x[1]*fd$ghge[1] + x[2]*fd$ghge[2] + x[3]*fd$ghge[3] - c3$ghge[2]\n  )\n  return (constr)\n}\n\n\n\nOther options\nWe do not need to explicitly specify the non-negativity constraints for \\(x\\) inside the function. They are specified outside the function as a set of lower and upper bounds. You can set these range to be anything that make sense; for now we make it close to the current diet.\nInitial values are the values you tell the program to start the search. This is also up to you; sometimes initial values can have a large impact on the final results when the optimization problem is difficult (e.g. has multiple local optima). We can start close to the values of the current diet.\n\n# lower and upper bounds of x (3 foods)\nlb <- c(160, 140, 100)\nub <- c(180, 160, 120)\n\n# Initial values\n# (try different ones!)\nx0 <- c(175, 150, 110) \n\nOptions should also be supplied to the program as a named list. These are specifications for the algorithm, tolerance and maximum evaluation. For more details please check the function manual.\nPay attention to the last line here: the size inside rep() need to match the number of inequality constraints. In this example it should be 6.\n\nopts <- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 6 ))\n\nNow we run the optimization by calling nloptr from nloptr package. If you have loaded the package before, you don’t need the :: between the two.\nWe print the result and check the optimized values.\n\n# run the algorithm\nres <- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n  )\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 4 ( NLOPT_XTOL_REACHED: Optimization stopped because \nxtol_rel or xtol_abs (above) was reached. )\n\nNumber of Iterations....: 35522 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  6 \nNumber of equality constraints:    0 \nOptimal value of objective function:  9.22904150236166e-26 \nOptimal value of controls: 175.4 154.6 117.6\n\n\nThe optimal values are 175.4, 154.6, 117.6. These are the same as the current diet.\n\n\n\n\n\n\nNote\n\n\n\nThis result is not surprising; our current diet on the three foods already satisfies the constraints, and it is the closest to the current diet (\\((x_1 - X_1)^2 +(x_2 - X_2)^2 + (x_3 - X_3)^2 = 0\\)) when \\(x_1 = X_1, x_2 = X_2, x_3 = X_3\\)."
  },
  {
    "objectID": "documentation/small_demo.html#constraints-for-3-foods",
    "href": "documentation/small_demo.html#constraints-for-3-foods",
    "title": "Part 3: A simple problem with 3 foods and 3 constraints",
    "section": "Constraints for 3 foods",
    "text": "Constraints for 3 foods\nWe compute the constraints for 3 foods together. Note that the consumption for each of the 28 food groups are different, hence we can not use 3/28 times the total energy, protein…; we need to use a weighted average.\nThe cosntraints can be set to any positive number that make sense.\n\n# original constraint for all foods (maximum)\nconst_max_allfoods <- c(9314.3, 98.2, 85.8, 234.7, 39.2, 8.6, 3.8)\n\n# 3 foods contribution (maximum)\nconst_max_3foods <- t(as.matrix(fd$intake)) %*% as.matrix(fd[, .(energy, protein, fat, carbs, sugar, alcohol, ghge)])\nconst_max_3foods\n\n       energy protein     fat   carbs  sugar alcohol   ghge\n[1,] 3099.047 38.6252 22.8452 86.7278 1.1238       0 1.8588\n\n\nIn the optimization problem, we want to have a range (lower, upper) for the metrics. We can assume that the lower range is 90% of the maximum.\n\nc3foods <- rbind(const_max_3foods*0.9, const_max_3foods*1)\nrownames(c3foods) <- c('lwr', 'upr')\nc3foods <- data.frame(c3foods)\nc3foods\n\n      energy  protein      fat    carbs   sugar alcohol    ghge\nlwr 2789.142 34.76268 20.56068 78.05502 1.01142       0 1.67292\nupr 3099.047 38.62520 22.84520 86.72780 1.12380       0 1.85880\n\n\nFor example, the total energy for the 3 foods together should be within [2789.14, 3099.05]."
  },
  {
    "objectID": "documentation/small_demo.html#with-a-more-strict-constraint",
    "href": "documentation/small_demo.html#with-a-more-strict-constraint",
    "title": "Part 3. Demo: 3 foods, 3 constraints",
    "section": "With a more strict constraint",
    "text": "With a more strict constraint\nWe can try to modify the constraint values to see if the diet will be different.\nFor example, we can limit ghge. The current upper and lower range are [1.673, 1.859], let us try to limit it to [1.338, 1.487], which is 80% of the original values.\n\n# c3foods <- rbind(const_max_3foods*0.9, const_max_3foods*1)\n# rownames(c3foods) <- c('lwr', 'upr')\n# c3foods <- data.frame(c3foods)\nc3\n\n      energy  protein    ghge\nlwr 2789.142 34.76268 1.67292\nupr 3099.047 38.62520 1.85880\n\nc3_alt <- c3\nc3_alt$ghge <- c3_alt$ghge * 0.8 # you can try different limits\nc3_alt\n\n      energy  protein     ghge\nlwr 2789.142 34.76268 1.338336\nupr 3099.047 38.62520 1.487040\n\n\nWe keep the objective function and options same as before; but we modify the inequality constraints.\n\n# define the inequality constraints\n# instead of c3, we use c3_alt\n\ninequalconstr_alt <- function (x) {\n  constr <- c(\n    # energy\n    - x[1]*fd$energy[1] - x[2]*fd$energy[2] - x[3]*fd$energy[3] + c3_alt$energy[1], # lower\n    x[1]*fd$energy[1] + x[2]*fd$energy[2] + x[3]*fd$energy[3] - c3_alt$energy[2], # upper\n    \n    # protein\n    - x[1]*fd$protein[1] - x[2]*fd$protein[2] - x[3]*fd$protein[3] + c3_alt$protein[1],\n    x[1]*fd$protein[1] + x[2]*fd$protein[2] + x[3]*fd$protein[3] - c3_alt$protein[2],\n\n    # ghge\n    - x[1]*fd$ghge[1] - x[2]*fd$ghge[2] - x[3]*fd$ghge[3]+ c3_alt$ghge[1], # new values\n    x[1]*fd$ghge[1] + x[2]*fd$ghge[2] + x[3]*fd$ghge[3] - c3_alt$ghge[2] # new values\n  )\n  return (constr)\n}\n\nNow we run the optimization again with the new constraint, inequalconstr_alt.\n\n# run the algorithm\nres_alt <- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr_alt, # inequality constraint (NEW)\n  opts        = opts       # options\n  )\n\nprint(res_alt)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr_alt, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  6 \nNumber of equality constraints:    0 \nCurrent value of objective function:  566.401428417081 \nCurrent value of controls: 168.806 140 100\n\n\nThe new results are 168.806, 140, 100.\n\n\n\n\n\n\nCompare the two runs\n\n\n\n\nBread: 175.4 -> 168.8 (3.7% reduction)\nVegetables: 154.6 -> 140 (9.4% reduction)\nRed meat: 117.6 -> 100 (15.0% reduction)\n\nThis makes sense, as red meat is the largest contributor for ghge.\n\n\nWhat we have shown here is a very crude demonstration of how to construct the optimization problem, and a sanity check of the results. A lot more can be tried out."
  },
  {
    "objectID": "documentation/understand_data.html#visualization",
    "href": "documentation/understand_data.html#visualization",
    "title": "Part 1: Understand the current diet",
    "section": "Visualization",
    "text": "Visualization\n\n\n\n\n\n\nNote\n\n\n\nIn this section we are mostly focused on energy, intake, ghge. It is easy to extend to other macronutrient categories.\n\n\nWe need some more data manipulation before plotting.\n\n\nShow code\n# first define big groups\ngrain <- c('Bread', 'Other grains', 'Cakes')\nfruit_vege <- c('Potatoes', 'Vegetables', 'Legumes', 'Fruit, berries', \n                'Juice', 'Nuts', 'Vegetarian products')\nmeat <- c('Red meat', 'White meat')\nfish_egg <- c('Fish', 'Eggs')\ndairy <- c('Cream, cream desserts', 'Milk, yoghurt', 'Cheese')\nfats <- c('Butter, margarine, oil')\nbeverages <- c('Coffee, tea', 'Soda, saft', 'Water', \n               'Alcoholic beverages', 'Non-dairy milk')\nsugar_other <- c('Sugar, sweets', 'Snacks', 'Sauces', 'Spices', 'Other')\n\n# reorder food names to make the plot easier to read\nnames_ordered <- c(grain, fruit_vege, meat, fish_egg, \n                   dairy, fats, beverages, sugar_other)\n\nnames_ordered\n\n\n [1] \"Bread\"                  \"Other grains\"           \"Cakes\"                 \n [4] \"Potatoes\"               \"Vegetables\"             \"Legumes\"               \n [7] \"Fruit, berries\"         \"Juice\"                  \"Nuts\"                  \n[10] \"Vegetarian products\"    \"Red meat\"               \"White meat\"            \n[13] \"Fish\"                   \"Eggs\"                   \"Cream, cream desserts\" \n[16] \"Milk, yoghurt\"          \"Cheese\"                 \"Butter, margarine, oil\"\n[19] \"Coffee, tea\"            \"Soda, saft\"             \"Water\"                 \n[22] \"Alcoholic beverages\"    \"Non-dairy milk\"         \"Sugar, sweets\"         \n[25] \"Snacks\"                 \"Sauces\"                 \"Spices\"                \n[28] \"Other\"                 \n\n\n\n\nShow code\n# require some data manip\n# need big food group, food name (smaller food group)\npdt <- data.frame(ftotal) # total \npdt$food_name <- row.names(pdt)\npdt <- data.table::setDT(pdt)\n\n# attach big group\npdt[food_name %in% grain, big_group := 'grain']\npdt[food_name %in% fruit_vege, big_group := 'fruit_vege']\npdt[food_name %in% meat, big_group := 'meat']\npdt[food_name %in% fish_egg, big_group := 'fish_egg']\npdt[food_name %in% dairy, big_group := 'dairy']\npdt[food_name %in% fats, big_group := 'fats']\npdt[food_name %in% beverages, big_group := 'beverages']\npdt[food_name %in% sugar_other, big_group := 'sugar_other']\n\n# make long format\npdt_long <- tidyr::pivot_longer(pdt, cols = -c(food_name, big_group),\n                                names_to = 'category')\npdt_long <- data.table::setDT(pdt_long)\n\n# new variable, food_name_order\npdt_long$food_name_order <- factor(pdt_long$food_name, \n                                   levels = names_ordered, \n                                   labels = names_ordered)\n\n\n\nEnergy contribution from 28 food groups\nIn total these 28 food groups contribute to 9314kJ. Here is a breakdown of each food groups, colored by different types of food (crude).\n\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(RColorBrewer)\n\np1 <- ggplot(data = pdt_long[category == 'energy'], \n             aes(x = food_name_order, y = value, fill = big_group))\np1 <- p1 + geom_bar(stat = 'identity')\np1 <- p1 + coord_flip()\np1 <- p1 + theme_bw()\np1 <- p1 + scale_fill_brewer(palette = 'Dark2')\np1 <- p1 + labs(title = 'Energy (multiplied by food intake)', \n                x = 'Food groups', \n                y = 'Energy')\np1 <- p1 + theme(axis.text = element_text(size = 12), \n                   axis.title = element_text(size = 12), \n                   plot.title = element_text(size = 20))\np1\n\n\n\n\n\n\nGHGE contribution from 28 food groups\nWe can also plot a different metric, say GHGE. We can see that red meat is the largest contributor, followed by cheese and milk (dairy products).\n\n\nShow code\np2 <- ggplot(data = pdt_long[category == 'ghge'], \n             aes(x = food_name_order, y = value, fill = big_group))\np2 <- p2 + geom_bar(stat = 'identity')\np2 <- p2 + coord_flip()\np2 <- p2 + theme_bw()\np2 <- p2 + scale_fill_brewer(palette = 'Dark2')\np2 <- p2 + labs(title = 'GHGE (multiplied by food intake)', \n                x = 'Food groups', \n                y = 'GHGE')\np2 <- p2 + theme(axis.text = element_text(size = 12), \n                 axis.title = element_text(size = 12), \n                 plot.title = element_text(size = 20))\n\np2\n\n\n\n\n\n\n\nEnergy vs GHGE\nWe can also show the per unit contribution to energy and GHGE. The size of the bubbles are the amount of consumption: the bigger the more consumed.\n\n\nShow code\npdfd <- data.table::setDT(foods)\n# remove water, outlier\npdfd <- pdfd[food != 'Water']\n\n\n# attach label \npdfd[food %in% grain, big_group := 'grain']\npdfd[food %in% fruit_vege, big_group := 'fruit_vege']\npdfd[food %in% meat, big_group := 'meat']\npdfd[food %in% fish_egg, big_group := 'fish_egg']\npdfd[food %in% dairy, big_group := 'dairy']\npdfd[food %in% fats, big_group := 'fats']\npdfd[food %in% beverages, big_group := 'beverages']\npdfd[food %in% sugar_other, big_group := 'sugar_other']\n\n\np3 <- ggplot(data = pdfd, \n             aes(x = energy, y = ghge, size = intake, \n                 label = food, color = big_group))\np3 <- p3 + geom_point(alpha = 0.3) + xlim(-3, 30) + ylim(-0.002, 0.015)\np3 <- p3 + scale_size(range = c(0.1, 20))\np3 <- p3 + geom_text_repel(size = 4, max.overlaps = 15)\n# p3 <- p3 + geom_text(size = 3, check_overlap = T)\np3 <- p3 + theme_bw()\np3 <- p3 + scale_color_brewer(palette = 'Dark2')\np3 <- p3 + labs(title = 'Energy vs GHGE per unit food (group)', \n                x = 'Energy (per unit)', \n                y = 'GHGE (per unit)')\np3\n\n\n\n\n\n\n\nProportion for 5 metrics\nFinally we present the percentage contribution of 28 food groups towards 5 categories.\n\n\nShow code\npdfp <- data.frame(fprop) # total \npdfp$food_name <- row.names(pdfp)\n\n# attach big group\ndata.table::setDT(pdfp)\npdfp[food_name %in% grain, big_group := 'grain']\npdfp[food_name %in% fruit_vege, big_group := 'fruit_vege']\npdfp[food_name %in% meat, big_group := 'meat']\npdfp[food_name %in% fish_egg, big_group := 'fish_egg']\npdfp[food_name %in% dairy, big_group := 'dairy']\npdfp[food_name %in% fats, big_group := 'fats']\npdfp[food_name %in% beverages, big_group := 'beverages']\npdfp[food_name %in% sugar_other, big_group := 'sugar_other']\n\npdfp_long <- tidyr::pivot_longer(pdfp, cols = -c(food_name, big_group), names_to = 'category')\npdfp_long <- data.table::setDT(pdfp_long)\n\n# also add orders here\npdfp_long$food_name_order <- factor(pdfp_long$food_name, \n                                   levels = names_ordered, \n                                   labels = names_ordered)\n\n# plot \np4 <- ggplot(data = pdfp_long[category %in% c('energy', 'protein', 'fat', 'carbs','ghge')], \n             aes(x = food_name_order, y = value, fill = big_group))\np4 <- p4 + geom_bar(stat = 'identity')\np4 <- p4 + coord_flip()\np4 <- p4 + facet_wrap(~category, ncol = 5)\np4 <- p4 + scale_fill_brewer(palette = 'Dark2')\np4 <- p4 + labs(title = 'Proportion of food contribution',\n                subtitle = 'Each category sums up to 1',\n                x = 'Food groups', \n                y = 'Percentage')\np4 <- p4 + theme_bw()\np4 <- p4 + theme(axis.text = element_text(size = 10), \n                 axis.title = element_text(size = 10), \n                 plot.title = element_text(size = 15), \n                 strip.text = element_text(size = 12), \n                 legend.position = 'none')\np4"
  },
  {
    "objectID": "documentation/small_demo.html#reduce-ghge-to-80",
    "href": "documentation/small_demo.html#reduce-ghge-to-80",
    "title": "Part 3: A simple problem with 3 foods and 3 constraints",
    "section": "Reduce ghge to 80%",
    "text": "Reduce ghge to 80%\nWe can try to modify the constraint values to see if the diet will be different.\nFor example, we can limit ghge. The current upper and lower range are [1.673, 1.859], let us try to limit it to [1.338, 1.487], which is 80% of the original values.\n\n# c3foods <- rbind(const_max_3foods*0.9, const_max_3foods*1)\n# rownames(c3foods) <- c('lwr', 'upr')\n# c3foods <- data.frame(c3foods)\nc3\n\n      energy  protein    ghge\nlwr 2789.142 34.76268 1.67292\nupr 3099.047 38.62520 1.85880\n\nc3_alt <- c3\nc3_alt$ghge <- c3_alt$ghge * 0.8 # you can try different limits\nc3_alt\n\n      energy  protein     ghge\nlwr 2789.142 34.76268 1.338336\nupr 3099.047 38.62520 1.487040\n\n\nWe keep the objective function and options same as before; but we modify the inequality constraints.\n\n# define the inequality constraints\n# instead of c3, we use c3_alt\n\ninequalconstr_alt <- function (x) {\n  constr <- c(\n    # energy\n    - x[1]*fd$energy[1] - x[2]*fd$energy[2] - x[3]*fd$energy[3] + c3_alt$energy[1], # lower\n    x[1]*fd$energy[1] + x[2]*fd$energy[2] + x[3]*fd$energy[3] - c3_alt$energy[2], # upper\n    \n    # protein\n    - x[1]*fd$protein[1] - x[2]*fd$protein[2] - x[3]*fd$protein[3] + c3_alt$protein[1],\n    x[1]*fd$protein[1] + x[2]*fd$protein[2] + x[3]*fd$protein[3] - c3_alt$protein[2],\n\n    # ghge\n    - x[1]*fd$ghge[1] - x[2]*fd$ghge[2] - x[3]*fd$ghge[3]+ c3_alt$ghge[1], # new values\n    x[1]*fd$ghge[1] + x[2]*fd$ghge[2] + x[3]*fd$ghge[3] - c3_alt$ghge[2] # new values\n  )\n  return (constr)\n}\n\nNow we run the optimization again with the new constraint, inequalconstr_alt.\n\n# run the algorithm\nres_alt <- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr_alt, # inequality constraint (NEW)\n  opts        = opts       # options\n  )\n\nprint(res_alt)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr_alt, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  6 \nNumber of equality constraints:    0 \nCurrent value of objective function:  566.401428410334 \nCurrent value of controls: 168.806 140 100\n\n\nThe new results are 168.806, 140, 100.\n\n\n\n\n\n\nCompare the two runs\n\n\n\n\nBread: 175.4 -> 168.8 (3.7% reduction)\nVegetables: 154.6 -> 140 (9.4% reduction)\nRed meat: 117.6 -> 100 (15.0% reduction)\n\nThis makes sense, as red meat is the largest contributor for ghge.\n\n\nWhat we have shown here is a very crude demonstration of how to construct the optimization problem, and a sanity check of the results. A lot more can be tried out."
  },
  {
    "objectID": "documentation/troubleshoot_3foods.html",
    "href": "documentation/troubleshoot_3foods.html",
    "title": "Part 4: Troubleshoot part 3",
    "section": "",
    "text": "Previously we have coded the algorithm with nloptr function. A few issues have popped up: some diet do not fall within the constraints. Possible reasons:\nSteps taken so far (2023.08.27)"
  },
  {
    "objectID": "documentation/troubleshoot_3foods.html#constraints-for-3-foods",
    "href": "documentation/troubleshoot_3foods.html#constraints-for-3-foods",
    "title": "Part 4: Troubleshoot part 3",
    "section": "Constraints for 3 foods",
    "text": "Constraints for 3 foods\nWe compute the constraints for 3 foods together. Note that the consumption for each of the 28 food groups are different, hence we can not use 3/28 times the total energy, protein…; we need to use a weighted average.\nThe cosntraints can be set to any positive number that make sense. In the optimization problem, we want to have a range (lower, upper) for the metrics. We can assume that the lower range is 90% of the maximum.\n\n# original constraint for all foods (maximum)\nconst_max_allfoods <- c(9314.3, 98.2, 85.8, 234.7, 39.2, 8.6, 3.8)\n\n# 3 foods contribution (maximum)\nconst_max_3foods <- t(as.matrix(current_diet)) %*% as.matrix(contrib_pergram)\nconst_max_3foods\n\n       energy protein     fat   carbs  sugar alcohol   ghge\n[1,] 3099.047 38.6252 22.8452 86.7278 1.1238       0 1.8588\n\n# exclude sugar, alcohol\nconst_max_3foods <- const_max_3foods[, c('energy', 'protein', 'fat', 'carbs', 'ghge')]\n\n# range of target: 0.9-1 of the maximum\n# this is one thing that we could adjust: hard threshould to soft\nconst_lwrupr <- rbind(const_max_3foods*0.9, const_max_3foods*1)\nrownames(const_lwrupr) <- c('lwr', 'upr')\nconst_lwrupr <- data.table(const_lwrupr)\nconst_lwrupr\n\n     energy  protein      fat    carbs    ghge\n1: 2789.142 34.76268 20.56068 78.05502 1.67292\n2: 3099.047 38.62520 22.84520 86.72780 1.85880\n\n\nFor example, the total energy for the 3 foods together should be within [2789.14, 3099.05]."
  },
  {
    "objectID": "documentation/troubleshoot_3foods.html#standardize-food-contribution-per-gram",
    "href": "documentation/troubleshoot_3foods.html#standardize-food-contribution-per-gram",
    "title": "Part 4: Troubleshoot part 3",
    "section": "Standardize food contribution per gram",
    "text": "Standardize food contribution per gram\nSince the range of constraints for 5 categories differ hugely, it could affect the numeric evaluation. We want them to be on comparative scales.\nThe current solution is to standardize the contribution in each category (e.g. energy) by its original value divided by the standard deviation. For example,\n\nthe contribution of energy per food becomes (2.25, 0.33, 1.76) rather than (10.69, 1.56, 8.34)\nthe contribution of ghge per food becomes (0.14, 0.14, 1.87) rather than (0.001, 0.001, 0.013)\n\nSimilarly, the upper and lower limit of the constraints also need to be re-scaled. After rescaling, the target will be on a range of hundreds, rather than 3000 vs 1.8.\n\n# find sd for each category: energy, protein.. ghge\n# divide by these coef\ncontrib_pergram <- contrib_pergram[, c('energy', 'protein', 'fat', 'carbs', 'ghge')]\ncontrib_pergram\n\n   energy protein   fat carbs  ghge\n1: 10.696   0.091 0.030 0.441 0.001\n2:  1.565   0.015 0.008 0.050 0.001\n3:  8.342   0.173 0.139 0.014 0.013\n\nsd_coef <- apply(contrib_pergram, MARGIN = 2, sd)\n\ncontrib_pergram_std <- sweep(contrib_pergram, MARGIN = 2, 1/sd_coef, FUN = '*')\ncontrib_pergram_std\n\n     energy   protein       fat     carbs      ghge\n1 2.2562170 1.1516220 0.4276560 1.8621635 0.1443376\n2 0.3301215 0.1898278 0.1140416 0.2111296 0.1443376\n3 1.7596637 2.1893473 1.9814728 0.0591163 1.8763884\n\n# standardize constraint\n# test the previous constraint\nconst_lwrupr\n\n     energy  protein      fat    carbs    ghge\n1: 2789.142 34.76268 20.56068 78.05502 1.67292\n2: 3099.047 38.62520 22.84520 86.72780 1.85880\n\nconst_lwrupr_std <- sweep(const_lwrupr, MARGIN = 2, 1/sd_coef, FUN = '*')\nconst_lwrupr_std\n\n    energy  protein      fat    carbs     ghge\n1 588.3423 439.9282 293.0966 329.5946 241.4652\n2 653.7137 488.8091 325.6629 366.2162 268.2947\n\n\nIn the future, different scaling factor can be applied; but it should be a positive number after scaling. Could try dividing the difference between max and min of this variable."
  },
  {
    "objectID": "documentation/troubleshoot_3foods.html#example-2-reduce-ghge-to-85",
    "href": "documentation/troubleshoot_3foods.html#example-2-reduce-ghge-to-85",
    "title": "Part 4: Troubleshoot part 3",
    "section": "Example 2: reduce ghge to 85%",
    "text": "Example 2: reduce ghge to 85%\nThis is one example where the optimal constraints can not be reached. You’ll see that the boundaries that we set in the algorithm have been reached; suggesting that if we modify these parameters, the solution could still be found.\nBe careful with HOW MUCH it deviates from the target!\n\ncstr <- copy(const_lwrupr_std) # this line is important: it keeps a copy of the original values\ncstr$ghge <- cstr$ghge * 0.85 # reduce to 0.85\ncstr\n\n    energy  protein      fat    carbs     ghge\n1 588.3423 439.9282 293.0966 329.5946 205.2454\n2 653.7137 488.8091 325.6629 366.2162 228.0505\n\n# use the standardized food contribution per gram \n# contrib_pergram_std\n\n# define the inequality constraints\ninequalconstr <- function (x) {\n  \n  cps <- contrib_pergram_std # call the values\n  # cstr is used as the last item in each equation\n  \n  constr <- c(\n    # energy\n    - x[1]*cps$energy[1] - x[2]*cps$energy[2] - x[3]*cps$energy[3] + cstr$energy[1], # lower\n    x[1]*cps$energy[1] + x[2]*cps$energy[2] + x[3]*cps$energy[3] - cstr$energy[2], # upper\n    \n    # protein\n    - x[1]*cps$protein[1] - x[2]*cps$protein[2] - x[3]*cps$protein[3] + cstr$protein[1],\n    x[1]*cps$protein[1] + x[2]*cps$protein[2] + x[3]*cps$protein[3] - cstr$protein[2],\n    \n    # fat\n    - x[1]*cps$fat[1] - x[2]*cps$fat[2] - x[3]*cps$fat[3]+ cstr$fat[1],\n    x[1]*cps$fat[1] + x[2]*cps$fat[2] + x[3]*cps$fat[3] - cstr$fat[2],\n\n    # carbs\n    - x[1]*cps$carbs[1] - x[2]*cps$carbs[2] - x[3]*cps$carbs[3]+ cstr$carbs[1],\n    x[1]*cps$carbs[1] + x[2]*cps$carbs[2] + x[3]*cps$carbs[3] - cstr$carbs[2],\n    \n    # ghge\n    - x[1]*cps$ghge[1] - x[2]*cps$ghge[2] - x[3]*cps$ghge[3]+ cstr$ghge[1],\n    x[1]*cps$ghge[1] + x[2]*cps$ghge[2] + x[3]*cps$ghge[3] - cstr$ghge[2]\n  )\n  return (constr)\n}\n\n# lower and upper bounds of x (3 foods)\nlb <- c(160, 140, 100)\nub <- c(180, 160, 120)\n\n# Initial values\n# (try different ones!)\nx0 <- c(175, 150, 110)\n\nopts <- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 10 )) # match number of const\n\n# run the algorithm\nres <- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n)\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  10 \nNumber of equality constraints:    0 \nCurrent value of objective function:  528.456412819861 \nCurrent value of controls: 177.753 140 100\n\n\nNow we check the results for the second problem.\n\nres_diet <- res$solution\n\n# print with the current diet, and change percentage\n# also print the boundary, in case it hit boundary\n\ndiet_result <- data.frame(\n  name = c('Bread', 'Vegetables', 'Red meat'),\n  current = current_diet, \n  new = res_diet, \n  percent_change = round((res_diet - current_diet)/current_diet, 3),\n  lower_limit = lb, \n  upper_limit = ub\n)\ndiet_result\n\n        name current     new percent_change lower_limit upper_limit\n1      Bread   175.4 177.753          0.013         160         180\n2 Vegetables   154.6 140.000         -0.094         140         160\n3   Red meat   117.6 100.000         -0.150         100         120\n\n\n\n# verify whether it falls within \noutput_newdiet <- t(as.matrix(res_diet)) %*% as.matrix(contrib_pergram_std)\n# output_newdiet\n\n# cstr\nconst_result <- t(rbind(output_newdiet, cstr))\ncolnames(const_result) <- c('new_diet','const_lwr', 'const_upr')\nconst_result <- data.table(const_result)\n# conditions\nconst_result[, is_ok := 'Yes']\nconst_result[new_diet < const_lwr, is_ok := 'beyond lower']\nconst_result[new_diet > const_upr, is_ok := 'beyond upper']\n\n# relative difference (since we rescaled the targets)\nconst_result[, relative_dev := 0]\nconst_result[is_ok == 'beyond lower', relative_dev := round((new_diet - const_lwr)/const_lwr, 3)]\nconst_result[is_ok == 'beyond upper', relative_dev := round((new_diet - const_upr)/const_upr, 3)]\n\n# print out\nconst_result\n\n   new_diet const_lwr const_upr        is_ok relative_dev\n1: 623.2326  588.3423  653.7137          Yes        0.000\n2: 450.2148  439.9282  488.8091          Yes        0.000\n3: 290.1302  293.0966  325.6629 beyond lower       -0.010\n4: 366.4749  329.5946  366.2162 beyond upper        0.001\n5: 233.5025  205.2454  228.0505 beyond upper        0.024"
  },
  {
    "objectID": "documentation/troubleshoot_3foods.html#example-2-reduce-ghge-to-85-1",
    "href": "documentation/troubleshoot_3foods.html#example-2-reduce-ghge-to-85-1",
    "title": "Part 4: Troubleshoot part 3",
    "section": "Example 2: reduce ghge to 85%",
    "text": "Example 2: reduce ghge to 85%\nThis is one example where the optimal constraints can not be reached. You’ll see that the boundaries that we set in the algorithm have been reached; suggesting that if we modify these parameters, the solution could still be found.\nBe careful with HOW MUCH it deviates from the target!\n\ncstr <- copy(const_lwrupr_std) # this line is important: it keeps a copy of the original values\ncstr$ghge <- cstr$ghge * 0.85 # reduce to 0.85\ncstr\n\n    energy  protein      fat    carbs     ghge\n1 588.3423 439.9282 293.0966 329.5946 205.2454\n2 653.7137 488.8091 325.6629 366.2162 228.0505\n\n# use the standardized food contribution per gram \n# contrib_pergram_std\n\n# define the inequality constraints\ninequalconstr <- function (x) {\n  \n  cps <- contrib_pergram_std # call the values\n  # cstr is used as the last item in each equation\n  \n  constr <- c(\n    # energy\n    - x[1]*cps$energy[1] - x[2]*cps$energy[2] - x[3]*cps$energy[3] + cstr$energy[1], # lower\n    x[1]*cps$energy[1] + x[2]*cps$energy[2] + x[3]*cps$energy[3] - cstr$energy[2], # upper\n    \n    # protein\n    - x[1]*cps$protein[1] - x[2]*cps$protein[2] - x[3]*cps$protein[3] + cstr$protein[1],\n    x[1]*cps$protein[1] + x[2]*cps$protein[2] + x[3]*cps$protein[3] - cstr$protein[2],\n    \n    # fat\n    - x[1]*cps$fat[1] - x[2]*cps$fat[2] - x[3]*cps$fat[3]+ cstr$fat[1],\n    x[1]*cps$fat[1] + x[2]*cps$fat[2] + x[3]*cps$fat[3] - cstr$fat[2],\n\n    # carbs\n    - x[1]*cps$carbs[1] - x[2]*cps$carbs[2] - x[3]*cps$carbs[3]+ cstr$carbs[1],\n    x[1]*cps$carbs[1] + x[2]*cps$carbs[2] + x[3]*cps$carbs[3] - cstr$carbs[2],\n    \n    # ghge\n    - x[1]*cps$ghge[1] - x[2]*cps$ghge[2] - x[3]*cps$ghge[3]+ cstr$ghge[1],\n    x[1]*cps$ghge[1] + x[2]*cps$ghge[2] + x[3]*cps$ghge[3] - cstr$ghge[2]\n  )\n  return (constr)\n}\n\n# lower and upper bounds of x (3 foods)\nlb <- c(160, 140, 100)\nub <- c(180, 160, 120)\n\n# Initial values\n# (try different ones!)\nx0 <- c(175, 150, 110)\n\nopts <- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 10 )) # match number of const\n\n# run the algorithm\nres <- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n)\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  10 \nNumber of equality constraints:    0 \nCurrent value of objective function:  528.456412469899 \nCurrent value of controls: 177.753 140 100\n\n\nNow we check the results for the second problem.\n\nres_diet <- res$solution\n\n# print with the current diet, and change percentage\n# also print the boundary, in case it hit boundary\n\ndiet_result <- data.frame(\n  name = c('Bread', 'Vegetables', 'Red meat'),\n  current = current_diet, \n  new = res_diet, \n  percent_change = round((res_diet - current_diet)/current_diet, 3),\n  lower_limit = lb, \n  upper_limit = ub\n)\ndiet_result\n\n        name current     new percent_change lower_limit upper_limit\n1      Bread   175.4 177.753          0.013         160         180\n2 Vegetables   154.6 140.000         -0.094         140         160\n3   Red meat   117.6 100.000         -0.150         100         120\n\n\n\n# verify whether it falls within \noutput_newdiet <- t(as.matrix(res_diet)) %*% as.matrix(contrib_pergram_std)\n# output_newdiet\n\n# cstr\nconst_result <- t(rbind(output_newdiet, cstr))\ncolnames(const_result) <- c('new_diet','const_lwr', 'const_upr')\nconst_result <- data.table(const_result)\n# conditions\nconst_result[, is_ok := 'Yes']\nconst_result[new_diet < const_lwr, is_ok := 'beyond lower']\nconst_result[new_diet > const_upr, is_ok := 'beyond upper']\n\n# relative difference (since we rescaled the targets)\nconst_result[, relative_dev := 0]\nconst_result[is_ok == 'beyond lower', relative_dev := round((new_diet - const_lwr)/const_lwr, 3)]\nconst_result[is_ok == 'beyond upper', relative_dev := round((new_diet - const_upr)/const_upr, 3)]\n\n# print out\nconst_result\n\n   new_diet const_lwr const_upr        is_ok relative_dev\n1: 623.2326  588.3423  653.7137          Yes        0.000\n2: 450.2148  439.9282  488.8091          Yes        0.000\n3: 290.1302  293.0966  325.6629 beyond lower       -0.010\n4: 366.4749  329.5946  366.2162 beyond upper        0.001\n5: 233.5025  205.2454  228.0505 beyond upper        0.024"
  },
  {
    "objectID": "documentation/troubleshoot_3foods.html#example-1-reduce-ghge-to-90",
    "href": "documentation/troubleshoot_3foods.html#example-1-reduce-ghge-to-90",
    "title": "Part 4: Troubleshoot part 3",
    "section": "Example 1: reduce ghge to 90%",
    "text": "Example 1: reduce ghge to 90%\nFirst we reduce the GHGE to 90%. (This is feasible, in contrast to the 80% reduction)\n\ncstr <- copy(const_lwrupr_std) # this line is important: it keeps a copy of the original values\ncstr$ghge <- cstr$ghge * 0.9 # reduce to 0.9\ncstr\n\n    energy  protein      fat    carbs     ghge\n1 588.3423 439.9282 293.0966 329.5946 217.3187\n2 653.7137 488.8091 325.6629 366.2162 241.4652\n\n# use the standardized food contribution per gram \n# contrib_pergram_std\n\n# define the inequality constraints\ninequalconstr <- function (x) {\n  \n  cps <- contrib_pergram_std # call the values\n  # cstr is used as the last item in each equation\n  \n  constr <- c(\n    # energy\n    - x[1]*cps$energy[1] - x[2]*cps$energy[2] - x[3]*cps$energy[3] + cstr$energy[1], # lower\n    x[1]*cps$energy[1] + x[2]*cps$energy[2] + x[3]*cps$energy[3] - cstr$energy[2], # upper\n    \n    # protein\n    - x[1]*cps$protein[1] - x[2]*cps$protein[2] - x[3]*cps$protein[3] + cstr$protein[1],\n    x[1]*cps$protein[1] + x[2]*cps$protein[2] + x[3]*cps$protein[3] - cstr$protein[2],\n    \n    # fat\n    - x[1]*cps$fat[1] - x[2]*cps$fat[2] - x[3]*cps$fat[3]+ cstr$fat[1],\n    x[1]*cps$fat[1] + x[2]*cps$fat[2] + x[3]*cps$fat[3] - cstr$fat[2],\n\n    # carbs\n    - x[1]*cps$carbs[1] - x[2]*cps$carbs[2] - x[3]*cps$carbs[3]+ cstr$carbs[1],\n    x[1]*cps$carbs[1] + x[2]*cps$carbs[2] + x[3]*cps$carbs[3] - cstr$carbs[2],\n    \n    # ghge\n    - x[1]*cps$ghge[1] - x[2]*cps$ghge[2] - x[3]*cps$ghge[3]+ cstr$ghge[1],\n    x[1]*cps$ghge[1] + x[2]*cps$ghge[2] + x[3]*cps$ghge[3] - cstr$ghge[2]\n  )\n  return (constr)\n}\n\nSet other parameters (this part is unchanged, apart from the number of constraints)\n\n# lower and upper bounds of x (3 foods)\nlb <- c(160, 140, 100)\nub <- c(180, 160, 120)\n\n# Initial values\n# (try different ones!)\nx0 <- c(175, 150, 110)\n\nopts <- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 10 )) # match number of const\n\n# run the algorithm\nres <- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n)\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  10 \nNumber of equality constraints:    0 \nCurrent value of objective function:  202.054850995647 \nCurrent value of controls: 174.3154 153.5081 103.469\n\n\nNow we print out the results in a more readable way\n\nres_diet <- res$solution\n\n# print with the current diet, and change percentage\n# also print the boundary, in case it hit boundary\n\ndiet_result <- data.frame(\n  name = c('Bread', 'Vegetables', 'Red meat'),\n  current = current_diet, \n  new = res_diet, \n  percent_change = round((res_diet - current_diet)/current_diet, 3),\n  lower_limit = lb, \n  upper_limit = ub\n)\ndiet_result\n\n        name current      new percent_change lower_limit upper_limit\n1      Bread   175.4 174.3154         -0.006         160         180\n2 Vegetables   154.6 153.5081         -0.007         140         160\n3   Red meat   117.6 103.4690         -0.120         100         120\n\n\n\n# verify whether it falls within \noutput_newdiet <- t(as.matrix(res_diet)) %*% as.matrix(contrib_pergram_std)\n# output_newdiet\n\n# cstr\nconst_result <- t(rbind(output_newdiet, cstr))\ncolnames(const_result) <- c('new_diet','const_lwr', 'const_upr')\nconst_result <- data.table(const_result)\n# conditions\nconst_result[, is_ok := 'Yes']\nconst_result[new_diet < const_lwr, is_ok := 'beyond lower']\nconst_result[new_diet > const_upr, is_ok := 'beyond upper']\n\n# relative difference (since we rescaled the targets)\nconst_result[, relative_dev := 0]\nconst_result[is_ok == 'beyond lower', relative_dev := round((new_diet - const_lwr)/const_lwr, 3)]\nconst_result[is_ok == 'beyond upper', relative_dev := round((new_diet - const_upr)/const_upr, 3)]\n\n# print out\nconst_result\n\n   new_diet const_lwr const_upr is_ok relative_dev\n1: 626.0403  588.3423  653.7137   Yes            0\n2: 456.4151  439.9282  488.8091   Yes            0\n3: 297.0743  293.0966  325.6629   Yes            0\n4: 363.1306  329.5946  366.2162   Yes            0\n5: 241.4652  217.3187  241.4652   Yes            0\n\n\nYou should always check how much it actually deviates from the target constraints."
  },
  {
    "objectID": "documentation/part5_10foods.html",
    "href": "documentation/part5_10foods.html",
    "title": "Part 5: 10 foods",
    "section": "",
    "text": "Select 10 foods: bread, cheese, eggs, fish, fruit and berries, milk and yoghurt, potatoes, red meat, sugar and sweets, vegetables."
  },
  {
    "objectID": "documentation/part5_10foods.html#constraints-for-3-foods",
    "href": "documentation/part5_10foods.html#constraints-for-3-foods",
    "title": "Part 5: 10 foods",
    "section": "Constraints for 3 foods",
    "text": "Constraints for 3 foods\nWe compute the constraints for 3 foods together. Note that the consumption for each of the 28 food groups are different, hence we can not use 3/28 times the total energy, protein…; we need to use a weighted average.\nFor example, the total energy for the 10 foods together should be within [5305, 5895]."
  },
  {
    "objectID": "documentation/part5_10foods.html#standardize-food-contribution-per-gram",
    "href": "documentation/part5_10foods.html#standardize-food-contribution-per-gram",
    "title": "Part 5: 10 foods",
    "section": "Standardize food contribution per gram",
    "text": "Standardize food contribution per gram\nSince the range of constraints for 5 categories differ hugely, it could affect the numeric evaluation. We want them to be on comparative scales.\nThe current solution is to standardize the contribution in each category (e.g. energy) by its original value divided by the standard deviation.\nSimilarly, the upper and lower limit of the constraints also need to be re-scaled. After rescaling, the target will be on a range of hundreds, rather than 3000 vs 1.8.\n\ncontrib_pergram <- contrib_pergram[, c('energy', 'protein', 'fat', 'carbs', 'ghge')]\n\nsd_coef <- apply(contrib_pergram, MARGIN = 2, sd)\n\ncontrib_pergram_std <- sweep(contrib_pergram, MARGIN = 2, 1/sd_coef, FUN = '*')\ncontrib_pergram_std\n\n      energy   protein        fat      carbs      ghge\n1  1.9807223 1.1926698 0.35692934 2.14338903 0.2284823\n2  2.5003470 2.8440587 2.87923000 0.23329404 2.2848233\n3  1.1442486 1.7038140 1.26115033 0.01944117 0.4569647\n4  1.1270265 2.2280644 0.89232335 0.11664702 0.6854470\n5  0.5053657 0.1048501 0.04759058 0.65127921 0.2284823\n6  0.3666632 0.4718254 0.13087409 0.27217638 0.2284823\n7  0.7020305 0.2752315 0.08328351 0.86513208 0.0000000\n8  1.5448004 2.2673832 1.65377260 0.06804410 2.9702703\n9  3.3310800 0.6946318 2.11778074 2.95991819 0.9139293\n10 0.2898121 0.1965939 0.09518116 0.24301463 0.2284823\n\n# standardize constraint\n# test the previous constraint\nconst_lwrupr\n\n     energy  protein     fat    carbs    ghge\n1: 5305.628 69.99039 43.8336 137.7545 2.78613\n2: 5895.142 77.76710 48.7040 153.0605 3.09570\n\nconst_lwrupr_std <- sweep(const_lwrupr, MARGIN = 2, 1/sd_coef, FUN = '*')\nconst_lwrupr_std\n\n     energy   protein      fat    carbs     ghge\n1  982.5146  917.3123 521.5166 669.5269 636.5815\n2 1091.6828 1019.2359 579.4629 743.9188 707.3128\n\n\nIn the future, different scaling factor can be applied; but it should be a positive number after scaling. Could try dividing the difference between max and min of this variable."
  },
  {
    "objectID": "documentation/part5_10foods.html#example-1-reduce-ghge-to-90",
    "href": "documentation/part5_10foods.html#example-1-reduce-ghge-to-90",
    "title": "Part 5: 10 foods",
    "section": "Example 1: reduce ghge to 90%",
    "text": "Example 1: reduce ghge to 90%\nFirst we reduce the GHGE to 90%.\n\ncstr <- copy(const_lwrupr_std)\ncstr$ghge <- cstr$ghge * 0.9 # reduce to 0.9\ncstr\n\n     energy   protein      fat    carbs     ghge\n1  982.5146  917.3123 521.5166 669.5269 572.9233\n2 1091.6828 1019.2359 579.4629 743.9188 636.5815\n\n# use the standardized food contribution per gram \n# contrib_pergram_std\n\n# define the inequality constraints\ninequalconstr <- function (x) {\n  \n  cps <- contrib_pergram_std\n  \n  constr <- c(\n    # energy\n    - x[1]*cps$energy[1] - x[2]*cps$energy[2] - x[3]*cps$energy[3] - x[4]*cps$energy[4] - x[5]*cps$energy[5] - x[6]*cps$energy[6] -  x[7]*cps$energy[7] - x[8]*cps$energy[8] - x[9]*cps$energy[9]- x[10]*cps$energy[10] + cstr$energy[1], # lower\n    x[1]*cps$energy[1] + x[2]*cps$energy[2] + x[3]*cps$energy[3] + x[4]*cps$energy[4] + x[5]*cps$energy[5] + x[6]*cps$energy[6] + x[7]*cps$energy[7] + x[8]*cps$energy[8] + x[9]*cps$energy[9] + x[10]*cps$energy[10] - cstr$energy[2], # upper\n    \n    # protein\n\n    - x[1]*cps$protein[1] - x[2]*cps$protein[2] - x[3]*cps$protein[3] - x[4]*cps$protein[4] - x[5]*cps$protein[5] - x[6]*cps$protein[6] -  x[7]*cps$protein[7] - x[8]*cps$protein[8] - x[9]*cps$protein[9]- x[10]*cps$protein[10] + cstr$protein[1], # lower\n    x[1]*cps$protein[1] + x[2]*cps$protein[2] + x[3]*cps$protein[3] + x[4]*cps$protein[4] + x[5]*cps$protein[5] + x[6]*cps$protein[6] + x[7]*cps$protein[7] + x[8]*cps$protein[8] + x[9]*cps$protein[9] + x[10]*cps$protein[10] - cstr$protein[2], # upper\n    \n    # fat\n\n    - x[1]*cps$fat[1] - x[2]*cps$fat[2] - x[3]*cps$fat[3] - x[4]*cps$fat[4] - x[5]*cps$fat[5] - x[6]*cps$fat[6] -  x[7]*cps$fat[7] - x[8]*cps$fat[8] - x[9]*cps$fat[9]- x[10]*cps$fat[10] + cstr$fat[1], # lower\n    x[1]*cps$fat[1] + x[2]*cps$fat[2] + x[3]*cps$fat[3] + x[4]*cps$fat[4] + x[5]*cps$fat[5] + x[6]*cps$fat[6] + x[7]*cps$fat[7] + x[8]*cps$fat[8] + x[9]*cps$fat[9] + x[10]*cps$fat[10] - cstr$fat[2], # upper\n    \n    # carbs\n\n    - x[1]*cps$carbs[1] - x[2]*cps$carbs[2] - x[3]*cps$carbs[3] - x[4]*cps$carbs[4] - x[5]*cps$carbs[5] - x[6]*cps$carbs[6] -  x[7]*cps$carbs[7] - x[8]*cps$carbs[8] - x[9]*cps$carbs[9]- x[10]*cps$carbs[10] + cstr$carbs[1], # lower\n    x[1]*cps$carbs[1] + x[2]*cps$carbs[2] + x[3]*cps$carbs[3] + x[4]*cps$carbs[4] + x[5]*cps$carbs[5] + x[6]*cps$carbs[6] + x[7]*cps$carbs[7] + x[8]*cps$carbs[8] + x[9]*cps$carbs[9] + x[10]*cps$carbs[10] - cstr$carbs[2], # upper\n    \n    # ghge\n    - x[1]*cps$ghge[1] - x[2]*cps$ghge[2] - x[3]*cps$ghge[3] - x[4]*cps$ghge[4] - x[5]*cps$ghge[5] - x[6]*cps$ghge[6] -  x[7]*cps$ghge[7] - x[8]*cps$ghge[8] - x[9]*cps$ghge[9]- x[10]*cps$ghge[10] + cstr$ghge[1], # lower\n    x[1]*cps$ghge[1] + x[2]*cps$ghge[2] + x[3]*cps$ghge[3] + x[4]*cps$ghge[4] + x[5]*cps$ghge[5] + x[6]*cps$ghge[6] + x[7]*cps$ghge[7] + x[8]*cps$ghge[8] + x[9]*cps$ghge[9] + x[10]*cps$ghge[10] - cstr$ghge[2] # upper\n    \n  )\n  return (constr)\n}\n\nSet other parameters\n\n# Initial values\nx0 <- fd$intake\n\n# lower and upper bounds of x (10 foods)\nlb <- fd$intake_lwr\nub <- fd$intake_upr\n\n\nopts <- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 10 ))\n\n# run the algorithm\nres <- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n)\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  10 \nNumber of equality constraints:    0 \nCurrent value of objective function:  333.527069973096 \nCurrent value of controls: 174.6211 34.81322 24.09402 66.9398 170.1828 304.9339 67.93726 101.9664 15.08429 \n153.3516\n\n\nNow we print out the results in a more readable way\n\nres_diet <- res$solution\n\n# print with the current diet, and change percentage\n# also print the boundary, in case it hit boundary\n\ndiet_result <- data.frame(\n  name = fd$food, # food names\n  current = current_diet, \n  new = res_diet, \n  percent_change = round((res_diet - current_diet)/current_diet, 3),\n  lower_limit = lb, \n  upper_limit = ub\n)\ndiet_result\n\n             name current       new percent_change lower_limit upper_limit\n1           Bread   175.4 174.62112         -0.004   18.831866   407.77324\n2          Cheese    43.4  34.81322         -0.198    4.659652   122.39639\n3            Eggs    24.6  24.09402         -0.021    2.641185   101.99699\n4            Fish    69.5  66.93980         -0.037    7.461885   267.87632\n5  Fruit, berries   171.5 170.18277         -0.008   18.413142   480.13743\n6   Milk, yoghurt   306.1 304.93394         -0.004   32.864505   966.28731\n7        Potatoes    67.8  67.93726          0.002    7.279364   218.48830\n8        Red meat   117.6 101.96644         -0.133   12.250376   328.75242\n9   Sugar, sweets    16.9  15.08429         -0.107    1.814473    69.78742\n10     Vegetables   154.6 153.35162         -0.008   16.598669   365.04187\n\n\n\n# verify whether it falls within \noutput_newdiet <- t(as.matrix(res_diet)) %*% as.matrix(contrib_pergram_std)\n# output_newdiet\n\n# cstr\nconst_result <- t(rbind(output_newdiet, cstr))\ncolnames(const_result) <- c('new_diet','const_lwr', 'const_upr')\nconst_result <- data.table(const_result)\n# conditions\nconst_result[, is_ok := 'Yes']\nconst_result[new_diet < const_lwr, is_ok := 'beyond lower']\nconst_result[new_diet > const_upr, is_ok := 'beyond upper']\n\n# relative difference (since we rescaled the targets)\nconst_result[, relative_dev := 0]\nconst_result[is_ok == 'beyond lower', relative_dev := round((new_diet - const_lwr)/const_lwr, 3)]\nconst_result[is_ok == 'beyond upper', relative_dev := round((new_diet - const_upr)/const_upr, 3)]\n\n# print out\nconst_result\n\n    new_diet const_lwr const_upr is_ok relative_dev\n1: 1033.6481  982.5146 1091.6828   Yes            0\n2:  949.7148  917.3123 1019.2359   Yes            0\n3:  521.5166  521.5166  579.4629   Yes            0\n4:  732.1396  669.5269  743.9188   Yes            0\n5:  636.5815  572.9233  636.5815   Yes            0\n\n\nYou should always check how much it actually deviates from the target constraints."
  },
  {
    "objectID": "documentation/part5_10foods.html#example-2-reduce-ghge-to-85",
    "href": "documentation/part5_10foods.html#example-2-reduce-ghge-to-85",
    "title": "Part 5: 10 foods",
    "section": "Example 2: reduce ghge to 85%",
    "text": "Example 2: reduce ghge to 85%\n\ncstr <- copy(const_lwrupr_std) # this line is important: it keeps a copy of the original values\ncstr$ghge <- cstr$ghge * 0.85 # reduce to 0.85\ncstr\n\n     energy   protein      fat    carbs     ghge\n1  982.5146  917.3123 521.5166 669.5269 541.0943\n2 1091.6828 1019.2359 579.4629 743.9188 601.2158\n\n# use the standardized food contribution per gram \n# contrib_pergram_std\n\n# define the inequality constraints\ninequalconstr <- function (x) {\n  \n  cps <- contrib_pergram_std\n  \n  constr <- c(\n    # energy\n    - x[1]*cps$energy[1] - x[2]*cps$energy[2] - x[3]*cps$energy[3] - x[4]*cps$energy[4] - x[5]*cps$energy[5] - x[6]*cps$energy[6] -  x[7]*cps$energy[7] - x[8]*cps$energy[8] - x[9]*cps$energy[9]- x[10]*cps$energy[10] + cstr$energy[1], # lower\n    x[1]*cps$energy[1] + x[2]*cps$energy[2] + x[3]*cps$energy[3] + x[4]*cps$energy[4] + x[5]*cps$energy[5] + x[6]*cps$energy[6] + x[7]*cps$energy[7] + x[8]*cps$energy[8] + x[9]*cps$energy[9] + x[10]*cps$energy[10] - cstr$energy[2], # upper\n    \n    # protein\n\n    - x[1]*cps$protein[1] - x[2]*cps$protein[2] - x[3]*cps$protein[3] - x[4]*cps$protein[4] - x[5]*cps$protein[5] - x[6]*cps$protein[6] -  x[7]*cps$protein[7] - x[8]*cps$protein[8] - x[9]*cps$protein[9]- x[10]*cps$protein[10] + cstr$protein[1], # lower\n    x[1]*cps$protein[1] + x[2]*cps$protein[2] + x[3]*cps$protein[3] + x[4]*cps$protein[4] + x[5]*cps$protein[5] + x[6]*cps$protein[6] + x[7]*cps$protein[7] + x[8]*cps$protein[8] + x[9]*cps$protein[9] + x[10]*cps$protein[10] - cstr$protein[2], # upper\n    \n    # fat\n\n    - x[1]*cps$fat[1] - x[2]*cps$fat[2] - x[3]*cps$fat[3] - x[4]*cps$fat[4] - x[5]*cps$fat[5] - x[6]*cps$fat[6] -  x[7]*cps$fat[7] - x[8]*cps$fat[8] - x[9]*cps$fat[9]- x[10]*cps$fat[10] + cstr$fat[1], # lower\n    x[1]*cps$fat[1] + x[2]*cps$fat[2] + x[3]*cps$fat[3] + x[4]*cps$fat[4] + x[5]*cps$fat[5] + x[6]*cps$fat[6] + x[7]*cps$fat[7] + x[8]*cps$fat[8] + x[9]*cps$fat[9] + x[10]*cps$fat[10] - cstr$fat[2], # upper\n    \n    # carbs\n\n    - x[1]*cps$carbs[1] - x[2]*cps$carbs[2] - x[3]*cps$carbs[3] - x[4]*cps$carbs[4] - x[5]*cps$carbs[5] - x[6]*cps$carbs[6] -  x[7]*cps$carbs[7] - x[8]*cps$carbs[8] - x[9]*cps$carbs[9]- x[10]*cps$carbs[10] + cstr$carbs[1], # lower\n    x[1]*cps$carbs[1] + x[2]*cps$carbs[2] + x[3]*cps$carbs[3] + x[4]*cps$carbs[4] + x[5]*cps$carbs[5] + x[6]*cps$carbs[6] + x[7]*cps$carbs[7] + x[8]*cps$carbs[8] + x[9]*cps$carbs[9] + x[10]*cps$carbs[10] - cstr$carbs[2], # upper\n    \n    # ghge\n    - x[1]*cps$ghge[1] - x[2]*cps$ghge[2] - x[3]*cps$ghge[3] - x[4]*cps$ghge[4] - x[5]*cps$ghge[5] - x[6]*cps$ghge[6] -  x[7]*cps$ghge[7] - x[8]*cps$ghge[8] - x[9]*cps$ghge[9]- x[10]*cps$ghge[10] + cstr$ghge[1], # lower\n    x[1]*cps$ghge[1] + x[2]*cps$ghge[2] + x[3]*cps$ghge[3] + x[4]*cps$ghge[4] + x[5]*cps$ghge[5] + x[6]*cps$ghge[6] + x[7]*cps$ghge[7] + x[8]*cps$ghge[8] + x[9]*cps$ghge[9] + x[10]*cps$ghge[10] - cstr$ghge[2] # upper\n    \n  )\n  return (constr)\n}\n\n# Initial values\nx0 <- fd$intake\n\n# lower and upper bounds of x (10 foods)\nlb <- fd$intake_lwr\nub <- fd$intake_upr\n\n\nopts <- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 10 ))\n\n# run the algorithm\nres <- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n)\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  10 \nNumber of equality constraints:    0 \nCurrent value of objective function:  1130.48051105124 \nCurrent value of controls: 173.0128 36.88276 30.21279 67.69178 167.5688 303.4997 67.78648 86.02761 \n21.26319 151.5235\n\n\nNow we check the results for the second problem.\n\n\n             name current       new percent_change lower_limit upper_limit\n1           Bread   175.4 173.01277         -0.014   18.831866   407.77324\n2          Cheese    43.4  36.88276         -0.150    4.659652   122.39639\n3            Eggs    24.6  30.21279          0.228    2.641185   101.99699\n4            Fish    69.5  67.69178         -0.026    7.461885   267.87632\n5  Fruit, berries   171.5 167.56876         -0.023   18.413142   480.13743\n6   Milk, yoghurt   306.1 303.49975         -0.008   32.864505   966.28731\n7        Potatoes    67.8  67.78648          0.000    7.279364   218.48830\n8        Red meat   117.6  86.02761         -0.268   12.250376   328.75242\n9   Sugar, sweets    16.9  21.26319          0.258    1.814473    69.78742\n10     Vegetables   154.6 151.52353         -0.020   16.598669   365.04187\n\n\n\n\n    new_diet const_lwr const_upr is_ok relative_dev\n1: 1036.9634  982.5146 1091.6828   Yes            0\n2:  932.5842  917.3123 1019.2359   Yes            0\n3:  521.5166  521.5166  579.4629   Yes            0\n4:  743.9188  669.5269  743.9188   Yes            0\n5:  601.2158  541.0943  601.2158   Yes            0"
  },
  {
    "objectID": "shiny/oldfaithful.html",
    "href": "shiny/oldfaithful.html",
    "title": "Old Faithful",
    "section": "",
    "text": "Number of bins:"
  },
  {
    "objectID": "documentation/x_literview.html",
    "href": "documentation/x_literview.html",
    "title": "Literature review and article planning",
    "section": "",
    "text": "In order to write an article, it is important to have a good collection of organized literature review."
  },
  {
    "objectID": "documentation/x_literview.html#nutrition-x-sustainability",
    "href": "documentation/x_literview.html#nutrition-x-sustainability",
    "title": "Literature review and article planning",
    "section": "Nutrition x sustainability",
    "text": "Nutrition x sustainability"
  },
  {
    "objectID": "documentation/x_literview.html#implementation",
    "href": "documentation/x_literview.html#implementation",
    "title": "Literature review and article planning",
    "section": "Implementation",
    "text": "Implementation"
  },
  {
    "objectID": "notes_internal/scaling_up.html",
    "href": "notes_internal/scaling_up.html",
    "title": "Experiment plan",
    "section": "",
    "text": "1-28 (some are not really important)\nNo need to test ALL combinations\nAt this point, no need to do an extensive search. More important to know the runtime.\nStart from 5, 10, 12, 14, …, 20\nAlso there will be groups that are absolutely necessary to keep\n\n\n\n95%\n90%\n85%\n80%\n75%\n\n\n\n(Remove)\npotatoes\nSugars\n\nOther grains\nbutter\njuice\nwhite meat\ncakes\n\nlegume\nnuts\ncreams\n\n\ndrop sugar\nadd Sat fat\nvitamin c\ncalcium"
  },
  {
    "objectID": "notes_internal/scaling_up.html#food-groups",
    "href": "notes_internal/scaling_up.html#food-groups",
    "title": "Experiment plan",
    "section": "",
    "text": "1-28 (some are not really important)\nNo need to test ALL combinations\nAt this point, no need to do an extensive search. More important to know the runtime.\nStart from 5, 10, 12, 14, …, 20\nAlso there will be groups that are absolutely necessary to keep"
  },
  {
    "objectID": "notes_internal/scaling_up.html#ghge-reduction",
    "href": "notes_internal/scaling_up.html#ghge-reduction",
    "title": "Experiment plan",
    "section": "",
    "text": "95%\n90%\n85%\n80%\n75%"
  },
  {
    "objectID": "notes_internal/scaling_up.html#foods",
    "href": "notes_internal/scaling_up.html#foods",
    "title": "Experiment plan",
    "section": "",
    "text": "(Remove)\npotatoes\nSugars\n\nOther grains\nbutter\njuice\nwhite meat\ncakes\n\nlegume\nnuts\ncreams\n\n\ndrop sugar\nadd Sat fat\nvitamin c\ncalcium"
  },
  {
    "objectID": "notes_internal/scaling_up.html#add-constraint-vitamin-c",
    "href": "notes_internal/scaling_up.html#add-constraint-vitamin-c",
    "title": "Experiment plan",
    "section": "Add constraint: vitamin C",
    "text": "Add constraint: vitamin C\n25, 6, 0.95, ok, 10s\n25, 6, 0.75, ok, 10s"
  },
  {
    "objectID": "notes_internal/scaling_up.html#add-constraint-calcium",
    "href": "notes_internal/scaling_up.html#add-constraint-calcium",
    "title": "Experiment plan",
    "section": "Add constraint: calcium",
    "text": "Add constraint: calcium\n25, 7, 0.95, 11s, ghge can not be satisfied, 11s\npossibly due to calcium constraint within animal product?"
  },
  {
    "objectID": "notes_internal/pkg_design.html",
    "href": "notes_internal/pkg_design.html",
    "title": "Workflow",
    "section": "",
    "text": "Purpose: use the intake and nutrient/ghge to compute\n\nintake (unit)\nnutrient (per unit)\nghge (per unit)\n\nRequirement \n\nif want flexibility to add food later on, should be expecting both one food, and multiple foods\nalso flexibility on categories (carbs, protein, ghge, …)\n\n\n\n\nPurpose: find a solution\nThis part consists 4 parts\n\nset objective (qp on food intake)\nset constraints (upper and lower limit on food * contrib per intake)\nlower and upper bound for food intake\nrun nloptr::nloptr()\n\nRequirement\n\nthe first 3 steps need to be flexible\n\n\n\n\nPurpose: quickly identify if the result is desirable\nRequirement\n\nRuntime"
  },
  {
    "objectID": "notes_internal/pkg_design.html#specify-food-information",
    "href": "notes_internal/pkg_design.html#specify-food-information",
    "title": "Workflow",
    "section": "",
    "text": "Purpose: use the intake and nutrient/ghge to compute\n\nintake (unit)\nnutrient (per unit)\nghge (per unit)\n\nRequirement \n\nif want flexibility to add food later on, should be expecting both one food, and multiple foods\nalso flexibility on categories (carbs, protein, ghge, …)"
  },
  {
    "objectID": "notes_internal/pkg_design.html#run-optimization-with-target-constraints",
    "href": "notes_internal/pkg_design.html#run-optimization-with-target-constraints",
    "title": "Workflow",
    "section": "",
    "text": "Purpose: find a solution\nThis part consists 4 parts\n\nset objective (qp on food intake)\nset constraints (upper and lower limit on food * contrib per intake)\nlower and upper bound for food intake\nrun nloptr::nloptr()\n\nRequirement\n\nthe first 3 steps need to be flexible"
  },
  {
    "objectID": "notes_internal/pkg_design.html#result-collection",
    "href": "notes_internal/pkg_design.html#result-collection",
    "title": "Workflow",
    "section": "",
    "text": "Purpose: quickly identify if the result is desirable\nRequirement\n\nRuntime"
  },
  {
    "objectID": "documentation/x_litreview.html",
    "href": "documentation/x_litreview.html",
    "title": "Literature review and article planning",
    "section": "",
    "text": "In order to write an article, it is important to have a good collection of organized literature review."
  },
  {
    "objectID": "documentation/x_litreview.html#nutrition-x-sustainability",
    "href": "documentation/x_litreview.html#nutrition-x-sustainability",
    "title": "Literature review and article planning",
    "section": "Nutrition x sustainability",
    "text": "Nutrition x sustainability"
  },
  {
    "objectID": "documentation/x_litreview.html#implementation",
    "href": "documentation/x_litreview.html#implementation",
    "title": "Literature review and article planning",
    "section": "Implementation",
    "text": "Implementation"
  },
  {
    "objectID": "documentation/x_pkgdev_log.html",
    "href": "documentation/x_pkgdev_log.html",
    "title": "Package development log",
    "section": "",
    "text": "Flowchart for the implementation."
  },
  {
    "objectID": "documentation/x_pkgdev_log.html#overview",
    "href": "documentation/x_pkgdev_log.html#overview",
    "title": "Package development log",
    "section": "Overview",
    "text": "Overview\nThe core functionalities contain the following steps:\n\nprovide food data\ncompute inequality constraints (based on current total contribution from the existing diet)\nalgorithm to find the new diet\nresult processing and presentation\n\nThe existing implementation is fixed: not functionalized. The target implementation should allow flexibility at each step.\n\nProvide food data\n\n\nCompute inequality constraints\nThe default inequality constraints are based on the current total contribution:\n\ncurrent diet (d)\ncontrib per unit for each target outcome (e.g. ghge, energy)\noption to scale / standardize\n\nInequality constraints depend on the above, plus the coefficients to set upper and lower. Probably a good idea to split upper and lower.\n\n\nOptimization algorithm\nThis step requires better functional programming: need to wrap the functions to generate multiple inequality formulae.\n\n\nOutput processing"
  },
  {
    "objectID": "documentation/6_flexible_input.html",
    "href": "documentation/6_flexible_input.html",
    "title": "Flexible input with function factory",
    "section": "",
    "text": "When we want to make systematic production of constraints for the optimization, it is important to use functions. Given the special requirement as input when the constraint function enters the algorithm, where the argument is x and output is a scalar value, we need to treat this function as an object produced by our function factory - so that we can tweak the elements outside the function itself.\nThe basic structure looks like this.\nf_make_constraints &lt;- function(input_data, tag_outcomes){\n  \n  \n  # this is the function we want to return\n  f_ineq &lt;- function (x) {\n    \n    # a few computed constraints, where x is the new diet\n    # it should be the complete set of constrants, \n    # as we select in the last step from \n    tag1_const_lwr &lt;- - sum(x * input_data$per_unit_tag1) + input_data$lwrc_tag1\n    tag1_const_upr &lt;- sum(x * input_data$per_unit_tag1) - input_data$uprc_tag1\n    \n    tag2_const_lwr &lt;- - sum(x * input_data$per_unit_tag2) + input_data$lwrc_tag2\n    tag2_const_upr &lt;- sum(x * input_data$per_unit_tag2) - input_data$uprc_tag2\n\n    # collect in a named vector\n    constr_all &lt;- c(\n      tag1_lwr = tag1_const_lwr, \n      tag1_upr = tag1_const_upr, \n      tag2_lwr = tag2_const_lwr, \n      tag2_upr = tag2_const_upr\n    )\n    \n    # key step:\n    # select the ones that we want, for example, tag1\n    # need to watch out for the names \n    tags_lwr &lt;- paste0(tag_outcomes, '_lwr')\n    tags_upr &lt;- paste0(tag_outcomes, '_upr')\n    \n    constr &lt;- constr_all[c(tags_lwr, tags_upr)]\n    \n    return (constr)\n  }\n  \n  # possibly better to also return the input\n  return(f_ineq)\n}\nWhen calling function, can do this\n# in this setting, the input data must have the columns required by the ff\nf_inequalc_tag1 &lt;- f_make_constraints(tag_outcomes = 'tag1', input_data)\nf_inequalc_tag1_tag2 &lt;- f_make_constraints(tag_outcomes = c('tag1', 'tag2'), input_data)\nTO DO:"
  },
  {
    "objectID": "documentation/6_flexible_input.html#an-example-of-a-function-factory",
    "href": "documentation/6_flexible_input.html#an-example-of-a-function-factory",
    "title": "Flexible input with function factory",
    "section": "An example of a function factory",
    "text": "An example of a function factory\n\nf_out &lt;- function(x, constant){\n  f &lt;- function(y){\n    res &lt;- y ^ x + constant\n    return(res)\n  }\n  return(f)\n}\n\n\n# it creates a function that at its core, the inner function\n# create a function that raise to the power of 2\n# 3^2 + 1\nf_out1 &lt;- f_out(x = 2, constant = 1) \nf_out1(y=3)\n\n[1] 10\n\n# create a function that raise to the power of 1\n# 3^1 + 1\nf_out2 &lt;- f_out(x=1, constant = 1) \nf_out2(y=3)\n\n[1] 4"
  },
  {
    "objectID": "documentation/6_standard_input.html",
    "href": "documentation/6_standard_input.html",
    "title": "Note on the input data",
    "section": "",
    "text": "This is the current implementation of input needed for the optimization algorithm."
  },
  {
    "objectID": "documentation/7_func_factory.html",
    "href": "documentation/7_func_factory.html",
    "title": "Flexible input with function factory",
    "section": "",
    "text": "When we want to make systematic production of constraints for the optimization, it is important to use functions. Given the special requirement as input when the constraint function enters the algorithm, where the argument is x and output is a scalar value, we need to treat this function as an object produced by our function factory - so that we can tweak the elements outside the function itself.\nThe basic structure looks like this.\nf_make_constraint_function &lt;- function(constraint_values, tag_outcomes){\n  \n  # constraint_values &lt;- constval$val_std\n  # tag_outcomes &lt;- c('energy', 'ghge')\n  \n  # this is the function we want to return\n  f_constr &lt;- function (x) {\n    \n    energy &lt;- constraint_values$energy\n    protein &lt;- constraint_values$protein\n\n    # a few computed constraints, where x is the new diet\n    # it should be the complete set of constrants, \n    # as we select in the last step from \n    energy_output_lwr &lt;- - sum(x * energy$unit_contrib) + energy$lwr\n    energy_output_upr &lt;- sum(x * energy$unit_contrib) - energy$upr\n    \n    protein_output_lwr &lt;- - sum(x * protein$unit_contrib) + protein$lwr\n    protein_output_upr &lt;- sum(x * protein$unit_contrib) - protein$upr\n    \n    \n    # collect in a named vector\n    constr_all &lt;- c(\n      energy_lwr = energy_output_lwr, \n      energy_upr = energy_output_upr, \n      \n      protein_lwr = protein_output_lwr, \n      protein_upr = protein_output_upr \n      \n     )\n    \n    # key step:\n    # select the ones that we want, for example, tag1\n    # need to watch out for the names \n    tags_lwr &lt;- paste0(tag_outcomes, '_lwr')\n    tags_upr &lt;- paste0(tag_outcomes, '_upr')\n    \n    constr &lt;- constr_all[c(tags_lwr, tags_upr)]\n    \n    # res &lt;- list(constr = constr, \n    #             tags_lwr = tags_lwr, \n    #             tags_upr = tags_upr)\n    \n    return (constr)\n  }\n  \n  # possibly better to also return the input\n  \n  return(f_constr)\n}\nWhen calling function, can do this\n# in this setting, the input data must have the columns required by the ff\n  f_ineq &lt;- f_make_constraint_function(\n    constraint_values = constraint_val, # list of constraints\n    tag_outcomes = tag_outcomes)"
  },
  {
    "objectID": "documentation/7_func_factory.html#an-example-of-a-function-factory",
    "href": "documentation/7_func_factory.html#an-example-of-a-function-factory",
    "title": "Flexible input with function factory",
    "section": "An example of a function factory",
    "text": "An example of a function factory\n\nf_out &lt;- function(x, constant){\n  f &lt;- function(y){\n    res &lt;- y ^ x + constant\n    return(res)\n  }\n  return(f)\n}\n\n\n# it creates a function that at its core, the inner function\n# create a function that raise to the power of 2\n# 3^2 + 1\nf_out1 &lt;- f_out(x = 2, constant = 1) \nf_out1(y=3)\n\n[1] 10\n\n# create a function that raise to the power of 1\n# 3^1 + 1\nf_out2 &lt;- f_out(x=1, constant = 1) \nf_out2(y=3)\n\n[1] 4"
  },
  {
    "objectID": "documentation/6_standard_input.html#what-does-the-algorithm-require",
    "href": "documentation/6_standard_input.html#what-does-the-algorithm-require",
    "title": "Note on the input data",
    "section": "What does the algorithm require",
    "text": "What does the algorithm require\nThe current aim of optimization is to find a set of values (‘diet’) that is similar to the current diet, yet satisfies some constraints on nutrition and environment impact.\nFor the objective function,\n\na vector of current diet (in grams), diet0. This is used to compute the deviation (sum of squares) between the new (target) and current.\n\nFor the inequality constraints (standaradized or original),\n\na list of constraint values, ordered by tag_outcome (e.g. energy, ghge)\ninside each tag_outcome such as energy,\n\nunit_contrib for each food: a vector of size n\nlwr, upr: constraint lower and upper bound. This is after reduction.\n\n\n\n\n\n\n\n\nConstraint bounds\n\n\n\nThe values of constraint bounds need to be pre-computed before entering the algorithm - that means, setting the reduction on ghge is already done."
  },
  {
    "objectID": "documentation/6_standard_input.html#how-are-constaints-computed",
    "href": "documentation/6_standard_input.html#how-are-constaints-computed",
    "title": "Note on the input data",
    "section": "How are constaints computed",
    "text": "How are constaints computed\n\nThe total contribution of a diet is a weighted sum of all food intake (diet, in gram) and contribution to this particular nutrition / environment impact outcome (tag_outcome). For instance, in total, the current diet of 188g bread and 165g red meat contributes to X1 units of energy; X2 units of ghge.\nThe current diet is the average for each food group among all subjects who we collected data from. The lwr, upr of the current are used to limit the search region for the new diet. In the current implementation, they are 5% and 95% quantiles from all the subject.\nThe inequality constraints (e.g. energy) requires two values: constr_min, constr_max. This means that the computed total contribution of the new diet need to be between these two. In the current implementation:\n\nminimum (lower bound) is 0.9 times of the total contribution\nmaximum (upper bound) is the same of the total contribution\nif we want to reduce ghge, then multiply a factor to the two values above.\n\nIn addition to the raw values, we also implement a standardized version for each of the tag_outcome.\n\n\n\n\n\n\nRationale for standardization\n\n\n\nWe wish to have roughly the same scale for different tag_outcomes. The current implementation takes the standard deviation across all foods for a specific tag (e.g. energy), then divide by this value. This is only ONE of the many ways to standardize for numerical stability.\nAlternatively, it is also possible to multiply a fixed constant such as 1000 to ghge. The interpretation could be better. As long the original diet vector is intact (meaning that the ratio between the original food 1, food 2 are unchanged), one can artificially modify the coefficients as they wish.\nHowever, it is important to keep consistency in the values and the inequality function!\n\n\n\ndemo_input &lt;- readRDS('data/demo_9foods_input.rda')\ndemo_input$current_diet\n\n       food_name intake_mean intake_lwr intake_upr\n1          Bread   188.31866  18.831866      343.8\n2     Vegetables    72.79364   7.279364      230.7\n3       Red meat   165.98669  16.598669      419.7\n4  Milk, yoghurt   184.13142  18.413142      552.7\n5           Fish   126.26154  12.626154      299.6\n6         Cheese    74.61885   7.461885      302.9\n7           Eggs    26.41185   2.641185      111.6\n8 Fruit, berries   328.64505  32.864505      900.6\n9       Potatoes    46.59652   4.659652      121.6\n\n\n\ndemo_input$unit_contrib\n\n       food_name    energy     protein       carbs         fat    vitaminc\n1          Bread 10.695553 0.091220068 0.441277081 0.030216648 0.005701254\n2     Vegetables  3.790560 0.020648968 0.178466077 0.007374631 0.132743363\n3       Red meat  1.565330 0.014877102 0.049805951 0.008408797 0.206985770\n4  Milk, yoghurt  2.728863 0.007580175 0.134110787 0.004081633 0.198250729\n5           Fish  8.341837 0.172619048 0.013605442 0.139455782 0.042517007\n6         Cheese  6.086331 0.169784173 0.024460432 0.074820144 0.000000000\n7           Eggs  6.178862 0.130081301 0.004065041 0.105691057 0.000000000\n8 Fruit, berries  1.979745 0.035935969 0.055864097 0.011107481 0.000000000\n9       Potatoes 13.502304 0.216589862 0.048387097 0.241935484 0.000000000\n     calcium    ghge\n1 0.33637400 0.00107\n2 0.08849558 0.00037\n3 0.25873221 0.00103\n4 0.15160350 0.00072\n5 0.11054422 0.01294\n6 0.24460432 0.00311\n7 0.52845529 0.00215\n8 1.28062725 0.00143\n9 6.58986175 0.01030\n\n\n\ndemo_constraints &lt;- readRDS('data/demo_9foods_constraints.rda')\ndemo_constraints\n\n  tag_outcome total_contrib_raw total_contrib_std    std_coef constr_min_std\n1      energy       6002.791497         1460.2828   0.2432673      1314.2545\n2     protein         82.349152         1034.1940  12.5586475       930.7746\n3       carbs        153.317587         1108.5790   7.2306054       997.7211\n4         fat         49.280653          606.6639  12.3103864       545.9975\n5    vitaminc         86.965858          976.6934  11.2307682       879.0241\n6     calcium        914.751986          434.7877   0.4753067       391.3090\n7        ghge          3.404557          736.7069 216.3885105       663.0362\n  cosntr_max_std constr_min_raw constr_max_raw\n1      1460.2828    5402.512347    6002.791497\n2      1034.1940      74.114237      82.349152\n3      1108.5790     137.985828     153.317587\n4       606.6639      44.352588      49.280653\n5       976.6934      78.269272      86.965858\n6       434.7877     823.276788     914.751986\n7       736.7069       3.064101       3.404557"
  },
  {
    "objectID": "noreden/x_litreview.html",
    "href": "noreden/x_litreview.html",
    "title": "Literature review and article planning",
    "section": "",
    "text": "In order to write an article, it is important to have a good collection of organized literature review."
  },
  {
    "objectID": "noreden/x_litreview.html#nutrition-x-sustainability",
    "href": "noreden/x_litreview.html#nutrition-x-sustainability",
    "title": "Literature review and article planning",
    "section": "Nutrition x sustainability",
    "text": "Nutrition x sustainability"
  },
  {
    "objectID": "noreden/x_litreview.html#implementation",
    "href": "noreden/x_litreview.html#implementation",
    "title": "Literature review and article planning",
    "section": "Implementation",
    "text": "Implementation"
  },
  {
    "objectID": "noreden/5_10foods.html",
    "href": "noreden/5_10foods.html",
    "title": "Part 5: 10 foods",
    "section": "",
    "text": "Select 10 foods: bread, cheese, eggs, fish, fruit and berries, milk and yoghurt, potatoes, red meat, sugar and sweets, vegetables.\nlibrary(data.table)\nfd &lt;- read.csv('data/foods_0914.csv', sep = ',')\nsetDT(fd) # use data.table format\nfd\n\n              food intake energy protein   fat carbs sugar alcohol  ghge\n            &lt;char&gt;  &lt;num&gt;  &lt;num&gt;   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;   &lt;int&gt; &lt;num&gt;\n 1:          Bread  175.4 10.696   0.091 0.030 0.441 0.002       0 0.001\n 2:         Cheese   43.4 13.502   0.217 0.242 0.048 0.002       0 0.010\n 3:           Eggs   24.6  6.179   0.130 0.106 0.004 0.000       0 0.002\n 4:           Fish   69.5  6.086   0.170 0.075 0.024 0.006       0 0.003\n 5: Fruit, berries  171.5  2.729   0.008 0.004 0.134 0.029       0 0.001\n 6:  Milk, yoghurt  306.1  1.980   0.036 0.011 0.056 0.010       0 0.001\n 7:       Potatoes   67.8  3.791   0.021 0.007 0.178 0.000       0 0.000\n 8:       Red meat  117.6  8.342   0.173 0.139 0.014 0.000       0 0.013\n 9:  Sugar, sweets   16.9 17.988   0.053 0.178 0.609 0.444       0 0.004\n10:     Vegetables  154.6  1.565   0.015 0.008 0.050 0.005       0 0.001\n    intake_mean intake_lwr intake_upr\n          &lt;num&gt;      &lt;num&gt;      &lt;num&gt;\n 1:   188.31866  18.831866  407.77324\n 2:    46.59652   4.659652  122.39639\n 3:    26.41185   2.641185  101.99699\n 4:    74.61885   7.461885  267.87632\n 5:   184.13142  18.413142  480.13743\n 6:   328.64505  32.864505  966.28731\n 7:    72.79364   7.279364  218.48830\n 8:   122.50376  12.250376  328.75242\n 9:    18.14473   1.814473   69.78742\n10:   165.98669  16.598669  365.04187\n\ncontrib_pergram &lt;- fd[, .(energy, protein, fat, carbs, sugar, alcohol, ghge)]\ncontrib_pergram\n\n    energy protein   fat carbs sugar alcohol  ghge\n     &lt;num&gt;   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;   &lt;int&gt; &lt;num&gt;\n 1: 10.696   0.091 0.030 0.441 0.002       0 0.001\n 2: 13.502   0.217 0.242 0.048 0.002       0 0.010\n 3:  6.179   0.130 0.106 0.004 0.000       0 0.002\n 4:  6.086   0.170 0.075 0.024 0.006       0 0.003\n 5:  2.729   0.008 0.004 0.134 0.029       0 0.001\n 6:  1.980   0.036 0.011 0.056 0.010       0 0.001\n 7:  3.791   0.021 0.007 0.178 0.000       0 0.000\n 8:  8.342   0.173 0.139 0.014 0.000       0 0.013\n 9: 17.988   0.053 0.178 0.609 0.444       0 0.004\n10:  1.565   0.015 0.008 0.050 0.005       0 0.001\n\n# note: intake from the food.csv is slightly different from the new file\ncurrent_diet &lt;- fd$intake\ncurrent_diet\n\n [1] 175.4  43.4  24.6  69.5 171.5 306.1  67.8 117.6  16.9 154.6\n\n# 10 foods contribution (maximum)\nconst_max_10foods &lt;- t(as.matrix(current_diet)) %*% as.matrix(contrib_pergram)\nconst_max_10foods\n\n       energy protein    fat    carbs   sugar alcohol   ghge\n[1,] 5895.142 77.7671 48.704 153.0605 17.1657       0 3.0957\n\n# exclude sugar, alcohol\nconst_max_10foods &lt;- const_max_10foods[, c('energy', 'protein', 'fat', 'carbs', 'ghge')]\n\n\n# target constraint on energy and nutrients\n# set lower to be 0.9; upper remain the current max\nconst_lwrupr &lt;- rbind(const_max_10foods*0.9, const_max_10foods*1)\nrownames(const_lwrupr) &lt;- c('lwr', 'upr')\nconst_lwrupr &lt;- data.table(const_lwrupr)\nconst_lwrupr\n\n     energy  protein     fat    carbs    ghge\n      &lt;num&gt;    &lt;num&gt;   &lt;num&gt;    &lt;num&gt;   &lt;num&gt;\n1: 5305.628 69.99039 43.8336 137.7544 2.78613\n2: 5895.142 77.76710 48.7040 153.0605 3.09570"
  },
  {
    "objectID": "noreden/5_10foods.html#constraints-for-3-foods",
    "href": "noreden/5_10foods.html#constraints-for-3-foods",
    "title": "Part 5: 10 foods",
    "section": "Constraints for 3 foods",
    "text": "Constraints for 3 foods\nWe compute the constraints for 3 foods together. Note that the consumption for each of the 28 food groups are different, hence we can not use 3/28 times the total energy, protein…; we need to use a weighted average.\nFor example, the total energy for the 10 foods together should be within [5305, 5895]."
  },
  {
    "objectID": "noreden/5_10foods.html#standardize-food-contribution-per-gram",
    "href": "noreden/5_10foods.html#standardize-food-contribution-per-gram",
    "title": "Part 5: 10 foods",
    "section": "Standardize food contribution per gram",
    "text": "Standardize food contribution per gram\nSince the range of constraints for 5 categories differ hugely, it could affect the numeric evaluation. We want them to be on comparative scales.\nThe current solution is to standardize the contribution in each category (e.g. energy) by its original value divided by the standard deviation.\nSimilarly, the upper and lower limit of the constraints also need to be re-scaled. After rescaling, the target will be on a range of hundreds, rather than 3000 vs 1.8.\n\ncontrib_pergram &lt;- contrib_pergram[, c('energy', 'protein', 'fat', 'carbs', 'ghge')]\n\nsd_coef &lt;- apply(contrib_pergram, MARGIN = 2, sd)\n\ncontrib_pergram_std &lt;- sweep(contrib_pergram, MARGIN = 2, 1/sd_coef, FUN = '*')\ncontrib_pergram_std\n\n      energy   protein        fat      carbs      ghge\n1  1.9807223 1.1926698 0.35692934 2.14338903 0.2284823\n2  2.5003470 2.8440587 2.87923000 0.23329404 2.2848233\n3  1.1442486 1.7038140 1.26115033 0.01944117 0.4569647\n4  1.1270265 2.2280644 0.89232335 0.11664702 0.6854470\n5  0.5053657 0.1048501 0.04759058 0.65127921 0.2284823\n6  0.3666632 0.4718254 0.13087409 0.27217638 0.2284823\n7  0.7020305 0.2752315 0.08328351 0.86513208 0.0000000\n8  1.5448004 2.2673832 1.65377260 0.06804410 2.9702703\n9  3.3310800 0.6946318 2.11778074 2.95991819 0.9139293\n10 0.2898121 0.1965939 0.09518116 0.24301463 0.2284823\n\n# standardize constraint\n# test the previous constraint\nconst_lwrupr\n\n     energy  protein     fat    carbs    ghge\n      &lt;num&gt;    &lt;num&gt;   &lt;num&gt;    &lt;num&gt;   &lt;num&gt;\n1: 5305.628 69.99039 43.8336 137.7544 2.78613\n2: 5895.142 77.76710 48.7040 153.0605 3.09570\n\nconst_lwrupr_std &lt;- sweep(const_lwrupr, MARGIN = 2, 1/sd_coef, FUN = '*')\nconst_lwrupr_std\n\n     energy   protein      fat    carbs     ghge\n1  982.5146  917.3123 521.5166 669.5269 636.5815\n2 1091.6828 1019.2359 579.4629 743.9188 707.3128\n\n\nIn the future, different scaling factor can be applied; but it should be a positive number after scaling. Could try dividing the difference between max and min of this variable."
  },
  {
    "objectID": "noreden/5_10foods.html#example-1-reduce-ghge-to-90",
    "href": "noreden/5_10foods.html#example-1-reduce-ghge-to-90",
    "title": "Part 5: 10 foods",
    "section": "Example 1: reduce ghge to 90%",
    "text": "Example 1: reduce ghge to 90%\nFirst we reduce the GHGE to 90%.\n\ncstr &lt;- copy(const_lwrupr_std)\ncstr$ghge &lt;- cstr$ghge * 0.9 # reduce to 0.9\ncstr\n\n     energy   protein      fat    carbs     ghge\n1  982.5146  917.3123 521.5166 669.5269 572.9233\n2 1091.6828 1019.2359 579.4629 743.9188 636.5815\n\n# use the standardized food contribution per gram \n# contrib_pergram_std\n\n# define the inequality constraints\ninequalconstr &lt;- function (x) {\n  \n  cps &lt;- contrib_pergram_std\n  \n  constr &lt;- c(\n    # energy\n    - x[1]*cps$energy[1] - x[2]*cps$energy[2] - x[3]*cps$energy[3] - x[4]*cps$energy[4] - x[5]*cps$energy[5] - x[6]*cps$energy[6] -  x[7]*cps$energy[7] - x[8]*cps$energy[8] - x[9]*cps$energy[9]- x[10]*cps$energy[10] + cstr$energy[1], # lower\n    x[1]*cps$energy[1] + x[2]*cps$energy[2] + x[3]*cps$energy[3] + x[4]*cps$energy[4] + x[5]*cps$energy[5] + x[6]*cps$energy[6] + x[7]*cps$energy[7] + x[8]*cps$energy[8] + x[9]*cps$energy[9] + x[10]*cps$energy[10] - cstr$energy[2], # upper\n    \n    # protein\n\n    - x[1]*cps$protein[1] - x[2]*cps$protein[2] - x[3]*cps$protein[3] - x[4]*cps$protein[4] - x[5]*cps$protein[5] - x[6]*cps$protein[6] -  x[7]*cps$protein[7] - x[8]*cps$protein[8] - x[9]*cps$protein[9]- x[10]*cps$protein[10] + cstr$protein[1], # lower\n    x[1]*cps$protein[1] + x[2]*cps$protein[2] + x[3]*cps$protein[3] + x[4]*cps$protein[4] + x[5]*cps$protein[5] + x[6]*cps$protein[6] + x[7]*cps$protein[7] + x[8]*cps$protein[8] + x[9]*cps$protein[9] + x[10]*cps$protein[10] - cstr$protein[2], # upper\n    \n    # fat\n\n    - x[1]*cps$fat[1] - x[2]*cps$fat[2] - x[3]*cps$fat[3] - x[4]*cps$fat[4] - x[5]*cps$fat[5] - x[6]*cps$fat[6] -  x[7]*cps$fat[7] - x[8]*cps$fat[8] - x[9]*cps$fat[9]- x[10]*cps$fat[10] + cstr$fat[1], # lower\n    x[1]*cps$fat[1] + x[2]*cps$fat[2] + x[3]*cps$fat[3] + x[4]*cps$fat[4] + x[5]*cps$fat[5] + x[6]*cps$fat[6] + x[7]*cps$fat[7] + x[8]*cps$fat[8] + x[9]*cps$fat[9] + x[10]*cps$fat[10] - cstr$fat[2], # upper\n    \n    # carbs\n\n    - x[1]*cps$carbs[1] - x[2]*cps$carbs[2] - x[3]*cps$carbs[3] - x[4]*cps$carbs[4] - x[5]*cps$carbs[5] - x[6]*cps$carbs[6] -  x[7]*cps$carbs[7] - x[8]*cps$carbs[8] - x[9]*cps$carbs[9]- x[10]*cps$carbs[10] + cstr$carbs[1], # lower\n    x[1]*cps$carbs[1] + x[2]*cps$carbs[2] + x[3]*cps$carbs[3] + x[4]*cps$carbs[4] + x[5]*cps$carbs[5] + x[6]*cps$carbs[6] + x[7]*cps$carbs[7] + x[8]*cps$carbs[8] + x[9]*cps$carbs[9] + x[10]*cps$carbs[10] - cstr$carbs[2], # upper\n    \n    # ghge\n    - x[1]*cps$ghge[1] - x[2]*cps$ghge[2] - x[3]*cps$ghge[3] - x[4]*cps$ghge[4] - x[5]*cps$ghge[5] - x[6]*cps$ghge[6] -  x[7]*cps$ghge[7] - x[8]*cps$ghge[8] - x[9]*cps$ghge[9]- x[10]*cps$ghge[10] + cstr$ghge[1], # lower\n    x[1]*cps$ghge[1] + x[2]*cps$ghge[2] + x[3]*cps$ghge[3] + x[4]*cps$ghge[4] + x[5]*cps$ghge[5] + x[6]*cps$ghge[6] + x[7]*cps$ghge[7] + x[8]*cps$ghge[8] + x[9]*cps$ghge[9] + x[10]*cps$ghge[10] - cstr$ghge[2] # upper\n    \n  )\n  return (constr)\n}\n\nSet other parameters\n\n# Initial values\nx0 &lt;- fd$intake\n\n# lower and upper bounds of x (10 foods)\nlb &lt;- fd$intake_lwr\nub &lt;- fd$intake_upr\n\n\nopts &lt;- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 10 ))\n\n# run the algorithm\nres &lt;- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n)\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  10 \nNumber of equality constraints:    0 \nCurrent value of objective function:  333.437100975759 \nCurrent value of controls: 174.649 34.66858 24.15124 66.90458 170.171 304.933 67.9514 102.0416 15.19862 \n153.3403\n\n\nNow we print out the results in a more readable way\n\nres_diet &lt;- res$solution\n\n# print with the current diet, and change percentage\n# also print the boundary, in case it hit boundary\n\ndiet_result &lt;- data.frame(\n  name = fd$food, # food names\n  current = current_diet, \n  new = res_diet, \n  percent_change = round((res_diet - current_diet)/current_diet, 3),\n  lower_limit = lb, \n  upper_limit = ub\n)\ndiet_result\n\n             name current       new percent_change lower_limit upper_limit\n1           Bread   175.4 174.64898         -0.004   18.831866   407.77324\n2          Cheese    43.4  34.66858         -0.201    4.659652   122.39639\n3            Eggs    24.6  24.15124         -0.018    2.641185   101.99699\n4            Fish    69.5  66.90458         -0.037    7.461885   267.87632\n5  Fruit, berries   171.5 170.17099         -0.008   18.413142   480.13743\n6   Milk, yoghurt   306.1 304.93302         -0.004   32.864505   966.28731\n7        Potatoes    67.8  67.95140          0.002    7.279364   218.48830\n8        Red meat   117.6 102.04156         -0.132   12.250376   328.75242\n9   Sugar, sweets    16.9  15.19862         -0.101    1.814473    69.78742\n10     Vegetables   154.6 153.34030         -0.008   16.598669   365.04187\n\n\n\n# verify whether it falls within \noutput_newdiet &lt;- t(as.matrix(res_diet)) %*% as.matrix(contrib_pergram_std)\n# output_newdiet\n\n# cstr\nconst_result &lt;- t(rbind(output_newdiet, cstr))\ncolnames(const_result) &lt;- c('new_diet','const_lwr', 'const_upr')\nconst_result &lt;- data.table(const_result)\n# conditions\nconst_result[, is_ok := 'Yes']\nconst_result[new_diet &lt; const_lwr, is_ok := 'beyond lower']\nconst_result[new_diet &gt; const_upr, is_ok := 'beyond upper']\n\n# relative difference (since we rescaled the targets)\nconst_result[, relative_dev := 0]\nconst_result[is_ok == 'beyond lower', relative_dev := round((new_diet - const_lwr)/const_lwr, 3)]\nconst_result[is_ok == 'beyond upper', relative_dev := round((new_diet - const_upr)/const_upr, 3)]\n\n# print out\nconst_result\n\nIndex: &lt;is_ok&gt;\n    new_diet const_lwr const_upr  is_ok relative_dev\n       &lt;num&gt;     &lt;num&gt;     &lt;num&gt; &lt;char&gt;        &lt;num&gt;\n1: 1033.8646  982.5146 1091.6828    Yes            0\n2:  949.6054  917.3123 1019.2359    Yes            0\n3:  521.5166  521.5166  579.4629    Yes            0\n4:  732.5077  669.5269  743.9188    Yes            0\n5:  636.5815  572.9233  636.5815    Yes            0\n\n\nYou should always check how much it actually deviates from the target constraints."
  },
  {
    "objectID": "noreden/5_10foods.html#example-2-reduce-ghge-to-85",
    "href": "noreden/5_10foods.html#example-2-reduce-ghge-to-85",
    "title": "Part 5: 10 foods",
    "section": "Example 2: reduce ghge to 85%",
    "text": "Example 2: reduce ghge to 85%\n\ncstr &lt;- copy(const_lwrupr_std) # this line is important: it keeps a copy of the original values\ncstr$ghge &lt;- cstr$ghge * 0.85 # reduce to 0.85\ncstr\n\n     energy   protein      fat    carbs     ghge\n1  982.5146  917.3123 521.5166 669.5269 541.0943\n2 1091.6828 1019.2359 579.4629 743.9188 601.2158\n\n# use the standardized food contribution per gram \n# contrib_pergram_std\n\n# define the inequality constraints\ninequalconstr &lt;- function (x) {\n  \n  cps &lt;- contrib_pergram_std\n  \n  constr &lt;- c(\n    # energy\n    - x[1]*cps$energy[1] - x[2]*cps$energy[2] - x[3]*cps$energy[3] - x[4]*cps$energy[4] - x[5]*cps$energy[5] - x[6]*cps$energy[6] -  x[7]*cps$energy[7] - x[8]*cps$energy[8] - x[9]*cps$energy[9]- x[10]*cps$energy[10] + cstr$energy[1], # lower\n    x[1]*cps$energy[1] + x[2]*cps$energy[2] + x[3]*cps$energy[3] + x[4]*cps$energy[4] + x[5]*cps$energy[5] + x[6]*cps$energy[6] + x[7]*cps$energy[7] + x[8]*cps$energy[8] + x[9]*cps$energy[9] + x[10]*cps$energy[10] - cstr$energy[2], # upper\n    \n    # protein\n\n    - x[1]*cps$protein[1] - x[2]*cps$protein[2] - x[3]*cps$protein[3] - x[4]*cps$protein[4] - x[5]*cps$protein[5] - x[6]*cps$protein[6] -  x[7]*cps$protein[7] - x[8]*cps$protein[8] - x[9]*cps$protein[9]- x[10]*cps$protein[10] + cstr$protein[1], # lower\n    x[1]*cps$protein[1] + x[2]*cps$protein[2] + x[3]*cps$protein[3] + x[4]*cps$protein[4] + x[5]*cps$protein[5] + x[6]*cps$protein[6] + x[7]*cps$protein[7] + x[8]*cps$protein[8] + x[9]*cps$protein[9] + x[10]*cps$protein[10] - cstr$protein[2], # upper\n    \n    # fat\n\n    - x[1]*cps$fat[1] - x[2]*cps$fat[2] - x[3]*cps$fat[3] - x[4]*cps$fat[4] - x[5]*cps$fat[5] - x[6]*cps$fat[6] -  x[7]*cps$fat[7] - x[8]*cps$fat[8] - x[9]*cps$fat[9]- x[10]*cps$fat[10] + cstr$fat[1], # lower\n    x[1]*cps$fat[1] + x[2]*cps$fat[2] + x[3]*cps$fat[3] + x[4]*cps$fat[4] + x[5]*cps$fat[5] + x[6]*cps$fat[6] + x[7]*cps$fat[7] + x[8]*cps$fat[8] + x[9]*cps$fat[9] + x[10]*cps$fat[10] - cstr$fat[2], # upper\n    \n    # carbs\n\n    - x[1]*cps$carbs[1] - x[2]*cps$carbs[2] - x[3]*cps$carbs[3] - x[4]*cps$carbs[4] - x[5]*cps$carbs[5] - x[6]*cps$carbs[6] -  x[7]*cps$carbs[7] - x[8]*cps$carbs[8] - x[9]*cps$carbs[9]- x[10]*cps$carbs[10] + cstr$carbs[1], # lower\n    x[1]*cps$carbs[1] + x[2]*cps$carbs[2] + x[3]*cps$carbs[3] + x[4]*cps$carbs[4] + x[5]*cps$carbs[5] + x[6]*cps$carbs[6] + x[7]*cps$carbs[7] + x[8]*cps$carbs[8] + x[9]*cps$carbs[9] + x[10]*cps$carbs[10] - cstr$carbs[2], # upper\n    \n    # ghge\n    - x[1]*cps$ghge[1] - x[2]*cps$ghge[2] - x[3]*cps$ghge[3] - x[4]*cps$ghge[4] - x[5]*cps$ghge[5] - x[6]*cps$ghge[6] -  x[7]*cps$ghge[7] - x[8]*cps$ghge[8] - x[9]*cps$ghge[9]- x[10]*cps$ghge[10] + cstr$ghge[1], # lower\n    x[1]*cps$ghge[1] + x[2]*cps$ghge[2] + x[3]*cps$ghge[3] + x[4]*cps$ghge[4] + x[5]*cps$ghge[5] + x[6]*cps$ghge[6] + x[7]*cps$ghge[7] + x[8]*cps$ghge[8] + x[9]*cps$ghge[9] + x[10]*cps$ghge[10] - cstr$ghge[2] # upper\n    \n  )\n  return (constr)\n}\n\n# Initial values\nx0 &lt;- fd$intake\n\n# lower and upper bounds of x (10 foods)\nlb &lt;- fd$intake_lwr\nub &lt;- fd$intake_upr\n\n\nopts &lt;- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 10 ))\n\n# run the algorithm\nres &lt;- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n)\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  10 \nNumber of equality constraints:    0 \nCurrent value of objective function:  1131.42535049197 \nCurrent value of controls: 173.3751 37.23264 30.16828 67.65362 167.7255 303.5214 67.84057 85.82576 \n20.91078 151.7212\n\n\nNow we check the results for the second problem.\n\n\n             name current       new percent_change lower_limit upper_limit\n1           Bread   175.4 173.37513         -0.012   18.831866   407.77324\n2          Cheese    43.4  37.23264         -0.142    4.659652   122.39639\n3            Eggs    24.6  30.16828          0.226    2.641185   101.99699\n4            Fish    69.5  67.65362         -0.027    7.461885   267.87632\n5  Fruit, berries   171.5 167.72547         -0.022   18.413142   480.13743\n6   Milk, yoghurt   306.1 303.52137         -0.008   32.864505   966.28731\n7        Potatoes    67.8  67.84057          0.001    7.279364   218.48830\n8        Red meat   117.6  85.82576         -0.270   12.250376   328.75242\n9   Sugar, sweets    16.9  20.91078          0.237    1.814473    69.78742\n10     Vegetables   154.6 151.72122         -0.019   16.598669   365.04187\n\n\n\n\nIndex: &lt;is_ok&gt;\n    new_diet const_lwr const_upr  is_ok relative_dev\n       &lt;num&gt;     &lt;num&gt;     &lt;num&gt; &lt;char&gt;        &lt;num&gt;\n1: 1037.1587  982.5146 1091.6828    Yes            0\n2:  933.2285  917.3123 1019.2359    Yes            0\n3:  521.5166  521.5166  579.4629    Yes            0\n4:  743.9177  669.5269  743.9188    Yes            0\n5:  601.2158  541.0943  601.2158    Yes            0"
  },
  {
    "objectID": "noreden/x_pkgdev_log.html",
    "href": "noreden/x_pkgdev_log.html",
    "title": "Package development log",
    "section": "",
    "text": "Flowchart for the implementation."
  },
  {
    "objectID": "noreden/x_pkgdev_log.html#overview",
    "href": "noreden/x_pkgdev_log.html#overview",
    "title": "Package development log",
    "section": "Overview",
    "text": "Overview\nThe core functionalities contain the following steps:\n\nprovide food data\ncompute inequality constraints (based on current total contribution from the existing diet)\nalgorithm to find the new diet\nresult processing and presentation\n\nThe existing implementation is fixed: not functionalized. The target implementation should allow flexibility at each step.\n\nProvide food data\n\n\nCompute inequality constraints\nThe default inequality constraints are based on the current total contribution:\n\ncurrent diet (d)\ncontrib per unit for each target outcome (e.g. ghge, energy)\noption to scale / standardize\n\nInequality constraints depend on the above, plus the coefficients to set upper and lower. Probably a good idea to split upper and lower.\n\n\nOptimization algorithm\nThis step requires better functional programming: need to wrap the functions to generate multiple inequality formulae.\n\n\nOutput processing"
  },
  {
    "objectID": "noreden/3_small_demo.html",
    "href": "noreden/3_small_demo.html",
    "title": "Part 3: A simple problem with 3 foods and 3 constraints",
    "section": "",
    "text": "We document the optimization procedure with nloptr using a small example of 3 foods, and 3 constraints (energy, protein, ghge).\nfoods &lt;- read.csv('data/foods.csv', sep = ',')\ndata.table::setDT(foods) # use data.table format\n\n# we only take 3 foods\nfd &lt;- foods[food %in% c('Bread', 'Vegetables', 'Red meat')]\nfd\n\n         food intake energy protein   fat carbs sugar alcohol  ghge\n1:      Bread  175.4 10.696   0.091 0.030 0.441 0.002       0 0.001\n2: Vegetables  154.6  1.565   0.015 0.008 0.050 0.005       0 0.001\n3:   Red meat  117.6  8.342   0.173 0.139 0.014 0.000       0 0.013"
  },
  {
    "objectID": "noreden/3_small_demo.html#constraints-for-3-foods",
    "href": "noreden/3_small_demo.html#constraints-for-3-foods",
    "title": "Part 3: A simple problem with 3 foods and 3 constraints",
    "section": "Constraints for 3 foods",
    "text": "Constraints for 3 foods\nWe compute the constraints for 3 foods together. Note that the consumption for each of the 28 food groups are different, hence we can not use 3/28 times the total energy, protein…; we need to use a weighted average.\nThe cosntraints can be set to any positive number that make sense.\n\n# original constraint for all foods (maximum)\nconst_max_allfoods &lt;- c(9314.3, 98.2, 85.8, 234.7, 39.2, 8.6, 3.8)\n\n# 3 foods contribution (maximum)\nconst_max_3foods &lt;- t(as.matrix(fd$intake)) %*% as.matrix(fd[, .(energy, protein, fat, carbs, sugar, alcohol, ghge)])\nconst_max_3foods\n\n       energy protein     fat   carbs  sugar alcohol   ghge\n[1,] 3099.047 38.6252 22.8452 86.7278 1.1238       0 1.8588\n\n\nIn the optimization problem, we want to have a range (lower, upper) for the metrics. We can assume that the lower range is 90% of the maximum.\n\nc3foods &lt;- rbind(const_max_3foods*0.9, const_max_3foods*1)\nrownames(c3foods) &lt;- c('lwr', 'upr')\nc3foods &lt;- data.frame(c3foods)\nc3foods\n\n      energy  protein      fat    carbs   sugar alcohol    ghge\nlwr 2789.142 34.76268 20.56068 78.05502 1.01142       0 1.67292\nupr 3099.047 38.62520 22.84520 86.72780 1.12380       0 1.85880\n\n\nFor example, the total energy for the 3 foods together should be within [2789.14, 3099.05]."
  },
  {
    "objectID": "noreden/3_small_demo.html#optimization",
    "href": "noreden/3_small_demo.html#optimization",
    "title": "Part 3: A simple problem with 3 foods and 3 constraints",
    "section": "Optimization",
    "text": "Optimization\nNow we are going to solve the optimization problem using nloptr.\nThere are a few components that need to be specified:\n\nobjective function (as a function of x)\nconstraint functions\ninitial values\noptions\n\n\nObjective function\nThe objective is to minimize the following function:\n\\((x_1 - X_1)^2 + (x_2 - X_2)^2 + (x_3 - X_3)^2\\) where\n\\(x_1, x_2, x_3\\) are the target diet (grams or other units) we want to find, these three are unknown.\n\\(X_1, X_2, X_3\\) are the current diet for bread, vegetables and red meat. We have these values in the data: 175.4, 154.6, 117.6. In the function we use fd$intake to programmatically extract the values.\n\nfd$intake\n\n[1] 175.4 154.6 117.6\n\n# define objective \nobjective &lt;- function(x)\n{\n  return ( (x[1]- fd$intake[1])^2 + \n             (x[2]- fd$intake[2])^2 + \n             (x[3]- fd$intake[3])^2)\n}\n\n\n\nConstraints\nNow we define the inequality constraints. For this demo, we only include 3 metrics (energy, protein, ghge) for simplicity.\n\n# select the metrics we want to keep \nc3 &lt;- c3foods[, c('energy', 'protein', 'ghge')]\nc3\n\n      energy  protein    ghge\nlwr 2789.142 34.76268 1.67292\nupr 3099.047 38.62520 1.85880\n\n\nThe inequality constraints need to be reformulated for nloptr to work. More specifically, nloptr optimizes a function \\(f(x)\\) subject to a set of equality and inequality constraints. For the inequality constraints, they need to be the form of \\(g(x) &lt;= 0\\).\nWe write out our own constraints for energy:\n\\(x_1 e_1 + x_2e_2 + x_3e_3 &gt;= E_{lower}, x_1 e_1 + x_2e_2 + x_3e_3 &lt;= E_{upper}\\)\nThese two need to be re-written to be in the format of \\(g(x) &lt;= 0\\).\n\\(-(x_1 e_1 + x_2e_2 + x_3e_3)+E_{lower} &lt;= 0\\)\n\\(x_1 e_1 + x_2e_2 + x_3e_3 - E_{upper} &lt;= 0\\)\nThe constraints for protein, ghge can be written in similar ways.\n\n# define the inequality constraints\ninequalconstr &lt;- function (x) {\n  constr &lt;- c(\n    # energy\n    - x[1]*fd$energy[1] - x[2]*fd$energy[2] - x[3]*fd$energy[3] + c3$energy[1], # lower\n    x[1]*fd$energy[1] + x[2]*fd$energy[2] + x[3]*fd$energy[3] - c3$energy[2], # upper\n    \n    # protein\n    - x[1]*fd$protein[1] - x[2]*fd$protein[2] - x[3]*fd$protein[3] + c3$protein[1],\n    x[1]*fd$protein[1] + x[2]*fd$protein[2] + x[3]*fd$protein[3] - c3$protein[2],\n\n    # ghge\n    - x[1]*fd$ghge[1] - x[2]*fd$ghge[2] - x[3]*fd$ghge[3]+ c3$ghge[1],\n    x[1]*fd$ghge[1] + x[2]*fd$ghge[2] + x[3]*fd$ghge[3] - c3$ghge[2]\n  )\n  return (constr)\n}\n\n\n\nOther options\nWe do not need to explicitly specify the non-negativity constraints for \\(x\\) inside the function. They are specified outside the function as a set of lower and upper bounds. You can set these range to be anything that make sense; for now we make it close to the current diet.\nInitial values are the values you tell the program to start the search. This is also up to you; sometimes initial values can have a large impact on the final results when the optimization problem is difficult (e.g. has multiple local optima). We can start close to the values of the current diet.\n\n# lower and upper bounds of x (3 foods)\nlb &lt;- c(160, 140, 100)\nub &lt;- c(180, 160, 120)\n\n# Initial values\n# (try different ones!)\nx0 &lt;- c(175, 150, 110) \n\nOptions should also be supplied to the program as a named list. These are specifications for the algorithm, tolerance and maximum evaluation. For more details please check the function manual.\nPay attention to the last line here: the size inside rep() need to match the number of inequality constraints. In this example it should be 6.\n\nopts &lt;- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 6 ))\n\nNow we run the optimization by calling nloptr from nloptr package. If you have loaded the package before, you don’t need the :: between the two.\nWe print the result and check the optimized values.\n\n# run the algorithm\nres &lt;- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n  )\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 4 ( NLOPT_XTOL_REACHED: Optimization stopped because \nxtol_rel or xtol_abs (above) was reached. )\n\nNumber of Iterations....: 36023 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  6 \nNumber of equality constraints:    0 \nOptimal value of objective function:  8.01735115194219e-26 \nOptimal value of controls: 175.4 154.6 117.6\n\n\nThe optimal values are 175.4, 154.6, 117.6. These are the same as the current diet.\n\n\n\n\n\n\nNote\n\n\n\nThis result is not surprising; our current diet on the three foods already satisfies the constraints, and it is the closest to the current diet (\\((x_1 - X_1)^2 +(x_2 - X_2)^2 + (x_3 - X_3)^2 = 0\\)) when \\(x_1 = X_1, x_2 = X_2, x_3 = X_3\\)."
  },
  {
    "objectID": "noreden/3_small_demo.html#reduce-ghge-to-80",
    "href": "noreden/3_small_demo.html#reduce-ghge-to-80",
    "title": "Part 3: A simple problem with 3 foods and 3 constraints",
    "section": "Reduce ghge to 80%",
    "text": "Reduce ghge to 80%\nWe can try to modify the constraint values to see if the diet will be different.\nFor example, we can limit ghge. The current upper and lower range are [1.673, 1.859], let us try to limit it to [1.338, 1.487], which is 80% of the original values.\n\n# c3foods &lt;- rbind(const_max_3foods*0.9, const_max_3foods*1)\n# rownames(c3foods) &lt;- c('lwr', 'upr')\n# c3foods &lt;- data.frame(c3foods)\nc3\n\n      energy  protein    ghge\nlwr 2789.142 34.76268 1.67292\nupr 3099.047 38.62520 1.85880\n\nc3_alt &lt;- c3\nc3_alt$ghge &lt;- c3_alt$ghge * 0.8 # you can try different limits\nc3_alt\n\n      energy  protein     ghge\nlwr 2789.142 34.76268 1.338336\nupr 3099.047 38.62520 1.487040\n\n\nWe keep the objective function and options same as before; but we modify the inequality constraints.\n\n# define the inequality constraints\n# instead of c3, we use c3_alt\n\ninequalconstr_alt &lt;- function (x) {\n  constr &lt;- c(\n    # energy\n    - x[1]*fd$energy[1] - x[2]*fd$energy[2] - x[3]*fd$energy[3] + c3_alt$energy[1], # lower\n    x[1]*fd$energy[1] + x[2]*fd$energy[2] + x[3]*fd$energy[3] - c3_alt$energy[2], # upper\n    \n    # protein\n    - x[1]*fd$protein[1] - x[2]*fd$protein[2] - x[3]*fd$protein[3] + c3_alt$protein[1],\n    x[1]*fd$protein[1] + x[2]*fd$protein[2] + x[3]*fd$protein[3] - c3_alt$protein[2],\n\n    # ghge\n    - x[1]*fd$ghge[1] - x[2]*fd$ghge[2] - x[3]*fd$ghge[3]+ c3_alt$ghge[1], # new values\n    x[1]*fd$ghge[1] + x[2]*fd$ghge[2] + x[3]*fd$ghge[3] - c3_alt$ghge[2] # new values\n  )\n  return (constr)\n}\n\nNow we run the optimization again with the new constraint, inequalconstr_alt.\n\n# run the algorithm\nres_alt &lt;- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr_alt, # inequality constraint (NEW)\n  opts        = opts       # options\n  )\n\nprint(res_alt)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr_alt, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  6 \nNumber of equality constraints:    0 \nCurrent value of objective function:  566.401428431137 \nCurrent value of controls: 168.806 140 100\n\n\nThe new results are 168.806, 140, 100.\n\n\n\n\n\n\nCompare the two runs\n\n\n\n\nBread: 175.4 -&gt; 168.8 (3.7% reduction)\nVegetables: 154.6 -&gt; 140 (9.4% reduction)\nRed meat: 117.6 -&gt; 100 (15.0% reduction)\n\nThis makes sense, as red meat is the largest contributor for ghge.\n\n\nWhat we have shown here is a very crude demonstration of how to construct the optimization problem, and a sanity check of the results. A lot more can be tried out."
  },
  {
    "objectID": "noreden/4_troubleshoot_3foods.html",
    "href": "noreden/4_troubleshoot_3foods.html",
    "title": "Part 4: Troubleshoot part 3",
    "section": "",
    "text": "Previously we have coded the algorithm with nloptr function. A few issues have popped up: some diet do not fall within the constraints. Possible reasons:\nSteps taken so far (2023.08.27)\nlibrary(data.table)\nfoods &lt;- read.csv('data/foods.csv', sep = ',')\nsetDT(foods) # use data.table format\n\n# start with 3 foods\nfd &lt;- foods[food %in% c('Bread', 'Vegetables', 'Red meat')]\nfd\n\n         food intake energy protein   fat carbs sugar alcohol  ghge\n1:      Bread  175.4 10.696   0.091 0.030 0.441 0.002       0 0.001\n2: Vegetables  154.6  1.565   0.015 0.008 0.050 0.005       0 0.001\n3:   Red meat  117.6  8.342   0.173 0.139 0.014 0.000       0 0.013\n\n# split current diet (grams of intake) and contribution per gram\ncurrent_diet &lt;- fd$intake\ncurrent_diet\n\n[1] 175.4 154.6 117.6\n\ncontrib_pergram &lt;- fd[, .(energy, protein, fat, carbs, sugar, alcohol, ghge)]\ncontrib_pergram\n\n   energy protein   fat carbs sugar alcohol  ghge\n1: 10.696   0.091 0.030 0.441 0.002       0 0.001\n2:  1.565   0.015 0.008 0.050 0.005       0 0.001\n3:  8.342   0.173 0.139 0.014 0.000       0 0.013"
  },
  {
    "objectID": "noreden/4_troubleshoot_3foods.html#constraints-for-3-foods",
    "href": "noreden/4_troubleshoot_3foods.html#constraints-for-3-foods",
    "title": "Part 4: Troubleshoot part 3",
    "section": "Constraints for 3 foods",
    "text": "Constraints for 3 foods\nWe compute the constraints for 3 foods together. Note that the consumption for each of the 28 food groups are different, hence we can not use 3/28 times the total energy, protein…; we need to use a weighted average.\nThe cosntraints can be set to any positive number that make sense. In the optimization problem, we want to have a range (lower, upper) for the metrics. We can assume that the lower range is 90% of the maximum.\n\n# original constraint for all foods (maximum)\nconst_max_allfoods &lt;- c(9314.3, 98.2, 85.8, 234.7, 39.2, 8.6, 3.8)\n\n# 3 foods contribution (maximum)\nconst_max_3foods &lt;- t(as.matrix(current_diet)) %*% as.matrix(contrib_pergram)\nconst_max_3foods\n\n       energy protein     fat   carbs  sugar alcohol   ghge\n[1,] 3099.047 38.6252 22.8452 86.7278 1.1238       0 1.8588\n\n# exclude sugar, alcohol\nconst_max_3foods &lt;- const_max_3foods[, c('energy', 'protein', 'fat', 'carbs', 'ghge')]\n\n# range of target: 0.9-1 of the maximum\n# this is one thing that we could adjust: hard threshould to soft\nconst_lwrupr &lt;- rbind(const_max_3foods*0.9, const_max_3foods*1)\nrownames(const_lwrupr) &lt;- c('lwr', 'upr')\nconst_lwrupr &lt;- data.table(const_lwrupr)\nconst_lwrupr\n\n     energy  protein      fat    carbs    ghge\n1: 2789.142 34.76268 20.56068 78.05502 1.67292\n2: 3099.047 38.62520 22.84520 86.72780 1.85880\n\n\nFor example, the total energy for the 3 foods together should be within [2789.14, 3099.05]."
  },
  {
    "objectID": "noreden/4_troubleshoot_3foods.html#standardize-food-contribution-per-gram",
    "href": "noreden/4_troubleshoot_3foods.html#standardize-food-contribution-per-gram",
    "title": "Part 4: Troubleshoot part 3",
    "section": "Standardize food contribution per gram",
    "text": "Standardize food contribution per gram\nSince the range of constraints for 5 categories differ hugely, it could affect the numeric evaluation. We want them to be on comparative scales.\nThe current solution is to standardize the contribution in each category (e.g. energy) by its original value divided by the standard deviation. For example,\n\nthe contribution of energy per food becomes (2.25, 0.33, 1.76) rather than (10.69, 1.56, 8.34)\nthe contribution of ghge per food becomes (0.14, 0.14, 1.87) rather than (0.001, 0.001, 0.013)\n\nSimilarly, the upper and lower limit of the constraints also need to be re-scaled. After rescaling, the target will be on a range of hundreds, rather than 3000 vs 1.8.\n\n# find sd for each category: energy, protein.. ghge\n# divide by these coef\ncontrib_pergram &lt;- contrib_pergram[, c('energy', 'protein', 'fat', 'carbs', 'ghge')]\ncontrib_pergram\n\n   energy protein   fat carbs  ghge\n1: 10.696   0.091 0.030 0.441 0.001\n2:  1.565   0.015 0.008 0.050 0.001\n3:  8.342   0.173 0.139 0.014 0.013\n\nsd_coef &lt;- apply(contrib_pergram, MARGIN = 2, sd)\n\ncontrib_pergram_std &lt;- sweep(contrib_pergram, MARGIN = 2, 1/sd_coef, FUN = '*')\ncontrib_pergram_std\n\n     energy   protein       fat     carbs      ghge\n1 2.2562170 1.1516220 0.4276560 1.8621635 0.1443376\n2 0.3301215 0.1898278 0.1140416 0.2111296 0.1443376\n3 1.7596637 2.1893473 1.9814728 0.0591163 1.8763884\n\n# standardize constraint\n# test the previous constraint\nconst_lwrupr\n\n     energy  protein      fat    carbs    ghge\n1: 2789.142 34.76268 20.56068 78.05502 1.67292\n2: 3099.047 38.62520 22.84520 86.72780 1.85880\n\nconst_lwrupr_std &lt;- sweep(const_lwrupr, MARGIN = 2, 1/sd_coef, FUN = '*')\nconst_lwrupr_std\n\n    energy  protein      fat    carbs     ghge\n1 588.3423 439.9282 293.0966 329.5946 241.4652\n2 653.7137 488.8091 325.6629 366.2162 268.2947\n\n\nIn the future, different scaling factor can be applied; but it should be a positive number after scaling. Could try dividing the difference between max and min of this variable."
  },
  {
    "objectID": "noreden/4_troubleshoot_3foods.html#example-1-reduce-ghge-to-90",
    "href": "noreden/4_troubleshoot_3foods.html#example-1-reduce-ghge-to-90",
    "title": "Part 4: Troubleshoot part 3",
    "section": "Example 1: reduce ghge to 90%",
    "text": "Example 1: reduce ghge to 90%\nFirst we reduce the GHGE to 90%. (This is feasible, in contrast to the 80% reduction)\n\ncstr &lt;- copy(const_lwrupr_std) # this line is important: it keeps a copy of the original values\ncstr$ghge &lt;- cstr$ghge * 0.9 # reduce to 0.9\ncstr\n\n    energy  protein      fat    carbs     ghge\n1 588.3423 439.9282 293.0966 329.5946 217.3187\n2 653.7137 488.8091 325.6629 366.2162 241.4652\n\n# use the standardized food contribution per gram \n# contrib_pergram_std\n\n# define the inequality constraints\ninequalconstr &lt;- function (x) {\n  \n  cps &lt;- contrib_pergram_std # call the values\n  # cstr is used as the last item in each equation\n  \n  constr &lt;- c(\n    # energy\n    - x[1]*cps$energy[1] - x[2]*cps$energy[2] - x[3]*cps$energy[3] + cstr$energy[1], # lower\n    x[1]*cps$energy[1] + x[2]*cps$energy[2] + x[3]*cps$energy[3] - cstr$energy[2], # upper\n    \n    # protein\n    - x[1]*cps$protein[1] - x[2]*cps$protein[2] - x[3]*cps$protein[3] + cstr$protein[1],\n    x[1]*cps$protein[1] + x[2]*cps$protein[2] + x[3]*cps$protein[3] - cstr$protein[2],\n    \n    # fat\n    - x[1]*cps$fat[1] - x[2]*cps$fat[2] - x[3]*cps$fat[3]+ cstr$fat[1],\n    x[1]*cps$fat[1] + x[2]*cps$fat[2] + x[3]*cps$fat[3] - cstr$fat[2],\n\n    # carbs\n    - x[1]*cps$carbs[1] - x[2]*cps$carbs[2] - x[3]*cps$carbs[3]+ cstr$carbs[1],\n    x[1]*cps$carbs[1] + x[2]*cps$carbs[2] + x[3]*cps$carbs[3] - cstr$carbs[2],\n    \n    # ghge\n    - x[1]*cps$ghge[1] - x[2]*cps$ghge[2] - x[3]*cps$ghge[3]+ cstr$ghge[1],\n    x[1]*cps$ghge[1] + x[2]*cps$ghge[2] + x[3]*cps$ghge[3] - cstr$ghge[2]\n  )\n  return (constr)\n}\n\nSet other parameters (this part is unchanged, apart from the number of constraints)\n\n# lower and upper bounds of x (3 foods)\nlb &lt;- c(160, 140, 100)\nub &lt;- c(180, 160, 120)\n\n# Initial values\n# (try different ones!)\nx0 &lt;- c(175, 150, 110)\n\nopts &lt;- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 10 )) # match number of const\n\n# run the algorithm\nres &lt;- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n)\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  10 \nNumber of equality constraints:    0 \nCurrent value of objective function:  202.054831934324 \nCurrent value of controls: 174.315 153.5123 103.4687\n\n\nNow we print out the results in a more readable way\n\nres_diet &lt;- res$solution\n\n# print with the current diet, and change percentage\n# also print the boundary, in case it hit boundary\n\ndiet_result &lt;- data.frame(\n  name = c('Bread', 'Vegetables', 'Red meat'),\n  current = current_diet, \n  new = res_diet, \n  percent_change = round((res_diet - current_diet)/current_diet, 3),\n  lower_limit = lb, \n  upper_limit = ub\n)\ndiet_result\n\n        name current      new percent_change lower_limit upper_limit\n1      Bread   175.4 174.3150         -0.006         160         180\n2 Vegetables   154.6 153.5123         -0.007         140         160\n3   Red meat   117.6 103.4687         -0.120         100         120\n\n\n\n# verify whether it falls within \noutput_newdiet &lt;- t(as.matrix(res_diet)) %*% as.matrix(contrib_pergram_std)\n# output_newdiet\n\n# cstr\nconst_result &lt;- t(rbind(output_newdiet, cstr))\ncolnames(const_result) &lt;- c('new_diet','const_lwr', 'const_upr')\nconst_result &lt;- data.table(const_result)\n# conditions\nconst_result[, is_ok := 'Yes']\nconst_result[new_diet &lt; const_lwr, is_ok := 'beyond lower']\nconst_result[new_diet &gt; const_upr, is_ok := 'beyond upper']\n\n# relative difference (since we rescaled the targets)\nconst_result[, relative_dev := 0]\nconst_result[is_ok == 'beyond lower', relative_dev := round((new_diet - const_lwr)/const_lwr, 3)]\nconst_result[is_ok == 'beyond upper', relative_dev := round((new_diet - const_upr)/const_upr, 3)]\n\n# print out\nconst_result\n\n   new_diet const_lwr const_upr is_ok relative_dev\n1: 626.0403  588.3423  653.7137   Yes            0\n2: 456.4148  439.9282  488.8091   Yes            0\n3: 297.0740  293.0966  325.6629   Yes            0\n4: 363.1308  329.5946  366.2162   Yes            0\n5: 241.4652  217.3187  241.4652   Yes            0\n\n\nYou should always check how much it actually deviates from the target constraints."
  },
  {
    "objectID": "noreden/4_troubleshoot_3foods.html#example-2-reduce-ghge-to-85",
    "href": "noreden/4_troubleshoot_3foods.html#example-2-reduce-ghge-to-85",
    "title": "Part 4: Troubleshoot part 3",
    "section": "Example 2: reduce ghge to 85%",
    "text": "Example 2: reduce ghge to 85%\nThis is one example where the optimal constraints can not be reached. You’ll see that the boundaries that we set in the algorithm have been reached; suggesting that if we modify these parameters, the solution could still be found.\nBe careful with HOW MUCH it deviates from the target!\n\ncstr &lt;- copy(const_lwrupr_std) # this line is important: it keeps a copy of the original values\ncstr$ghge &lt;- cstr$ghge * 0.85 # reduce to 0.85\ncstr\n\n    energy  protein      fat    carbs     ghge\n1 588.3423 439.9282 293.0966 329.5946 205.2454\n2 653.7137 488.8091 325.6629 366.2162 228.0505\n\n# use the standardized food contribution per gram \n# contrib_pergram_std\n\n# define the inequality constraints\ninequalconstr &lt;- function (x) {\n  \n  cps &lt;- contrib_pergram_std # call the values\n  # cstr is used as the last item in each equation\n  \n  constr &lt;- c(\n    # energy\n    - x[1]*cps$energy[1] - x[2]*cps$energy[2] - x[3]*cps$energy[3] + cstr$energy[1], # lower\n    x[1]*cps$energy[1] + x[2]*cps$energy[2] + x[3]*cps$energy[3] - cstr$energy[2], # upper\n    \n    # protein\n    - x[1]*cps$protein[1] - x[2]*cps$protein[2] - x[3]*cps$protein[3] + cstr$protein[1],\n    x[1]*cps$protein[1] + x[2]*cps$protein[2] + x[3]*cps$protein[3] - cstr$protein[2],\n    \n    # fat\n    - x[1]*cps$fat[1] - x[2]*cps$fat[2] - x[3]*cps$fat[3]+ cstr$fat[1],\n    x[1]*cps$fat[1] + x[2]*cps$fat[2] + x[3]*cps$fat[3] - cstr$fat[2],\n\n    # carbs\n    - x[1]*cps$carbs[1] - x[2]*cps$carbs[2] - x[3]*cps$carbs[3]+ cstr$carbs[1],\n    x[1]*cps$carbs[1] + x[2]*cps$carbs[2] + x[3]*cps$carbs[3] - cstr$carbs[2],\n    \n    # ghge\n    - x[1]*cps$ghge[1] - x[2]*cps$ghge[2] - x[3]*cps$ghge[3]+ cstr$ghge[1],\n    x[1]*cps$ghge[1] + x[2]*cps$ghge[2] + x[3]*cps$ghge[3] - cstr$ghge[2]\n  )\n  return (constr)\n}\n\n# lower and upper bounds of x (3 foods)\nlb &lt;- c(160, 140, 100)\nub &lt;- c(180, 160, 120)\n\n# Initial values\n# (try different ones!)\nx0 &lt;- c(175, 150, 110)\n\nopts &lt;- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 10 )) # match number of const\n\n# run the algorithm\nres &lt;- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n)\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  10 \nNumber of equality constraints:    0 \nCurrent value of objective function:  528.456412752291 \nCurrent value of controls: 177.753 140 100\n\n\nNow we check the results for the second problem.\n\nres_diet &lt;- res$solution\n\n# print with the current diet, and change percentage\n# also print the boundary, in case it hit boundary\n\ndiet_result &lt;- data.frame(\n  name = c('Bread', 'Vegetables', 'Red meat'),\n  current = current_diet, \n  new = res_diet, \n  percent_change = round((res_diet - current_diet)/current_diet, 3),\n  lower_limit = lb, \n  upper_limit = ub\n)\ndiet_result\n\n        name current     new percent_change lower_limit upper_limit\n1      Bread   175.4 177.753          0.013         160         180\n2 Vegetables   154.6 140.000         -0.094         140         160\n3   Red meat   117.6 100.000         -0.150         100         120\n\n\n\n# verify whether it falls within \noutput_newdiet &lt;- t(as.matrix(res_diet)) %*% as.matrix(contrib_pergram_std)\n# output_newdiet\n\n# cstr\nconst_result &lt;- t(rbind(output_newdiet, cstr))\ncolnames(const_result) &lt;- c('new_diet','const_lwr', 'const_upr')\nconst_result &lt;- data.table(const_result)\n# conditions\nconst_result[, is_ok := 'Yes']\nconst_result[new_diet &lt; const_lwr, is_ok := 'beyond lower']\nconst_result[new_diet &gt; const_upr, is_ok := 'beyond upper']\n\n# relative difference (since we rescaled the targets)\nconst_result[, relative_dev := 0]\nconst_result[is_ok == 'beyond lower', relative_dev := round((new_diet - const_lwr)/const_lwr, 3)]\nconst_result[is_ok == 'beyond upper', relative_dev := round((new_diet - const_upr)/const_upr, 3)]\n\n# print out\nconst_result\n\n   new_diet const_lwr const_upr        is_ok relative_dev\n1: 623.2326  588.3423  653.7137          Yes        0.000\n2: 450.2148  439.9282  488.8091          Yes        0.000\n3: 290.1302  293.0966  325.6629 beyond lower       -0.010\n4: 366.4749  329.5946  366.2162 beyond upper        0.001\n5: 233.5025  205.2454  228.0505 beyond upper        0.024"
  },
  {
    "objectID": "norkost/index.html",
    "href": "norkost/index.html",
    "title": "Norkost",
    "section": "",
    "text": "Norkost project notes\n\n\n\n\n\n\n\n\n\n\nTitle\n\n\n\n\n\n\nNorkost\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "notes_internal_noreden/Optimization.html",
    "href": "notes_internal_noreden/Optimization.html",
    "title": "Option 1: constOptim",
    "section": "",
    "text": "https://cran.r-project.org/web/views/Optimization.html"
  },
  {
    "objectID": "notes_internal_noreden/Optimization.html#linear-programming-lp",
    "href": "notes_internal_noreden/Optimization.html#linear-programming-lp",
    "title": "Option 1: constOptim",
    "section": "Linear programming LP",
    "text": "Linear programming LP\nObjective linear, constraints linear equalities or inequalities\nmaximise f(x) = cx\ns.t. Ax &lt;= b\nx&gt;= 0"
  },
  {
    "objectID": "notes_internal_noreden/Optimization.html#quadratic-programming",
    "href": "notes_internal_noreden/Optimization.html#quadratic-programming",
    "title": "Option 1: constOptim",
    "section": "Quadratic programming",
    "text": "Quadratic programming\nsome QP are convex, some not\nConstraints: linear equality or inequality\nminimize 1/2 x^t Q x + c^t x\ns.t. Ax &lt; b"
  },
  {
    "objectID": "notes_internal_noreden/Optimization.html#nonlinear-optimizaion-more-general-than-qp",
    "href": "notes_internal_noreden/Optimization.html#nonlinear-optimizaion-more-general-than-qp",
    "title": "Option 1: constOptim",
    "section": "Nonlinear optimizaion (more general than QP)",
    "text": "Nonlinear optimizaion (more general than QP)\nminimize f(x)\ns.t. g(x) &lt;= 0\nh(x) = 0\nxl &lt;= x &lt;= xu"
  },
  {
    "objectID": "notes_internal_noreden/scaling_up.html",
    "href": "notes_internal_noreden/scaling_up.html",
    "title": "Experiment plan",
    "section": "",
    "text": "1-28 (some are not really important)\nNo need to test ALL combinations\nAt this point, no need to do an extensive search. More important to know the runtime.\nStart from 5, 10, 12, 14, …, 20\nAlso there will be groups that are absolutely necessary to keep\n\n\n\n95%\n90%\n85%\n80%\n75%\n\n\n\n(Remove)\npotatoes\nSugars\n\nOther grains\nbutter\njuice\nwhite meat\ncakes\n\nlegume\nnuts\ncreams\n\n\ndrop sugar\nadd Sat fat\nvitamin c\ncalcium"
  },
  {
    "objectID": "notes_internal_noreden/scaling_up.html#food-groups",
    "href": "notes_internal_noreden/scaling_up.html#food-groups",
    "title": "Experiment plan",
    "section": "",
    "text": "1-28 (some are not really important)\nNo need to test ALL combinations\nAt this point, no need to do an extensive search. More important to know the runtime.\nStart from 5, 10, 12, 14, …, 20\nAlso there will be groups that are absolutely necessary to keep"
  },
  {
    "objectID": "notes_internal_noreden/scaling_up.html#ghge-reduction",
    "href": "notes_internal_noreden/scaling_up.html#ghge-reduction",
    "title": "Experiment plan",
    "section": "",
    "text": "95%\n90%\n85%\n80%\n75%"
  },
  {
    "objectID": "notes_internal_noreden/scaling_up.html#foods",
    "href": "notes_internal_noreden/scaling_up.html#foods",
    "title": "Experiment plan",
    "section": "",
    "text": "(Remove)\npotatoes\nSugars\n\nOther grains\nbutter\njuice\nwhite meat\ncakes\n\nlegume\nnuts\ncreams\n\n\ndrop sugar\nadd Sat fat\nvitamin c\ncalcium"
  },
  {
    "objectID": "notes_internal_noreden/scaling_up.html#add-constraint-vitamin-c",
    "href": "notes_internal_noreden/scaling_up.html#add-constraint-vitamin-c",
    "title": "Experiment plan",
    "section": "Add constraint: vitamin C",
    "text": "Add constraint: vitamin C\n25, 6, 0.95, ok, 10s\n25, 6, 0.75, ok, 10s"
  },
  {
    "objectID": "notes_internal_noreden/scaling_up.html#add-constraint-calcium",
    "href": "notes_internal_noreden/scaling_up.html#add-constraint-calcium",
    "title": "Experiment plan",
    "section": "Add constraint: calcium",
    "text": "Add constraint: calcium\n25, 7, 0.95, 11s, ghge can not be satisfied, 11s\npossibly due to calcium constraint within animal product?"
  },
  {
    "objectID": "notes_internal_noreden/pkg_design.html",
    "href": "notes_internal_noreden/pkg_design.html",
    "title": "Workflow",
    "section": "",
    "text": "Purpose: use the intake and nutrient/ghge to compute\n\nintake (unit)\nnutrient (per unit)\nghge (per unit)\n\nRequirement \n\nif want flexibility to add food later on, should be expecting both one food, and multiple foods\nalso flexibility on categories (carbs, protein, ghge, …)\n\n\n\n\nPurpose: find a solution\nThis part consists 4 parts\n\nset objective (qp on food intake)\nset constraints (upper and lower limit on food * contrib per intake)\nlower and upper bound for food intake\nrun nloptr::nloptr()\n\nRequirement\n\nthe first 3 steps need to be flexible\n\n\n\n\nPurpose: quickly identify if the result is desirable\nRequirement\n\nRuntime"
  },
  {
    "objectID": "notes_internal_noreden/pkg_design.html#specify-food-information",
    "href": "notes_internal_noreden/pkg_design.html#specify-food-information",
    "title": "Workflow",
    "section": "",
    "text": "Purpose: use the intake and nutrient/ghge to compute\n\nintake (unit)\nnutrient (per unit)\nghge (per unit)\n\nRequirement \n\nif want flexibility to add food later on, should be expecting both one food, and multiple foods\nalso flexibility on categories (carbs, protein, ghge, …)"
  },
  {
    "objectID": "notes_internal_noreden/pkg_design.html#run-optimization-with-target-constraints",
    "href": "notes_internal_noreden/pkg_design.html#run-optimization-with-target-constraints",
    "title": "Workflow",
    "section": "",
    "text": "Purpose: find a solution\nThis part consists 4 parts\n\nset objective (qp on food intake)\nset constraints (upper and lower limit on food * contrib per intake)\nlower and upper bound for food intake\nrun nloptr::nloptr()\n\nRequirement\n\nthe first 3 steps need to be flexible"
  },
  {
    "objectID": "notes_internal_noreden/pkg_design.html#result-collection",
    "href": "notes_internal_noreden/pkg_design.html#result-collection",
    "title": "Workflow",
    "section": "",
    "text": "Purpose: quickly identify if the result is desirable\nRequirement\n\nRuntime"
  },
  {
    "objectID": "notes_internal_noreden/resources.html",
    "href": "notes_internal_noreden/resources.html",
    "title": "Nutrition",
    "section": "",
    "text": "Nutrition\nhttps://cran.r-project.org/web/packages/NutrienTrackeR/NutrienTrackeR.pdf\n\n\nOptimization\nhttps://cran.r-project.org/web/views/Optimization.html\nhttps://www.mlstack.cafe/interview-questions/optimisation\nhttps://www.techinterviewhandbook.org/algorithms/math/"
  },
  {
    "objectID": "notes_internal_noreden/literature.html",
    "href": "notes_internal_noreden/literature.html",
    "title": "Cleghorn 2022",
    "section": "",
    "text": "Cleghorn 2022\nOptimise NZ versio nof EAT-lancet diet\nModel impact on population health\nConstraints\n\npopulation diet meets the nutritional recommendations\ndiet related greenhouse gas emission within boundary\ndiet cost witthin baseline cost of average diet\n\n\nDIET multi-state life-table modelling\npopulation (4.4m), modeled until deah/110 yo + sex, age, ethnicity\ndietary risk factors: red meat, processed meat, sugar beverage, sodium, low fruit, …\n9 diseases: coronary heart disease, stroke, …\n\n\n\nWalker 2021\nPuLP (python), linear optimizationn to determine the lowest possible impact diet for each scenario\nenv impact:\n\nClimate change\nbiodiversity loss\n\n\n\nNordman 2023\nOptimization targets (via QP)\n\nNutrient only\nnurient, health-based targets for food amounts\nGHGE only\nNutrient, health, GHGE\n\nCurrent GHGE: 4.37 kg CO2-eq\nmain food groups: 7 groups with smaller levels\nSub-groups: 50\nOptimized diet\n\nreduced proportion of animal based food (25% vs 43%) for energy\nmore grain and starches, lower cheese (not milk)\nmuch less discretional (junk) food and soft drinks"
  },
  {
    "objectID": "notes_internal_noreden/objective.html",
    "href": "notes_internal_noreden/objective.html",
    "title": "Formulation (QP)",
    "section": "",
    "text": "energy composition\nepi\nAcceptability\ncost"
  },
  {
    "objectID": "notes_internal_noreden/objective.html#food-groups",
    "href": "notes_internal_noreden/objective.html#food-groups",
    "title": "Formulation (QP)",
    "section": "Food groups",
    "text": "Food groups\n\n\n\nFood groups\nEnergy\nProtein\nFat\nCarb\nGHGE\n\n\n\n\nBread\n10.6956\n0.0912\n0.0302\n0.4413\n0.0011\n\n\nVegetables\n1.5653\n0.0149\n0.0084\n0.0498\n0.0010\n\n\nFruit, berries\n2.7289\n0.0076\n0.0041\n0.1341\n0.0007\n\n\nMeat\n7.7432\n0.1800\n0.1211\n0.0113\n0.0110\n\n\nFish\n6.0863\n0.1698\n0.0748\n0.0245\n0.0031\n\n\nMilk, yogurt\n1.9797\n0.0359\n0.0111\n0.0559\n0.0014\n\n\n\n\nObjective\nminimize deviation from current diet\n(x1 - 175.4)^2 +\n(x2 - 154.6)^2 +\n(x3 - 171.5)^2 +\n(x4 - 151.1)^2 +\n(x5 - 69.5)^2 +\n(x6 - 306.1)^2\n\n\nContraints, 5 categories\n(intake g 3681.2 )\nEnergy kj 9314\nprotein g 97.7\nfat g 86.3\ncarbs g 235.1\nGHGE &lt;= 4.7\n\n\n\nConstraint\nEnergy\nProtein\nFat\nCarb\nGHGE\n\n\n\n\nLower\n9000\n55\n61.8\n250\n0\n\n\nUpper\n10000\n111.5\n98.8\n334.6\n4.7"
  },
  {
    "objectID": "norkost/1_problem.html",
    "href": "norkost/1_problem.html",
    "title": "Norkost",
    "section": "",
    "text": "Norkost project notes\n\n\n\n\n\n\n\n\n\n\nTitle\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "noreden/7_func_factory.html",
    "href": "noreden/7_func_factory.html",
    "title": "Flexible input with function factory",
    "section": "",
    "text": "When we want to make systematic production of constraints for the optimization, it is important to use functions. Given the special requirement as input when the constraint function enters the algorithm, where the argument is x and output is a scalar value, we need to treat this function as an object produced by our function factory - so that we can tweak the elements outside the function itself.\nThe basic structure looks like this.\nf_make_constraint_function &lt;- function(constraint_values, tag_outcomes){\n  \n  # constraint_values &lt;- constval$val_std\n  # tag_outcomes &lt;- c('energy', 'ghge')\n  \n  # this is the function we want to return\n  f_constr &lt;- function (x) {\n    \n    energy &lt;- constraint_values$energy\n    protein &lt;- constraint_values$protein\n\n    # a few computed constraints, where x is the new diet\n    # it should be the complete set of constrants, \n    # as we select in the last step from \n    energy_output_lwr &lt;- - sum(x * energy$unit_contrib) + energy$lwr\n    energy_output_upr &lt;- sum(x * energy$unit_contrib) - energy$upr\n    \n    protein_output_lwr &lt;- - sum(x * protein$unit_contrib) + protein$lwr\n    protein_output_upr &lt;- sum(x * protein$unit_contrib) - protein$upr\n    \n    \n    # collect in a named vector\n    constr_all &lt;- c(\n      energy_lwr = energy_output_lwr, \n      energy_upr = energy_output_upr, \n      \n      protein_lwr = protein_output_lwr, \n      protein_upr = protein_output_upr \n      \n     )\n    \n    # key step:\n    # select the ones that we want, for example, tag1\n    # need to watch out for the names \n    tags_lwr &lt;- paste0(tag_outcomes, '_lwr')\n    tags_upr &lt;- paste0(tag_outcomes, '_upr')\n    \n    constr &lt;- constr_all[c(tags_lwr, tags_upr)]\n    \n    # res &lt;- list(constr = constr, \n    #             tags_lwr = tags_lwr, \n    #             tags_upr = tags_upr)\n    \n    return (constr)\n  }\n  \n  # possibly better to also return the input\n  \n  return(f_constr)\n}\nWhen calling function, can do this\n# in this setting, the input data must have the columns required by the ff\n  f_ineq &lt;- f_make_constraint_function(\n    constraint_values = constraint_val, # list of constraints\n    tag_outcomes = tag_outcomes)"
  },
  {
    "objectID": "noreden/7_func_factory.html#an-example-of-a-function-factory",
    "href": "noreden/7_func_factory.html#an-example-of-a-function-factory",
    "title": "Flexible input with function factory",
    "section": "An example of a function factory",
    "text": "An example of a function factory\n\nf_out &lt;- function(x, constant){\n  f &lt;- function(y){\n    res &lt;- y ^ x + constant\n    return(res)\n  }\n  return(f)\n}\n\n\n# it creates a function that at its core, the inner function\n# create a function that raise to the power of 2\n# 3^2 + 1\nf_out1 &lt;- f_out(x = 2, constant = 1) \nf_out1(y=3)\n\n[1] 10\n\n# create a function that raise to the power of 1\n# 3^1 + 1\nf_out2 &lt;- f_out(x=1, constant = 1) \nf_out2(y=3)\n\n[1] 4"
  },
  {
    "objectID": "noreden/2_define_problem.html",
    "href": "noreden/2_define_problem.html",
    "title": "Part 2: Problem definition",
    "section": "",
    "text": "The information we have are the food groups and constraints.\nfoods &lt;- read.csv('data/foods.csv', sep = ',')\ndata.table::setDT(foods) # use data.table format\nhead(foods)  # print the fist 6\n\n           food intake energy protein   fat carbs sugar alcohol  ghge\n1:        Bread  175.4 10.696   0.091 0.030 0.441 0.002       0 0.001\n2: Other grains   45.0 14.022   0.100 0.042 0.607 0.011       0 0.002\n3:        Cakes   35.6 14.185   0.067 0.152 0.424 0.185       0 0.002\n4:     Potatoes   67.8  3.791   0.021 0.007 0.178 0.000       0 0.000\n5:   Vegetables  154.6  1.565   0.015 0.008 0.050 0.005       0 0.001\n6:      Legumes    3.5  8.571   0.143 0.029 0.286 0.000       0 0.001\nconstraint energy protein  fat carbs sugar alcohol ghge\n1      lower   9000    55.0 61.8 250.0   0.0       0  0.0\n2      upper  10000   111.5 98.8 334.6  54.8      10  4.7"
  },
  {
    "objectID": "noreden/2_define_problem.html#formulation",
    "href": "noreden/2_define_problem.html#formulation",
    "title": "Part 2: Problem definition",
    "section": "Formulation",
    "text": "Formulation\nAim: find a diet combination that satisfy the nutritional and environmental constraints, while similar to the current diet.\n\nNotation\nWe make the following notation:\n\n\\(x_1, x_2, ..., x_{k}\\) are the target food intake (in grams, or other units) for \\(k\\) food groups.\n\\(X_1, X_2, ..., X_{k}\\) are the current food intake (in grams, or other units).\n\nFor the constraints,\n\n\\(e_1, ..., e_k\\): energy associated with each of the food groups\n\n\\(E\\) is the total energy for all foods, with range between \\(E_{lower}, E_{upper}\\)\nFor example, with the data we have, this range is (9000, 10000).\n\n\\(p_1, ..., p_k\\): protein\n\\(f_1, ..., f_k\\): fat\n\\(c_1, ..., c_k\\): carbs\n\\(s_1, ..., s_k\\): sugar\n\\(a_1, ..., a_k\\): alcohol\n\\(g_1, ..., g_k\\): ghge\n\n\n\nOptimization\nFind a set of \\(x_1, ..., x_k\\) such that the values would\nminimise the squared sum of differences between current diet and target diet:\n\\((x_1 - X_1)^2 + (x_2 - X_2)^2 + ... + (x_k - X_k)^2\\)\nand satisfy the following constraints:\n\\(x_1, ..., x_k &gt;= 0\\) (realistic diet intake can not be negative)\n\\(x_1e_1 + x_2 e_2 + ... + x_k e_k &gt;= E_{lower}\\), total energy above the lower limit\n\\(x_1e_1 + x_2 e_2 + ... + x_k e_k &lt;= E_{upper}\\), total energy below the upper limit\n\\(x_1p_1 + x_2 p_2 + ... + x_k p_k &gt;= P_{lower}\\), total protein below the upper limit\n\\(x_1p_1 + x_2 p_2 + ... + x_k e_k &lt;= P_{upper}\\), total protein below the upper limit\nAnd so on."
  },
  {
    "objectID": "noreden/2_define_problem.html#solve-the-optimization-problem",
    "href": "noreden/2_define_problem.html#solve-the-optimization-problem",
    "title": "Part 2: Problem definition",
    "section": "Solve the optimization problem",
    "text": "Solve the optimization problem\nThis setting is a quadratic program (QP). It is an optimization problem with quadratic objective, and inequality constraints. We do not have equality constraints in this setting.\nWith R, there are various software to find a solution:\n\nnloptr in nloptr package (non-linear optimization),\nconstrOptim in stats package, which relies on optim function,\nsolve.QP in quadprog package\n\namong others."
  },
  {
    "objectID": "noreden/index.html",
    "href": "noreden/index.html",
    "title": "Documentation",
    "section": "",
    "text": "It is important to document while you go.\n\n\n\n\n\n\n\n\n\nTitle\n\n\n\n\n\n\nPart 1: Understand the current diet\n\n\n\n\nPart 2: Problem definition\n\n\n\n\nPart 3: A simple problem with 3 foods and 3 constraints\n\n\n\n\nPart 4: Troubleshoot part 3\n\n\n\n\nPart 5: 10 foods\n\n\n\n\nNote on the input data\n\n\n\n\nFlexible input with function factory\n\n\n\n\nLiterature review and article planning\n\n\n\n\nPackage development log\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "noreden/1_understand_data.html",
    "href": "noreden/1_understand_data.html",
    "title": "Part 1: Understand the current diet",
    "section": "",
    "text": "Load the aggregated food groups and their attributes. We have 28 food groups.\nfoods &lt;- read.csv('data/foods.csv', sep = ',')\ndata.table::setDT(foods) # use data.table format\nfoods[1:10,] # show the first 10\n\n                   food intake energy protein   fat carbs sugar alcohol  ghge\n                 &lt;char&gt;  &lt;num&gt;  &lt;num&gt;   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;   &lt;num&gt; &lt;num&gt;\n 1:               Bread  175.4 10.696   0.091 0.030 0.441 0.002       0 0.001\n 2:        Other grains   45.0 14.022   0.100 0.042 0.607 0.011       0 0.002\n 3:               Cakes   35.6 14.185   0.067 0.152 0.424 0.185       0 0.002\n 4:            Potatoes   67.8  3.791   0.021 0.007 0.178 0.000       0 0.000\n 5:          Vegetables  154.6  1.565   0.015 0.008 0.050 0.005       0 0.001\n 6:             Legumes    3.5  8.571   0.143 0.029 0.286 0.000       0 0.001\n 7:      Fruit, berries  171.5  2.729   0.008 0.004 0.134 0.029       0 0.001\n 8:               Juice  111.0  1.928   0.005 0.002 0.103 0.000       0 0.001\n 9:                Nuts    4.3 25.581   0.209 0.535 0.116 0.000       0 0.005\n10: Vegetarian products    0.7  4.286   0.143 0.000 0.000 0.000       0 0.003\nDefine the constraints on\nconstraints &lt;- data.frame(\n  constraint = c('lower', 'upper'), \n  energy = c(9000, 10000), \n  protein = c(55, 111.5), \n  fat = c(61.8, 98.8), \n  carbs = c(250, 334.6), \n  sugar = c(0, 54.8), \n  alcohol = c(0, 10),\n  ghge = c(0, 4.7)\n)\nconstraints\n\n  constraint energy protein  fat carbs sugar alcohol ghge\n1      lower   9000    55.0 61.8 250.0   0.0       0  0.0\n2      upper  10000   111.5 98.8 334.6  54.8      10  4.7"
  },
  {
    "objectID": "noreden/1_understand_data.html#exploratory-data-analysis-on-current-diet",
    "href": "noreden/1_understand_data.html#exploratory-data-analysis-on-current-diet",
    "title": "Part 1: Understand the current diet",
    "section": "Exploratory data analysis on current diet",
    "text": "Exploratory data analysis on current diet\nBefore we construct the optimization problem, we should always understand the data. This helps us picking the important food groups, as well as making sense of the constraints.\n\n# compute the contribution (indiv * intake) for 28 foods\nftotal &lt;- apply(X = foods[, c('energy', 'protein', 'fat', \n                              'carbs', 'sugar', 'alcohol', 'ghge')], \n                MARGIN = 2, \n                FUN = function(x){x*foods$intake})\nrownames(ftotal) &lt;- foods$food # name the rows\nhead(ftotal)\n\n                energy protein    fat   carbs  sugar alcohol   ghge\nBread        1876.0784 15.9614 5.2620 77.3514 0.3508       0 0.1754\nOther grains  630.9900  4.5000 1.8900 27.3150 0.4950       0 0.0900\nCakes         504.9860  2.3852 5.4112 15.0944 6.5860       0 0.0712\nPotatoes      257.0298  1.4238 0.4746 12.0684 0.0000       0 0.0000\nVegetables    241.9490  2.3190 1.2368  7.7300 0.7730       0 0.1546\nLegumes        29.9985  0.5005 0.1015  1.0010 0.0000       0 0.0035\n\n\nWe can also examine whether the current intake satisfy the constraints from above. For example, the energy contribution from bread is \\(175.4 \\times 10.696\\), which is the intake times per unit energy.\n\nt(as.matrix(foods$intake)) %*% as.matrix(foods[, .(energy, protein, fat, carbs, sugar, alcohol, ghge)])\n\n       energy protein     fat    carbs   sugar alcohol   ghge\n[1,] 9314.278 98.2159 85.7644 234.7172 39.2148  8.6498 3.7807\n\n\nIt looks like all categories but carbs fall within the expected range. Carb is slighter lower than the lower threshold.\nNow we can compute the percentage of each one of the 28 food group contribution towards the total.\n\n# divide by total of all 28 (upper constraints)\nfsum &lt;- apply(ftotal, 2, sum)\nfsum\n\n   energy   protein       fat     carbs     sugar   alcohol      ghge \n9314.2778   98.2159   85.7644  234.7172   39.2148    8.6498    3.7807 \n\nfprop &lt;- t(apply(X = ftotal, MARGIN = 1, FUN = function(x){x/fsum}))\nfprop &lt;- round(fprop, digits = 3) # keep 3 digits\nrownames(fprop) &lt;- foods$food\nhead(fprop)\n\n             energy protein   fat carbs sugar alcohol  ghge\nBread         0.201   0.163 0.061 0.330 0.009       0 0.046\nOther grains  0.068   0.046 0.022 0.116 0.013       0 0.024\nCakes         0.054   0.024 0.063 0.064 0.168       0 0.019\nPotatoes      0.028   0.014 0.006 0.051 0.000       0 0.000\nVegetables    0.026   0.024 0.014 0.033 0.020       0 0.041\nLegumes       0.003   0.005 0.001 0.004 0.000       0 0.001\n\n\nFor example, bread contributes to 20% towards the total energy, and 16.3% of the total protein."
  },
  {
    "objectID": "noreden/1_understand_data.html#visualization",
    "href": "noreden/1_understand_data.html#visualization",
    "title": "Part 1: Understand the current diet",
    "section": "Visualization",
    "text": "Visualization\n\n\n\n\n\n\nNote\n\n\n\nIn this section we are mostly focused on energy, intake, ghge. It is easy to extend to other macronutrient categories.\n\n\nWe need some more data manipulation before plotting.\n\n\nShow code\n# first define big groups\ngrain &lt;- c('Bread', 'Other grains', 'Cakes')\nfruit_vege &lt;- c('Potatoes', 'Vegetables', 'Legumes', 'Fruit, berries', \n                'Juice', 'Nuts', 'Vegetarian products')\nmeat &lt;- c('Red meat', 'White meat')\nfish_egg &lt;- c('Fish', 'Eggs')\ndairy &lt;- c('Cream, cream desserts', 'Milk, yoghurt', 'Cheese')\nfats &lt;- c('Butter, margarine, oil')\nbeverages &lt;- c('Coffee, tea', 'Soda, saft', 'Water', \n               'Alcoholic beverages', 'Non-dairy milk')\nsugar_other &lt;- c('Sugar, sweets', 'Snacks', 'Sauces', 'Spices', 'Other')\n\n# reorder food names to make the plot easier to read\nnames_ordered &lt;- c(grain, fruit_vege, meat, fish_egg, \n                   dairy, fats, beverages, sugar_other)\n\nnames_ordered\n\n\n [1] \"Bread\"                  \"Other grains\"           \"Cakes\"                 \n [4] \"Potatoes\"               \"Vegetables\"             \"Legumes\"               \n [7] \"Fruit, berries\"         \"Juice\"                  \"Nuts\"                  \n[10] \"Vegetarian products\"    \"Red meat\"               \"White meat\"            \n[13] \"Fish\"                   \"Eggs\"                   \"Cream, cream desserts\" \n[16] \"Milk, yoghurt\"          \"Cheese\"                 \"Butter, margarine, oil\"\n[19] \"Coffee, tea\"            \"Soda, saft\"             \"Water\"                 \n[22] \"Alcoholic beverages\"    \"Non-dairy milk\"         \"Sugar, sweets\"         \n[25] \"Snacks\"                 \"Sauces\"                 \"Spices\"                \n[28] \"Other\"                 \n\n\n\n\nShow code\n# require some data manip\n# need big food group, food name (smaller food group)\npdt &lt;- data.frame(ftotal) # total \npdt$food_name &lt;- row.names(pdt)\npdt &lt;- data.table::setDT(pdt)\n\n# attach big group\npdt[food_name %in% grain, big_group := 'grain']\npdt[food_name %in% fruit_vege, big_group := 'fruit_vege']\npdt[food_name %in% meat, big_group := 'meat']\npdt[food_name %in% fish_egg, big_group := 'fish_egg']\npdt[food_name %in% dairy, big_group := 'dairy']\npdt[food_name %in% fats, big_group := 'fats']\npdt[food_name %in% beverages, big_group := 'beverages']\npdt[food_name %in% sugar_other, big_group := 'sugar_other']\n\n# make long format\npdt_long &lt;- tidyr::pivot_longer(pdt, cols = -c(food_name, big_group),\n                                names_to = 'category')\npdt_long &lt;- data.table::setDT(pdt_long)\n\n# new variable, food_name_order\npdt_long$food_name_order &lt;- factor(pdt_long$food_name, \n                                   levels = names_ordered, \n                                   labels = names_ordered)\n\n\n\nEnergy contribution from 28 food groups\nIn total these 28 food groups contribute to 9314kJ. Here is a breakdown of each food groups, colored by different types of food (crude).\n\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(RColorBrewer)\n\np1 &lt;- ggplot(data = pdt_long[category == 'energy'], \n             aes(x = food_name_order, y = value, fill = big_group))\np1 &lt;- p1 + geom_bar(stat = 'identity')\np1 &lt;- p1 + coord_flip()\np1 &lt;- p1 + theme_bw()\np1 &lt;- p1 + scale_fill_brewer(palette = 'Dark2')\np1 &lt;- p1 + labs(title = 'Energy (multiplied by food intake)', \n                x = 'Food groups', \n                y = 'Energy')\np1 &lt;- p1 + theme(axis.text = element_text(size = 12), \n                   axis.title = element_text(size = 12), \n                   plot.title = element_text(size = 20))\np1\n\n\n\n\n\n\n\n\n\n\nGHGE contribution from 28 food groups\nWe can also plot a different metric, say GHGE. We can see that red meat is the largest contributor, followed by cheese and milk (dairy products).\n\n\nShow code\np2 &lt;- ggplot(data = pdt_long[category == 'ghge'], \n             aes(x = food_name_order, y = value, fill = big_group))\np2 &lt;- p2 + geom_bar(stat = 'identity')\np2 &lt;- p2 + coord_flip()\np2 &lt;- p2 + theme_bw()\np2 &lt;- p2 + scale_fill_brewer(palette = 'Dark2')\np2 &lt;- p2 + labs(title = 'GHGE (multiplied by food intake)', \n                x = 'Food groups', \n                y = 'GHGE')\np2 &lt;- p2 + theme(axis.text = element_text(size = 12), \n                 axis.title = element_text(size = 12), \n                 plot.title = element_text(size = 20))\n\np2\n\n\n\n\n\n\n\n\n\n\n\nEnergy vs GHGE\nWe can also show the per unit contribution to energy and GHGE. The size of the bubbles are the amount of consumption: the bigger the more consumed.\n\n\nShow code\npdfd &lt;- data.table::setDT(foods)\n# remove water, outlier\npdfd &lt;- pdfd[food != 'Water']\n\n\n# attach label \npdfd[food %in% grain, big_group := 'grain']\npdfd[food %in% fruit_vege, big_group := 'fruit_vege']\npdfd[food %in% meat, big_group := 'meat']\npdfd[food %in% fish_egg, big_group := 'fish_egg']\npdfd[food %in% dairy, big_group := 'dairy']\npdfd[food %in% fats, big_group := 'fats']\npdfd[food %in% beverages, big_group := 'beverages']\npdfd[food %in% sugar_other, big_group := 'sugar_other']\n\n\np3 &lt;- ggplot(data = pdfd, \n             aes(x = energy, y = ghge, size = intake, \n                 label = food, color = big_group))\np3 &lt;- p3 + geom_point(alpha = 0.3) + xlim(-3, 30) + ylim(-0.002, 0.015)\np3 &lt;- p3 + scale_size(range = c(0.1, 20))\np3 &lt;- p3 + geom_text_repel(size = 4, max.overlaps = 15)\n# p3 &lt;- p3 + geom_text(size = 3, check_overlap = T)\np3 &lt;- p3 + theme_bw()\np3 &lt;- p3 + scale_color_brewer(palette = 'Dark2')\np3 &lt;- p3 + labs(title = 'Energy vs GHGE per unit food (group)', \n                x = 'Energy (per unit)', \n                y = 'GHGE (per unit)')\np3\n\n\n\n\n\n\n\n\n\n\n\nProportion for 5 metrics\nFinally we present the percentage contribution of 28 food groups towards 5 categories.\n\n\nShow code\npdfp &lt;- data.frame(fprop) # total \npdfp$food_name &lt;- row.names(pdfp)\n\n# attach big group\ndata.table::setDT(pdfp)\npdfp[food_name %in% grain, big_group := 'grain']\npdfp[food_name %in% fruit_vege, big_group := 'fruit_vege']\npdfp[food_name %in% meat, big_group := 'meat']\npdfp[food_name %in% fish_egg, big_group := 'fish_egg']\npdfp[food_name %in% dairy, big_group := 'dairy']\npdfp[food_name %in% fats, big_group := 'fats']\npdfp[food_name %in% beverages, big_group := 'beverages']\npdfp[food_name %in% sugar_other, big_group := 'sugar_other']\n\npdfp_long &lt;- tidyr::pivot_longer(pdfp, cols = -c(food_name, big_group), names_to = 'category')\npdfp_long &lt;- data.table::setDT(pdfp_long)\n\n# also add orders here\npdfp_long$food_name_order &lt;- factor(pdfp_long$food_name, \n                                   levels = names_ordered, \n                                   labels = names_ordered)\n\n# plot \np4 &lt;- ggplot(data = pdfp_long[category %in% c('energy', 'protein', 'fat', 'carbs','ghge')], \n             aes(x = food_name_order, y = value, fill = big_group))\np4 &lt;- p4 + geom_bar(stat = 'identity')\np4 &lt;- p4 + coord_flip()\np4 &lt;- p4 + facet_wrap(~category, ncol = 5)\np4 &lt;- p4 + scale_fill_brewer(palette = 'Dark2')\np4 &lt;- p4 + labs(title = 'Proportion of food contribution',\n                subtitle = 'Each category sums up to 1',\n                x = 'Food groups', \n                y = 'Percentage')\np4 &lt;- p4 + theme_bw()\np4 &lt;- p4 + theme(axis.text = element_text(size = 10), \n                 axis.title = element_text(size = 10), \n                 plot.title = element_text(size = 15), \n                 strip.text = element_text(size = 12), \n                 legend.position = 'none')\np4"
  },
  {
    "objectID": "noreden/6_standard_input.html",
    "href": "noreden/6_standard_input.html",
    "title": "Note on the input data",
    "section": "",
    "text": "This is the current implementation of input needed for the optimization algorithm."
  },
  {
    "objectID": "noreden/6_standard_input.html#what-does-the-algorithm-require",
    "href": "noreden/6_standard_input.html#what-does-the-algorithm-require",
    "title": "Note on the input data",
    "section": "What does the algorithm require",
    "text": "What does the algorithm require\nThe current aim of optimization is to find a set of values (‘diet’) that is similar to the current diet, yet satisfies some constraints on nutrition and environment impact.\nFor the objective function,\n\na vector of current diet (in grams), diet0. This is used to compute the deviation (sum of squares) between the new (target) and current.\n\nFor the inequality constraints (standaradized or original),\n\na list of constraint values, ordered by tag_outcome (e.g. energy, ghge)\ninside each tag_outcome such as energy,\n\nunit_contrib for each food: a vector of size n\nlwr, upr: constraint lower and upper bound. This is after reduction.\n\n\n\n\n\n\n\n\nConstraint bounds\n\n\n\nThe values of constraint bounds need to be pre-computed before entering the algorithm - that means, setting the reduction on ghge is already done."
  },
  {
    "objectID": "noreden/6_standard_input.html#how-are-constaints-computed",
    "href": "noreden/6_standard_input.html#how-are-constaints-computed",
    "title": "Note on the input data",
    "section": "How are constaints computed",
    "text": "How are constaints computed\n\nThe total contribution of a diet is a weighted sum of all food intake (diet, in gram) and contribution to this particular nutrition / environment impact outcome (tag_outcome). For instance, in total, the current diet of 188g bread and 165g red meat contributes to X1 units of energy; X2 units of ghge.\nThe current diet is the average for each food group among all subjects who we collected data from. The lwr, upr of the current are used to limit the search region for the new diet. In the current implementation, they are 5% and 95% quantiles from all the subject.\nThe inequality constraints (e.g. energy) requires two values: constr_min, constr_max. This means that the computed total contribution of the new diet need to be between these two. In the current implementation:\n\nminimum (lower bound) is 0.9 times of the total contribution\nmaximum (upper bound) is the same of the total contribution\nif we want to reduce ghge, then multiply a factor to the two values above.\n\nIn addition to the raw values, we also implement a standardized version for each of the tag_outcome.\n\n\n\n\n\n\nRationale for standardization\n\n\n\nWe wish to have roughly the same scale for different tag_outcomes. The current implementation takes the standard deviation across all foods for a specific tag (e.g. energy), then divide by this value. This is only ONE of the many ways to standardize for numerical stability.\nAlternatively, it is also possible to multiply a fixed constant such as 1000 to ghge. The interpretation could be better. As long the original diet vector is intact (meaning that the ratio between the original food 1, food 2 are unchanged), one can artificially modify the coefficients as they wish.\nHowever, it is important to keep consistency in the values and the inequality function!\n\n\n\ndemo_input &lt;- readRDS('data/demo_9foods_input.rda')\ndemo_input$current_diet\n\n       food_name intake_mean intake_lwr intake_upr\n1          Bread   188.31866  18.831866      343.8\n2     Vegetables    72.79364   7.279364      230.7\n3       Red meat   165.98669  16.598669      419.7\n4  Milk, yoghurt   184.13142  18.413142      552.7\n5           Fish   126.26154  12.626154      299.6\n6         Cheese    74.61885   7.461885      302.9\n7           Eggs    26.41185   2.641185      111.6\n8 Fruit, berries   328.64505  32.864505      900.6\n9       Potatoes    46.59652   4.659652      121.6\n\n\n\ndemo_input$unit_contrib\n\n       food_name    energy     protein       carbs         fat    vitaminc\n1          Bread 10.695553 0.091220068 0.441277081 0.030216648 0.005701254\n2     Vegetables  3.790560 0.020648968 0.178466077 0.007374631 0.132743363\n3       Red meat  1.565330 0.014877102 0.049805951 0.008408797 0.206985770\n4  Milk, yoghurt  2.728863 0.007580175 0.134110787 0.004081633 0.198250729\n5           Fish  8.341837 0.172619048 0.013605442 0.139455782 0.042517007\n6         Cheese  6.086331 0.169784173 0.024460432 0.074820144 0.000000000\n7           Eggs  6.178862 0.130081301 0.004065041 0.105691057 0.000000000\n8 Fruit, berries  1.979745 0.035935969 0.055864097 0.011107481 0.000000000\n9       Potatoes 13.502304 0.216589862 0.048387097 0.241935484 0.000000000\n     calcium    ghge\n1 0.33637400 0.00107\n2 0.08849558 0.00037\n3 0.25873221 0.00103\n4 0.15160350 0.00072\n5 0.11054422 0.01294\n6 0.24460432 0.00311\n7 0.52845529 0.00215\n8 1.28062725 0.00143\n9 6.58986175 0.01030\n\n\n\ndemo_constraints &lt;- readRDS('data/demo_9foods_constraints.rda')\ndemo_constraints\n\n  tag_outcome total_contrib_raw total_contrib_std    std_coef constr_min_std\n1      energy       6002.791497         1460.2828   0.2432673      1314.2545\n2     protein         82.349152         1034.1940  12.5586475       930.7746\n3       carbs        153.317587         1108.5790   7.2306054       997.7211\n4         fat         49.280653          606.6639  12.3103864       545.9975\n5    vitaminc         86.965858          976.6934  11.2307682       879.0241\n6     calcium        914.751986          434.7877   0.4753067       391.3090\n7        ghge          3.404557          736.7069 216.3885105       663.0362\n  cosntr_max_std constr_min_raw constr_max_raw\n1      1460.2828    5402.512347    6002.791497\n2      1034.1940      74.114237      82.349152\n3      1108.5790     137.985828     153.317587\n4       606.6639      44.352588      49.280653\n5       976.6934      78.269272      86.965858\n6       434.7877     823.276788     914.751986\n7       736.7069       3.064101       3.404557"
  },
  {
    "objectID": "archive/x_litreview.html",
    "href": "archive/x_litreview.html",
    "title": "Literature review and article planning",
    "section": "",
    "text": "In order to write an article, it is important to have a good collection of organized literature review."
  },
  {
    "objectID": "archive/x_litreview.html#nutrition-x-sustainability",
    "href": "archive/x_litreview.html#nutrition-x-sustainability",
    "title": "Literature review and article planning",
    "section": "Nutrition x sustainability",
    "text": "Nutrition x sustainability"
  },
  {
    "objectID": "archive/x_litreview.html#implementation",
    "href": "archive/x_litreview.html#implementation",
    "title": "Literature review and article planning",
    "section": "Implementation",
    "text": "Implementation"
  },
  {
    "objectID": "archive/5_10foods.html",
    "href": "archive/5_10foods.html",
    "title": "Part 5: 10 foods",
    "section": "",
    "text": "Select 10 foods: bread, cheese, eggs, fish, fruit and berries, milk and yoghurt, potatoes, red meat, sugar and sweets, vegetables.\nlibrary(data.table)\nfd &lt;- read.csv('data/foods_0914.csv', sep = ',')\nsetDT(fd) # use data.table format\nfd\n\n              food intake energy protein   fat carbs sugar alcohol  ghge\n            &lt;char&gt;  &lt;num&gt;  &lt;num&gt;   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;   &lt;int&gt; &lt;num&gt;\n 1:          Bread  175.4 10.696   0.091 0.030 0.441 0.002       0 0.001\n 2:         Cheese   43.4 13.502   0.217 0.242 0.048 0.002       0 0.010\n 3:           Eggs   24.6  6.179   0.130 0.106 0.004 0.000       0 0.002\n 4:           Fish   69.5  6.086   0.170 0.075 0.024 0.006       0 0.003\n 5: Fruit, berries  171.5  2.729   0.008 0.004 0.134 0.029       0 0.001\n 6:  Milk, yoghurt  306.1  1.980   0.036 0.011 0.056 0.010       0 0.001\n 7:       Potatoes   67.8  3.791   0.021 0.007 0.178 0.000       0 0.000\n 8:       Red meat  117.6  8.342   0.173 0.139 0.014 0.000       0 0.013\n 9:  Sugar, sweets   16.9 17.988   0.053 0.178 0.609 0.444       0 0.004\n10:     Vegetables  154.6  1.565   0.015 0.008 0.050 0.005       0 0.001\n    intake_mean intake_lwr intake_upr\n          &lt;num&gt;      &lt;num&gt;      &lt;num&gt;\n 1:   188.31866  18.831866  407.77324\n 2:    46.59652   4.659652  122.39639\n 3:    26.41185   2.641185  101.99699\n 4:    74.61885   7.461885  267.87632\n 5:   184.13142  18.413142  480.13743\n 6:   328.64505  32.864505  966.28731\n 7:    72.79364   7.279364  218.48830\n 8:   122.50376  12.250376  328.75242\n 9:    18.14473   1.814473   69.78742\n10:   165.98669  16.598669  365.04187\n\ncontrib_pergram &lt;- fd[, .(energy, protein, fat, carbs, sugar, alcohol, ghge)]\ncontrib_pergram\n\n    energy protein   fat carbs sugar alcohol  ghge\n     &lt;num&gt;   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;   &lt;int&gt; &lt;num&gt;\n 1: 10.696   0.091 0.030 0.441 0.002       0 0.001\n 2: 13.502   0.217 0.242 0.048 0.002       0 0.010\n 3:  6.179   0.130 0.106 0.004 0.000       0 0.002\n 4:  6.086   0.170 0.075 0.024 0.006       0 0.003\n 5:  2.729   0.008 0.004 0.134 0.029       0 0.001\n 6:  1.980   0.036 0.011 0.056 0.010       0 0.001\n 7:  3.791   0.021 0.007 0.178 0.000       0 0.000\n 8:  8.342   0.173 0.139 0.014 0.000       0 0.013\n 9: 17.988   0.053 0.178 0.609 0.444       0 0.004\n10:  1.565   0.015 0.008 0.050 0.005       0 0.001\n\n# note: intake from the food.csv is slightly different from the new file\ncurrent_diet &lt;- fd$intake\ncurrent_diet\n\n [1] 175.4  43.4  24.6  69.5 171.5 306.1  67.8 117.6  16.9 154.6\n\n# 10 foods contribution (maximum)\nconst_max_10foods &lt;- t(as.matrix(current_diet)) %*% as.matrix(contrib_pergram)\nconst_max_10foods\n\n       energy protein    fat    carbs   sugar alcohol   ghge\n[1,] 5895.142 77.7671 48.704 153.0605 17.1657       0 3.0957\n\n# exclude sugar, alcohol\nconst_max_10foods &lt;- const_max_10foods[, c('energy', 'protein', 'fat', 'carbs', 'ghge')]\n\n\n# target constraint on energy and nutrients\n# set lower to be 0.9; upper remain the current max\nconst_lwrupr &lt;- rbind(const_max_10foods*0.9, const_max_10foods*1)\nrownames(const_lwrupr) &lt;- c('lwr', 'upr')\nconst_lwrupr &lt;- data.table(const_lwrupr)\nconst_lwrupr\n\n     energy  protein     fat    carbs    ghge\n      &lt;num&gt;    &lt;num&gt;   &lt;num&gt;    &lt;num&gt;   &lt;num&gt;\n1: 5305.628 69.99039 43.8336 137.7544 2.78613\n2: 5895.142 77.76710 48.7040 153.0605 3.09570"
  },
  {
    "objectID": "archive/5_10foods.html#constraints-for-3-foods",
    "href": "archive/5_10foods.html#constraints-for-3-foods",
    "title": "Part 5: 10 foods",
    "section": "Constraints for 3 foods",
    "text": "Constraints for 3 foods\nWe compute the constraints for 3 foods together. Note that the consumption for each of the 28 food groups are different, hence we can not use 3/28 times the total energy, protein…; we need to use a weighted average.\nFor example, the total energy for the 10 foods together should be within [5305, 5895]."
  },
  {
    "objectID": "archive/5_10foods.html#standardize-food-contribution-per-gram",
    "href": "archive/5_10foods.html#standardize-food-contribution-per-gram",
    "title": "Part 5: 10 foods",
    "section": "Standardize food contribution per gram",
    "text": "Standardize food contribution per gram\nSince the range of constraints for 5 categories differ hugely, it could affect the numeric evaluation. We want them to be on comparative scales.\nThe current solution is to standardize the contribution in each category (e.g. energy) by its original value divided by the standard deviation.\nSimilarly, the upper and lower limit of the constraints also need to be re-scaled. After rescaling, the target will be on a range of hundreds, rather than 3000 vs 1.8.\n\ncontrib_pergram &lt;- contrib_pergram[, c('energy', 'protein', 'fat', 'carbs', 'ghge')]\n\nsd_coef &lt;- apply(contrib_pergram, MARGIN = 2, sd)\n\ncontrib_pergram_std &lt;- sweep(contrib_pergram, MARGIN = 2, 1/sd_coef, FUN = '*')\ncontrib_pergram_std\n\n      energy   protein        fat      carbs      ghge\n1  1.9807223 1.1926698 0.35692934 2.14338903 0.2284823\n2  2.5003470 2.8440587 2.87923000 0.23329404 2.2848233\n3  1.1442486 1.7038140 1.26115033 0.01944117 0.4569647\n4  1.1270265 2.2280644 0.89232335 0.11664702 0.6854470\n5  0.5053657 0.1048501 0.04759058 0.65127921 0.2284823\n6  0.3666632 0.4718254 0.13087409 0.27217638 0.2284823\n7  0.7020305 0.2752315 0.08328351 0.86513208 0.0000000\n8  1.5448004 2.2673832 1.65377260 0.06804410 2.9702703\n9  3.3310800 0.6946318 2.11778074 2.95991819 0.9139293\n10 0.2898121 0.1965939 0.09518116 0.24301463 0.2284823\n\n# standardize constraint\n# test the previous constraint\nconst_lwrupr\n\n     energy  protein     fat    carbs    ghge\n      &lt;num&gt;    &lt;num&gt;   &lt;num&gt;    &lt;num&gt;   &lt;num&gt;\n1: 5305.628 69.99039 43.8336 137.7544 2.78613\n2: 5895.142 77.76710 48.7040 153.0605 3.09570\n\nconst_lwrupr_std &lt;- sweep(const_lwrupr, MARGIN = 2, 1/sd_coef, FUN = '*')\nconst_lwrupr_std\n\n     energy   protein      fat    carbs     ghge\n1  982.5146  917.3123 521.5166 669.5269 636.5815\n2 1091.6828 1019.2359 579.4629 743.9188 707.3128\n\n\nIn the future, different scaling factor can be applied; but it should be a positive number after scaling. Could try dividing the difference between max and min of this variable."
  },
  {
    "objectID": "archive/5_10foods.html#example-1-reduce-ghge-to-90",
    "href": "archive/5_10foods.html#example-1-reduce-ghge-to-90",
    "title": "Part 5: 10 foods",
    "section": "Example 1: reduce ghge to 90%",
    "text": "Example 1: reduce ghge to 90%\nFirst we reduce the GHGE to 90%.\n\ncstr &lt;- copy(const_lwrupr_std)\ncstr$ghge &lt;- cstr$ghge * 0.9 # reduce to 0.9\ncstr\n\n     energy   protein      fat    carbs     ghge\n1  982.5146  917.3123 521.5166 669.5269 572.9233\n2 1091.6828 1019.2359 579.4629 743.9188 636.5815\n\n# use the standardized food contribution per gram \n# contrib_pergram_std\n\n# define the inequality constraints\ninequalconstr &lt;- function (x) {\n  \n  cps &lt;- contrib_pergram_std\n  \n  constr &lt;- c(\n    # energy\n    - x[1]*cps$energy[1] - x[2]*cps$energy[2] - x[3]*cps$energy[3] - x[4]*cps$energy[4] - x[5]*cps$energy[5] - x[6]*cps$energy[6] -  x[7]*cps$energy[7] - x[8]*cps$energy[8] - x[9]*cps$energy[9]- x[10]*cps$energy[10] + cstr$energy[1], # lower\n    x[1]*cps$energy[1] + x[2]*cps$energy[2] + x[3]*cps$energy[3] + x[4]*cps$energy[4] + x[5]*cps$energy[5] + x[6]*cps$energy[6] + x[7]*cps$energy[7] + x[8]*cps$energy[8] + x[9]*cps$energy[9] + x[10]*cps$energy[10] - cstr$energy[2], # upper\n    \n    # protein\n\n    - x[1]*cps$protein[1] - x[2]*cps$protein[2] - x[3]*cps$protein[3] - x[4]*cps$protein[4] - x[5]*cps$protein[5] - x[6]*cps$protein[6] -  x[7]*cps$protein[7] - x[8]*cps$protein[8] - x[9]*cps$protein[9]- x[10]*cps$protein[10] + cstr$protein[1], # lower\n    x[1]*cps$protein[1] + x[2]*cps$protein[2] + x[3]*cps$protein[3] + x[4]*cps$protein[4] + x[5]*cps$protein[5] + x[6]*cps$protein[6] + x[7]*cps$protein[7] + x[8]*cps$protein[8] + x[9]*cps$protein[9] + x[10]*cps$protein[10] - cstr$protein[2], # upper\n    \n    # fat\n\n    - x[1]*cps$fat[1] - x[2]*cps$fat[2] - x[3]*cps$fat[3] - x[4]*cps$fat[4] - x[5]*cps$fat[5] - x[6]*cps$fat[6] -  x[7]*cps$fat[7] - x[8]*cps$fat[8] - x[9]*cps$fat[9]- x[10]*cps$fat[10] + cstr$fat[1], # lower\n    x[1]*cps$fat[1] + x[2]*cps$fat[2] + x[3]*cps$fat[3] + x[4]*cps$fat[4] + x[5]*cps$fat[5] + x[6]*cps$fat[6] + x[7]*cps$fat[7] + x[8]*cps$fat[8] + x[9]*cps$fat[9] + x[10]*cps$fat[10] - cstr$fat[2], # upper\n    \n    # carbs\n\n    - x[1]*cps$carbs[1] - x[2]*cps$carbs[2] - x[3]*cps$carbs[3] - x[4]*cps$carbs[4] - x[5]*cps$carbs[5] - x[6]*cps$carbs[6] -  x[7]*cps$carbs[7] - x[8]*cps$carbs[8] - x[9]*cps$carbs[9]- x[10]*cps$carbs[10] + cstr$carbs[1], # lower\n    x[1]*cps$carbs[1] + x[2]*cps$carbs[2] + x[3]*cps$carbs[3] + x[4]*cps$carbs[4] + x[5]*cps$carbs[5] + x[6]*cps$carbs[6] + x[7]*cps$carbs[7] + x[8]*cps$carbs[8] + x[9]*cps$carbs[9] + x[10]*cps$carbs[10] - cstr$carbs[2], # upper\n    \n    # ghge\n    - x[1]*cps$ghge[1] - x[2]*cps$ghge[2] - x[3]*cps$ghge[3] - x[4]*cps$ghge[4] - x[5]*cps$ghge[5] - x[6]*cps$ghge[6] -  x[7]*cps$ghge[7] - x[8]*cps$ghge[8] - x[9]*cps$ghge[9]- x[10]*cps$ghge[10] + cstr$ghge[1], # lower\n    x[1]*cps$ghge[1] + x[2]*cps$ghge[2] + x[3]*cps$ghge[3] + x[4]*cps$ghge[4] + x[5]*cps$ghge[5] + x[6]*cps$ghge[6] + x[7]*cps$ghge[7] + x[8]*cps$ghge[8] + x[9]*cps$ghge[9] + x[10]*cps$ghge[10] - cstr$ghge[2] # upper\n    \n  )\n  return (constr)\n}\n\nSet other parameters\n\n# Initial values\nx0 &lt;- fd$intake\n\n# lower and upper bounds of x (10 foods)\nlb &lt;- fd$intake_lwr\nub &lt;- fd$intake_upr\n\n\nopts &lt;- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 10 ))\n\n# run the algorithm\nres &lt;- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n)\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  10 \nNumber of equality constraints:    0 \nCurrent value of objective function:  333.453953531023 \nCurrent value of controls: 174.6512 34.47073 24.18368 66.96662 170.151 304.9251 67.96771 102.1279 15.35428 \n153.3486\n\n\nNow we print out the results in a more readable way\n\nres_diet &lt;- res$solution\n\n# print with the current diet, and change percentage\n# also print the boundary, in case it hit boundary\n\ndiet_result &lt;- data.frame(\n  name = fd$food, # food names\n  current = current_diet, \n  new = res_diet, \n  percent_change = round((res_diet - current_diet)/current_diet, 3),\n  lower_limit = lb, \n  upper_limit = ub\n)\ndiet_result\n\n             name current       new percent_change lower_limit upper_limit\n1           Bread   175.4 174.65125         -0.004   18.831866   407.77324\n2          Cheese    43.4  34.47073         -0.206    4.659652   122.39639\n3            Eggs    24.6  24.18368         -0.017    2.641185   101.99699\n4            Fish    69.5  66.96662         -0.036    7.461885   267.87632\n5  Fruit, berries   171.5 170.15104         -0.008   18.413142   480.13743\n6   Milk, yoghurt   306.1 304.92508         -0.004   32.864505   966.28731\n7        Potatoes    67.8  67.96771          0.002    7.279364   218.48830\n8        Red meat   117.6 102.12788         -0.132   12.250376   328.75242\n9   Sugar, sweets    16.9  15.35428         -0.091    1.814473    69.78742\n10     Vegetables   154.6 153.34856         -0.008   16.598669   365.04187\n\n\n\n# verify whether it falls within \noutput_newdiet &lt;- t(as.matrix(res_diet)) %*% as.matrix(contrib_pergram_std)\n# output_newdiet\n\n# cstr\nconst_result &lt;- t(rbind(output_newdiet, cstr))\ncolnames(const_result) &lt;- c('new_diet','const_lwr', 'const_upr')\nconst_result &lt;- data.table(const_result)\n# conditions\nconst_result[, is_ok := 'Yes']\nconst_result[new_diet &lt; const_lwr, is_ok := 'beyond lower']\nconst_result[new_diet &gt; const_upr, is_ok := 'beyond upper']\n\n# relative difference (since we rescaled the targets)\nconst_result[, relative_dev := 0]\nconst_result[is_ok == 'beyond lower', relative_dev := round((new_diet - const_lwr)/const_lwr, 3)]\nconst_result[is_ok == 'beyond upper', relative_dev := round((new_diet - const_upr)/const_upr, 3)]\n\n# print out\nconst_result\n\nIndex: &lt;is_ok&gt;\n    new_diet const_lwr const_upr  is_ok relative_dev\n       &lt;num&gt;     &lt;num&gt;     &lt;num&gt; &lt;char&gt;        &lt;num&gt;\n1: 1034.1342  982.5146 1091.6828    Yes            0\n2:  949.5431  917.3123 1019.2359    Yes            0\n3:  521.5166  521.5166  579.4629    Yes            0\n4:  732.9418  669.5269  743.9188    Yes            0\n5:  636.5815  572.9233  636.5815    Yes            0\n\n\nYou should always check how much it actually deviates from the target constraints."
  },
  {
    "objectID": "archive/5_10foods.html#example-2-reduce-ghge-to-85",
    "href": "archive/5_10foods.html#example-2-reduce-ghge-to-85",
    "title": "Part 5: 10 foods",
    "section": "Example 2: reduce ghge to 85%",
    "text": "Example 2: reduce ghge to 85%\n\ncstr &lt;- copy(const_lwrupr_std) # this line is important: it keeps a copy of the original values\ncstr$ghge &lt;- cstr$ghge * 0.85 # reduce to 0.85\ncstr\n\n     energy   protein      fat    carbs     ghge\n1  982.5146  917.3123 521.5166 669.5269 541.0943\n2 1091.6828 1019.2359 579.4629 743.9188 601.2158\n\n# use the standardized food contribution per gram \n# contrib_pergram_std\n\n# define the inequality constraints\ninequalconstr &lt;- function (x) {\n  \n  cps &lt;- contrib_pergram_std\n  \n  constr &lt;- c(\n    # energy\n    - x[1]*cps$energy[1] - x[2]*cps$energy[2] - x[3]*cps$energy[3] - x[4]*cps$energy[4] - x[5]*cps$energy[5] - x[6]*cps$energy[6] -  x[7]*cps$energy[7] - x[8]*cps$energy[8] - x[9]*cps$energy[9]- x[10]*cps$energy[10] + cstr$energy[1], # lower\n    x[1]*cps$energy[1] + x[2]*cps$energy[2] + x[3]*cps$energy[3] + x[4]*cps$energy[4] + x[5]*cps$energy[5] + x[6]*cps$energy[6] + x[7]*cps$energy[7] + x[8]*cps$energy[8] + x[9]*cps$energy[9] + x[10]*cps$energy[10] - cstr$energy[2], # upper\n    \n    # protein\n\n    - x[1]*cps$protein[1] - x[2]*cps$protein[2] - x[3]*cps$protein[3] - x[4]*cps$protein[4] - x[5]*cps$protein[5] - x[6]*cps$protein[6] -  x[7]*cps$protein[7] - x[8]*cps$protein[8] - x[9]*cps$protein[9]- x[10]*cps$protein[10] + cstr$protein[1], # lower\n    x[1]*cps$protein[1] + x[2]*cps$protein[2] + x[3]*cps$protein[3] + x[4]*cps$protein[4] + x[5]*cps$protein[5] + x[6]*cps$protein[6] + x[7]*cps$protein[7] + x[8]*cps$protein[8] + x[9]*cps$protein[9] + x[10]*cps$protein[10] - cstr$protein[2], # upper\n    \n    # fat\n\n    - x[1]*cps$fat[1] - x[2]*cps$fat[2] - x[3]*cps$fat[3] - x[4]*cps$fat[4] - x[5]*cps$fat[5] - x[6]*cps$fat[6] -  x[7]*cps$fat[7] - x[8]*cps$fat[8] - x[9]*cps$fat[9]- x[10]*cps$fat[10] + cstr$fat[1], # lower\n    x[1]*cps$fat[1] + x[2]*cps$fat[2] + x[3]*cps$fat[3] + x[4]*cps$fat[4] + x[5]*cps$fat[5] + x[6]*cps$fat[6] + x[7]*cps$fat[7] + x[8]*cps$fat[8] + x[9]*cps$fat[9] + x[10]*cps$fat[10] - cstr$fat[2], # upper\n    \n    # carbs\n\n    - x[1]*cps$carbs[1] - x[2]*cps$carbs[2] - x[3]*cps$carbs[3] - x[4]*cps$carbs[4] - x[5]*cps$carbs[5] - x[6]*cps$carbs[6] -  x[7]*cps$carbs[7] - x[8]*cps$carbs[8] - x[9]*cps$carbs[9]- x[10]*cps$carbs[10] + cstr$carbs[1], # lower\n    x[1]*cps$carbs[1] + x[2]*cps$carbs[2] + x[3]*cps$carbs[3] + x[4]*cps$carbs[4] + x[5]*cps$carbs[5] + x[6]*cps$carbs[6] + x[7]*cps$carbs[7] + x[8]*cps$carbs[8] + x[9]*cps$carbs[9] + x[10]*cps$carbs[10] - cstr$carbs[2], # upper\n    \n    # ghge\n    - x[1]*cps$ghge[1] - x[2]*cps$ghge[2] - x[3]*cps$ghge[3] - x[4]*cps$ghge[4] - x[5]*cps$ghge[5] - x[6]*cps$ghge[6] -  x[7]*cps$ghge[7] - x[8]*cps$ghge[8] - x[9]*cps$ghge[9]- x[10]*cps$ghge[10] + cstr$ghge[1], # lower\n    x[1]*cps$ghge[1] + x[2]*cps$ghge[2] + x[3]*cps$ghge[3] + x[4]*cps$ghge[4] + x[5]*cps$ghge[5] + x[6]*cps$ghge[6] + x[7]*cps$ghge[7] + x[8]*cps$ghge[8] + x[9]*cps$ghge[9] + x[10]*cps$ghge[10] - cstr$ghge[2] # upper\n    \n  )\n  return (constr)\n}\n\n# Initial values\nx0 &lt;- fd$intake\n\n# lower and upper bounds of x (10 foods)\nlb &lt;- fd$intake_lwr\nub &lt;- fd$intake_upr\n\n\nopts &lt;- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 10 ))\n\n# run the algorithm\nres &lt;- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n)\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  10 \nNumber of equality constraints:    0 \nCurrent value of objective function:  1130.07723624611 \nCurrent value of controls: 172.9834 36.42209 30.73556 67.67675 167.417 303.3886 67.60507 86.28209 21.40758 \n151.5364\n\n\nNow we check the results for the second problem.\n\n\n             name current       new percent_change lower_limit upper_limit\n1           Bread   175.4 172.98342         -0.014   18.831866   407.77324\n2          Cheese    43.4  36.42209         -0.161    4.659652   122.39639\n3            Eggs    24.6  30.73556          0.249    2.641185   101.99699\n4            Fish    69.5  67.67675         -0.026    7.461885   267.87632\n5  Fruit, berries   171.5 167.41696         -0.024   18.413142   480.13743\n6   Milk, yoghurt   306.1 303.38857         -0.009   32.864505   966.28731\n7        Potatoes    67.8  67.60507         -0.003    7.279364   218.48830\n8        Red meat   117.6  86.28209         -0.266   12.250376   328.75242\n9   Sugar, sweets    16.9  21.40758          0.267    1.814473    69.78742\n10     Vegetables   154.6 151.53638         -0.020   16.598669   365.04187\n\n\n\n\nIndex: &lt;is_ok&gt;\n    new_diet const_lwr const_upr  is_ok relative_dev\n       &lt;num&gt;     &lt;num&gt;     &lt;num&gt; &lt;char&gt;        &lt;num&gt;\n1: 1036.9677  982.5146 1091.6828    Yes            0\n2:  932.6577  917.3123 1019.2359    Yes            0\n3:  521.5166  521.5166  579.4629    Yes            0\n4:  743.9186  669.5269  743.9188    Yes            0\n5:  601.2158  541.0943  601.2158    Yes            0"
  },
  {
    "objectID": "archive/x_pkgdev_log.html",
    "href": "archive/x_pkgdev_log.html",
    "title": "Package development log",
    "section": "",
    "text": "Flowchart for the implementation."
  },
  {
    "objectID": "archive/x_pkgdev_log.html#overview",
    "href": "archive/x_pkgdev_log.html#overview",
    "title": "Package development log",
    "section": "Overview",
    "text": "Overview\nThe core functionalities contain the following steps:\n\nprovide food data\ncompute inequality constraints (based on current total contribution from the existing diet)\nalgorithm to find the new diet\nresult processing and presentation\n\nThe existing implementation is fixed: not functionalized. The target implementation should allow flexibility at each step.\n\nProvide food data\n\n\nCompute inequality constraints\nThe default inequality constraints are based on the current total contribution:\n\ncurrent diet (d)\ncontrib per unit for each target outcome (e.g. ghge, energy)\noption to scale / standardize\n\nInequality constraints depend on the above, plus the coefficients to set upper and lower. Probably a good idea to split upper and lower.\n\n\nOptimization algorithm\nThis step requires better functional programming: need to wrap the functions to generate multiple inequality formulae.\n\n\nOutput processing"
  },
  {
    "objectID": "archive/3_small_demo.html",
    "href": "archive/3_small_demo.html",
    "title": "Part 3: A simple problem with 3 foods and 3 constraints",
    "section": "",
    "text": "We document the optimization procedure with nloptr using a small example of 3 foods, and 3 constraints (energy, protein, ghge).\nfoods &lt;- read.csv('data/foods.csv', sep = ',')\ndata.table::setDT(foods) # use data.table format\n\n# we only take 3 foods\nfd &lt;- foods[food %in% c('Bread', 'Vegetables', 'Red meat')]\nfd\n\n         food intake energy protein   fat carbs sugar alcohol  ghge\n       &lt;char&gt;  &lt;num&gt;  &lt;num&gt;   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;   &lt;num&gt; &lt;num&gt;\n1:      Bread  175.4 10.696   0.091 0.030 0.441 0.002       0 0.001\n2: Vegetables  154.6  1.565   0.015 0.008 0.050 0.005       0 0.001\n3:   Red meat  117.6  8.342   0.173 0.139 0.014 0.000       0 0.013"
  },
  {
    "objectID": "archive/3_small_demo.html#constraints-for-3-foods",
    "href": "archive/3_small_demo.html#constraints-for-3-foods",
    "title": "Part 3: A simple problem with 3 foods and 3 constraints",
    "section": "Constraints for 3 foods",
    "text": "Constraints for 3 foods\nWe compute the constraints for 3 foods together. Note that the consumption for each of the 28 food groups are different, hence we can not use 3/28 times the total energy, protein…; we need to use a weighted average.\nThe cosntraints can be set to any positive number that make sense.\n\n# original constraint for all foods (maximum)\nconst_max_allfoods &lt;- c(9314.3, 98.2, 85.8, 234.7, 39.2, 8.6, 3.8)\n\n# 3 foods contribution (maximum)\nconst_max_3foods &lt;- t(as.matrix(fd$intake)) %*% as.matrix(fd[, .(energy, protein, fat, carbs, sugar, alcohol, ghge)])\nconst_max_3foods\n\n       energy protein     fat   carbs  sugar alcohol   ghge\n[1,] 3099.047 38.6252 22.8452 86.7278 1.1238       0 1.8588\n\n\nIn the optimization problem, we want to have a range (lower, upper) for the metrics. We can assume that the lower range is 90% of the maximum.\n\nc3foods &lt;- rbind(const_max_3foods*0.9, const_max_3foods*1)\nrownames(c3foods) &lt;- c('lwr', 'upr')\nc3foods &lt;- data.frame(c3foods)\nc3foods\n\n      energy  protein      fat    carbs   sugar alcohol    ghge\nlwr 2789.142 34.76268 20.56068 78.05502 1.01142       0 1.67292\nupr 3099.047 38.62520 22.84520 86.72780 1.12380       0 1.85880\n\n\nFor example, the total energy for the 3 foods together should be within [2789.14, 3099.05]."
  },
  {
    "objectID": "archive/3_small_demo.html#optimization",
    "href": "archive/3_small_demo.html#optimization",
    "title": "Part 3: A simple problem with 3 foods and 3 constraints",
    "section": "Optimization",
    "text": "Optimization\nNow we are going to solve the optimization problem using nloptr.\nThere are a few components that need to be specified:\n\nobjective function (as a function of x)\nconstraint functions\ninitial values\noptions\n\n\nObjective function\nThe objective is to minimize the following function:\n\\((x_1 - X_1)^2 + (x_2 - X_2)^2 + (x_3 - X_3)^2\\) where\n\\(x_1, x_2, x_3\\) are the target diet (grams or other units) we want to find, these three are unknown.\n\\(X_1, X_2, X_3\\) are the current diet for bread, vegetables and red meat. We have these values in the data: 175.4, 154.6, 117.6. In the function we use fd$intake to programmatically extract the values.\n\nfd$intake\n\n[1] 175.4 154.6 117.6\n\n# define objective \nobjective &lt;- function(x)\n{\n  return ( (x[1]- fd$intake[1])^2 + \n             (x[2]- fd$intake[2])^2 + \n             (x[3]- fd$intake[3])^2)\n}\n\n\n\nConstraints\nNow we define the inequality constraints. For this demo, we only include 3 metrics (energy, protein, ghge) for simplicity.\n\n# select the metrics we want to keep \nc3 &lt;- c3foods[, c('energy', 'protein', 'ghge')]\nc3\n\n      energy  protein    ghge\nlwr 2789.142 34.76268 1.67292\nupr 3099.047 38.62520 1.85880\n\n\nThe inequality constraints need to be reformulated for nloptr to work. More specifically, nloptr optimizes a function \\(f(x)\\) subject to a set of equality and inequality constraints. For the inequality constraints, they need to be the form of \\(g(x) &lt;= 0\\).\nWe write out our own constraints for energy:\n\\(x_1 e_1 + x_2e_2 + x_3e_3 &gt;= E_{lower}, x_1 e_1 + x_2e_2 + x_3e_3 &lt;= E_{upper}\\)\nThese two need to be re-written to be in the format of \\(g(x) &lt;= 0\\).\n\\(-(x_1 e_1 + x_2e_2 + x_3e_3)+E_{lower} &lt;= 0\\)\n\\(x_1 e_1 + x_2e_2 + x_3e_3 - E_{upper} &lt;= 0\\)\nThe constraints for protein, ghge can be written in similar ways.\n\n# define the inequality constraints\ninequalconstr &lt;- function (x) {\n  constr &lt;- c(\n    # energy\n    - x[1]*fd$energy[1] - x[2]*fd$energy[2] - x[3]*fd$energy[3] + c3$energy[1], # lower\n    x[1]*fd$energy[1] + x[2]*fd$energy[2] + x[3]*fd$energy[3] - c3$energy[2], # upper\n    \n    # protein\n    - x[1]*fd$protein[1] - x[2]*fd$protein[2] - x[3]*fd$protein[3] + c3$protein[1],\n    x[1]*fd$protein[1] + x[2]*fd$protein[2] + x[3]*fd$protein[3] - c3$protein[2],\n\n    # ghge\n    - x[1]*fd$ghge[1] - x[2]*fd$ghge[2] - x[3]*fd$ghge[3]+ c3$ghge[1],\n    x[1]*fd$ghge[1] + x[2]*fd$ghge[2] + x[3]*fd$ghge[3] - c3$ghge[2]\n  )\n  return (constr)\n}\n\n\n\nOther options\nWe do not need to explicitly specify the non-negativity constraints for \\(x\\) inside the function. They are specified outside the function as a set of lower and upper bounds. You can set these range to be anything that make sense; for now we make it close to the current diet.\nInitial values are the values you tell the program to start the search. This is also up to you; sometimes initial values can have a large impact on the final results when the optimization problem is difficult (e.g. has multiple local optima). We can start close to the values of the current diet.\n\n# lower and upper bounds of x (3 foods)\nlb &lt;- c(160, 140, 100)\nub &lt;- c(180, 160, 120)\n\n# Initial values\n# (try different ones!)\nx0 &lt;- c(175, 150, 110) \n\nOptions should also be supplied to the program as a named list. These are specifications for the algorithm, tolerance and maximum evaluation. For more details please check the function manual.\nPay attention to the last line here: the size inside rep() need to match the number of inequality constraints. In this example it should be 6.\n\nopts &lt;- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 6 ))\n\nNow we run the optimization by calling nloptr from nloptr package. If you have loaded the package before, you don’t need the :: between the two.\nWe print the result and check the optimized values.\n\n# run the algorithm\nres &lt;- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n  )\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 4 ( NLOPT_XTOL_REACHED: Optimization stopped because \nxtol_rel or xtol_abs (above) was reached. )\n\nNumber of Iterations....: 36652 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  6 \nNumber of equality constraints:    0 \nOptimal value of objective function:  6.94702467573832e-26 \nOptimal value of controls: 175.4 154.6 117.6\n\n\nThe optimal values are 175.4, 154.6, 117.6. These are the same as the current diet.\n\n\n\n\n\n\nNote\n\n\n\nThis result is not surprising; our current diet on the three foods already satisfies the constraints, and it is the closest to the current diet (\\((x_1 - X_1)^2 +(x_2 - X_2)^2 + (x_3 - X_3)^2 = 0\\)) when \\(x_1 = X_1, x_2 = X_2, x_3 = X_3\\)."
  },
  {
    "objectID": "archive/3_small_demo.html#reduce-ghge-to-80",
    "href": "archive/3_small_demo.html#reduce-ghge-to-80",
    "title": "Part 3: A simple problem with 3 foods and 3 constraints",
    "section": "Reduce ghge to 80%",
    "text": "Reduce ghge to 80%\nWe can try to modify the constraint values to see if the diet will be different.\nFor example, we can limit ghge. The current upper and lower range are [1.673, 1.859], let us try to limit it to [1.338, 1.487], which is 80% of the original values.\n\n# c3foods &lt;- rbind(const_max_3foods*0.9, const_max_3foods*1)\n# rownames(c3foods) &lt;- c('lwr', 'upr')\n# c3foods &lt;- data.frame(c3foods)\nc3\n\n      energy  protein    ghge\nlwr 2789.142 34.76268 1.67292\nupr 3099.047 38.62520 1.85880\n\nc3_alt &lt;- c3\nc3_alt$ghge &lt;- c3_alt$ghge * 0.8 # you can try different limits\nc3_alt\n\n      energy  protein     ghge\nlwr 2789.142 34.76268 1.338336\nupr 3099.047 38.62520 1.487040\n\n\nWe keep the objective function and options same as before; but we modify the inequality constraints.\n\n# define the inequality constraints\n# instead of c3, we use c3_alt\n\ninequalconstr_alt &lt;- function (x) {\n  constr &lt;- c(\n    # energy\n    - x[1]*fd$energy[1] - x[2]*fd$energy[2] - x[3]*fd$energy[3] + c3_alt$energy[1], # lower\n    x[1]*fd$energy[1] + x[2]*fd$energy[2] + x[3]*fd$energy[3] - c3_alt$energy[2], # upper\n    \n    # protein\n    - x[1]*fd$protein[1] - x[2]*fd$protein[2] - x[3]*fd$protein[3] + c3_alt$protein[1],\n    x[1]*fd$protein[1] + x[2]*fd$protein[2] + x[3]*fd$protein[3] - c3_alt$protein[2],\n\n    # ghge\n    - x[1]*fd$ghge[1] - x[2]*fd$ghge[2] - x[3]*fd$ghge[3]+ c3_alt$ghge[1], # new values\n    x[1]*fd$ghge[1] + x[2]*fd$ghge[2] + x[3]*fd$ghge[3] - c3_alt$ghge[2] # new values\n  )\n  return (constr)\n}\n\nNow we run the optimization again with the new constraint, inequalconstr_alt.\n\n# run the algorithm\nres_alt &lt;- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr_alt, # inequality constraint (NEW)\n  opts        = opts       # options\n  )\n\nprint(res_alt)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr_alt, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  6 \nNumber of equality constraints:    0 \nCurrent value of objective function:  566.401428463747 \nCurrent value of controls: 168.806 140 100\n\n\nThe new results are 168.806, 140, 100.\n\n\n\n\n\n\nCompare the two runs\n\n\n\n\nBread: 175.4 -&gt; 168.8 (3.7% reduction)\nVegetables: 154.6 -&gt; 140 (9.4% reduction)\nRed meat: 117.6 -&gt; 100 (15.0% reduction)\n\nThis makes sense, as red meat is the largest contributor for ghge.\n\n\nWhat we have shown here is a very crude demonstration of how to construct the optimization problem, and a sanity check of the results. A lot more can be tried out."
  },
  {
    "objectID": "archive/4_troubleshoot_3foods.html",
    "href": "archive/4_troubleshoot_3foods.html",
    "title": "Part 4: Troubleshoot part 3",
    "section": "",
    "text": "Previously we have coded the algorithm with nloptr function. A few issues have popped up: some diet do not fall within the constraints. Possible reasons:\nSteps taken so far (2023.08.27)\nlibrary(data.table)\nfoods &lt;- read.csv('data/foods.csv', sep = ',')\nsetDT(foods) # use data.table format\n\n# start with 3 foods\nfd &lt;- foods[food %in% c('Bread', 'Vegetables', 'Red meat')]\nfd\n\n         food intake energy protein   fat carbs sugar alcohol  ghge\n       &lt;char&gt;  &lt;num&gt;  &lt;num&gt;   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;   &lt;num&gt; &lt;num&gt;\n1:      Bread  175.4 10.696   0.091 0.030 0.441 0.002       0 0.001\n2: Vegetables  154.6  1.565   0.015 0.008 0.050 0.005       0 0.001\n3:   Red meat  117.6  8.342   0.173 0.139 0.014 0.000       0 0.013\n\n# split current diet (grams of intake) and contribution per gram\ncurrent_diet &lt;- fd$intake\ncurrent_diet\n\n[1] 175.4 154.6 117.6\n\ncontrib_pergram &lt;- fd[, .(energy, protein, fat, carbs, sugar, alcohol, ghge)]\ncontrib_pergram\n\n   energy protein   fat carbs sugar alcohol  ghge\n    &lt;num&gt;   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;   &lt;num&gt; &lt;num&gt;\n1: 10.696   0.091 0.030 0.441 0.002       0 0.001\n2:  1.565   0.015 0.008 0.050 0.005       0 0.001\n3:  8.342   0.173 0.139 0.014 0.000       0 0.013"
  },
  {
    "objectID": "archive/4_troubleshoot_3foods.html#constraints-for-3-foods",
    "href": "archive/4_troubleshoot_3foods.html#constraints-for-3-foods",
    "title": "Part 4: Troubleshoot part 3",
    "section": "Constraints for 3 foods",
    "text": "Constraints for 3 foods\nWe compute the constraints for 3 foods together. Note that the consumption for each of the 28 food groups are different, hence we can not use 3/28 times the total energy, protein…; we need to use a weighted average.\nThe cosntraints can be set to any positive number that make sense. In the optimization problem, we want to have a range (lower, upper) for the metrics. We can assume that the lower range is 90% of the maximum.\n\n# original constraint for all foods (maximum)\nconst_max_allfoods &lt;- c(9314.3, 98.2, 85.8, 234.7, 39.2, 8.6, 3.8)\n\n# 3 foods contribution (maximum)\nconst_max_3foods &lt;- t(as.matrix(current_diet)) %*% as.matrix(contrib_pergram)\nconst_max_3foods\n\n       energy protein     fat   carbs  sugar alcohol   ghge\n[1,] 3099.047 38.6252 22.8452 86.7278 1.1238       0 1.8588\n\n# exclude sugar, alcohol\nconst_max_3foods &lt;- const_max_3foods[, c('energy', 'protein', 'fat', 'carbs', 'ghge')]\n\n# range of target: 0.9-1 of the maximum\n# this is one thing that we could adjust: hard threshould to soft\nconst_lwrupr &lt;- rbind(const_max_3foods*0.9, const_max_3foods*1)\nrownames(const_lwrupr) &lt;- c('lwr', 'upr')\nconst_lwrupr &lt;- data.table(const_lwrupr)\nconst_lwrupr\n\n     energy  protein      fat    carbs    ghge\n      &lt;num&gt;    &lt;num&gt;    &lt;num&gt;    &lt;num&gt;   &lt;num&gt;\n1: 2789.142 34.76268 20.56068 78.05502 1.67292\n2: 3099.047 38.62520 22.84520 86.72780 1.85880\n\n\nFor example, the total energy for the 3 foods together should be within [2789.14, 3099.05]."
  },
  {
    "objectID": "archive/4_troubleshoot_3foods.html#standardize-food-contribution-per-gram",
    "href": "archive/4_troubleshoot_3foods.html#standardize-food-contribution-per-gram",
    "title": "Part 4: Troubleshoot part 3",
    "section": "Standardize food contribution per gram",
    "text": "Standardize food contribution per gram\nSince the range of constraints for 5 categories differ hugely, it could affect the numeric evaluation. We want them to be on comparative scales.\nThe current solution is to standardize the contribution in each category (e.g. energy) by its original value divided by the standard deviation. For example,\n\nthe contribution of energy per food becomes (2.25, 0.33, 1.76) rather than (10.69, 1.56, 8.34)\nthe contribution of ghge per food becomes (0.14, 0.14, 1.87) rather than (0.001, 0.001, 0.013)\n\nSimilarly, the upper and lower limit of the constraints also need to be re-scaled. After rescaling, the target will be on a range of hundreds, rather than 3000 vs 1.8.\n\n# find sd for each category: energy, protein.. ghge\n# divide by these coef\ncontrib_pergram &lt;- contrib_pergram[, c('energy', 'protein', 'fat', 'carbs', 'ghge')]\ncontrib_pergram\n\n   energy protein   fat carbs  ghge\n    &lt;num&gt;   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;\n1: 10.696   0.091 0.030 0.441 0.001\n2:  1.565   0.015 0.008 0.050 0.001\n3:  8.342   0.173 0.139 0.014 0.013\n\nsd_coef &lt;- apply(contrib_pergram, MARGIN = 2, sd)\n\ncontrib_pergram_std &lt;- sweep(contrib_pergram, MARGIN = 2, 1/sd_coef, FUN = '*')\ncontrib_pergram_std\n\n     energy   protein       fat     carbs      ghge\n1 2.2562170 1.1516220 0.4276560 1.8621635 0.1443376\n2 0.3301215 0.1898278 0.1140416 0.2111296 0.1443376\n3 1.7596637 2.1893473 1.9814728 0.0591163 1.8763884\n\n# standardize constraint\n# test the previous constraint\nconst_lwrupr\n\n     energy  protein      fat    carbs    ghge\n      &lt;num&gt;    &lt;num&gt;    &lt;num&gt;    &lt;num&gt;   &lt;num&gt;\n1: 2789.142 34.76268 20.56068 78.05502 1.67292\n2: 3099.047 38.62520 22.84520 86.72780 1.85880\n\nconst_lwrupr_std &lt;- sweep(const_lwrupr, MARGIN = 2, 1/sd_coef, FUN = '*')\nconst_lwrupr_std\n\n    energy  protein      fat    carbs     ghge\n1 588.3423 439.9282 293.0966 329.5946 241.4652\n2 653.7137 488.8091 325.6629 366.2162 268.2947\n\n\nIn the future, different scaling factor can be applied; but it should be a positive number after scaling. Could try dividing the difference between max and min of this variable."
  },
  {
    "objectID": "archive/4_troubleshoot_3foods.html#example-1-reduce-ghge-to-90",
    "href": "archive/4_troubleshoot_3foods.html#example-1-reduce-ghge-to-90",
    "title": "Part 4: Troubleshoot part 3",
    "section": "Example 1: reduce ghge to 90%",
    "text": "Example 1: reduce ghge to 90%\nFirst we reduce the GHGE to 90%. (This is feasible, in contrast to the 80% reduction)\n\ncstr &lt;- copy(const_lwrupr_std) # this line is important: it keeps a copy of the original values\ncstr$ghge &lt;- cstr$ghge * 0.9 # reduce to 0.9\ncstr\n\n    energy  protein      fat    carbs     ghge\n1 588.3423 439.9282 293.0966 329.5946 217.3187\n2 653.7137 488.8091 325.6629 366.2162 241.4652\n\n# use the standardized food contribution per gram \n# contrib_pergram_std\n\n# define the inequality constraints\ninequalconstr &lt;- function (x) {\n  \n  cps &lt;- contrib_pergram_std # call the values\n  # cstr is used as the last item in each equation\n  \n  constr &lt;- c(\n    # energy\n    - x[1]*cps$energy[1] - x[2]*cps$energy[2] - x[3]*cps$energy[3] + cstr$energy[1], # lower\n    x[1]*cps$energy[1] + x[2]*cps$energy[2] + x[3]*cps$energy[3] - cstr$energy[2], # upper\n    \n    # protein\n    - x[1]*cps$protein[1] - x[2]*cps$protein[2] - x[3]*cps$protein[3] + cstr$protein[1],\n    x[1]*cps$protein[1] + x[2]*cps$protein[2] + x[3]*cps$protein[3] - cstr$protein[2],\n    \n    # fat\n    - x[1]*cps$fat[1] - x[2]*cps$fat[2] - x[3]*cps$fat[3]+ cstr$fat[1],\n    x[1]*cps$fat[1] + x[2]*cps$fat[2] + x[3]*cps$fat[3] - cstr$fat[2],\n\n    # carbs\n    - x[1]*cps$carbs[1] - x[2]*cps$carbs[2] - x[3]*cps$carbs[3]+ cstr$carbs[1],\n    x[1]*cps$carbs[1] + x[2]*cps$carbs[2] + x[3]*cps$carbs[3] - cstr$carbs[2],\n    \n    # ghge\n    - x[1]*cps$ghge[1] - x[2]*cps$ghge[2] - x[3]*cps$ghge[3]+ cstr$ghge[1],\n    x[1]*cps$ghge[1] + x[2]*cps$ghge[2] + x[3]*cps$ghge[3] - cstr$ghge[2]\n  )\n  return (constr)\n}\n\nSet other parameters (this part is unchanged, apart from the number of constraints)\n\n# lower and upper bounds of x (3 foods)\nlb &lt;- c(160, 140, 100)\nub &lt;- c(180, 160, 120)\n\n# Initial values\n# (try different ones!)\nx0 &lt;- c(175, 150, 110)\n\nopts &lt;- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 10 )) # match number of const\n\n# run the algorithm\nres &lt;- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n)\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  10 \nNumber of equality constraints:    0 \nCurrent value of objective function:  202.054848606764 \nCurrent value of controls: 174.3086 153.5102 103.4693\n\n\nNow we print out the results in a more readable way\n\nres_diet &lt;- res$solution\n\n# print with the current diet, and change percentage\n# also print the boundary, in case it hit boundary\n\ndiet_result &lt;- data.frame(\n  name = c('Bread', 'Vegetables', 'Red meat'),\n  current = current_diet, \n  new = res_diet, \n  percent_change = round((res_diet - current_diet)/current_diet, 3),\n  lower_limit = lb, \n  upper_limit = ub\n)\ndiet_result\n\n        name current      new percent_change lower_limit upper_limit\n1      Bread   175.4 174.3086         -0.006         160         180\n2 Vegetables   154.6 153.5102         -0.007         140         160\n3   Red meat   117.6 103.4693         -0.120         100         120\n\n\n\n# verify whether it falls within \noutput_newdiet &lt;- t(as.matrix(res_diet)) %*% as.matrix(contrib_pergram_std)\n# output_newdiet\n\n# cstr\nconst_result &lt;- t(rbind(output_newdiet, cstr))\ncolnames(const_result) &lt;- c('new_diet','const_lwr', 'const_upr')\nconst_result &lt;- data.table(const_result)\n# conditions\nconst_result[, is_ok := 'Yes']\nconst_result[new_diet &lt; const_lwr, is_ok := 'beyond lower']\nconst_result[new_diet &gt; const_upr, is_ok := 'beyond upper']\n\n# relative difference (since we rescaled the targets)\nconst_result[, relative_dev := 0]\nconst_result[is_ok == 'beyond lower', relative_dev := round((new_diet - const_lwr)/const_lwr, 3)]\nconst_result[is_ok == 'beyond upper', relative_dev := round((new_diet - const_upr)/const_upr, 3)]\n\n# print out\nconst_result\n\nIndex: &lt;is_ok&gt;\n   new_diet const_lwr const_upr  is_ok relative_dev\n      &lt;num&gt;     &lt;num&gt;     &lt;num&gt; &lt;char&gt;        &lt;num&gt;\n1: 626.0262  588.3423  653.7137    Yes            0\n2: 456.4084  439.9282  488.8091    Yes            0\n3: 297.0723  293.0966  325.6629    Yes            0\n4: 363.1183  329.5946  366.2162    Yes            0\n5: 241.4652  217.3187  241.4652    Yes            0\n\n\nYou should always check how much it actually deviates from the target constraints."
  },
  {
    "objectID": "archive/4_troubleshoot_3foods.html#example-2-reduce-ghge-to-85",
    "href": "archive/4_troubleshoot_3foods.html#example-2-reduce-ghge-to-85",
    "title": "Part 4: Troubleshoot part 3",
    "section": "Example 2: reduce ghge to 85%",
    "text": "Example 2: reduce ghge to 85%\nThis is one example where the optimal constraints can not be reached. You’ll see that the boundaries that we set in the algorithm have been reached; suggesting that if we modify these parameters, the solution could still be found.\nBe careful with HOW MUCH it deviates from the target!\n\ncstr &lt;- copy(const_lwrupr_std) # this line is important: it keeps a copy of the original values\ncstr$ghge &lt;- cstr$ghge * 0.85 # reduce to 0.85\ncstr\n\n    energy  protein      fat    carbs     ghge\n1 588.3423 439.9282 293.0966 329.5946 205.2454\n2 653.7137 488.8091 325.6629 366.2162 228.0505\n\n# use the standardized food contribution per gram \n# contrib_pergram_std\n\n# define the inequality constraints\ninequalconstr &lt;- function (x) {\n  \n  cps &lt;- contrib_pergram_std # call the values\n  # cstr is used as the last item in each equation\n  \n  constr &lt;- c(\n    # energy\n    - x[1]*cps$energy[1] - x[2]*cps$energy[2] - x[3]*cps$energy[3] + cstr$energy[1], # lower\n    x[1]*cps$energy[1] + x[2]*cps$energy[2] + x[3]*cps$energy[3] - cstr$energy[2], # upper\n    \n    # protein\n    - x[1]*cps$protein[1] - x[2]*cps$protein[2] - x[3]*cps$protein[3] + cstr$protein[1],\n    x[1]*cps$protein[1] + x[2]*cps$protein[2] + x[3]*cps$protein[3] - cstr$protein[2],\n    \n    # fat\n    - x[1]*cps$fat[1] - x[2]*cps$fat[2] - x[3]*cps$fat[3]+ cstr$fat[1],\n    x[1]*cps$fat[1] + x[2]*cps$fat[2] + x[3]*cps$fat[3] - cstr$fat[2],\n\n    # carbs\n    - x[1]*cps$carbs[1] - x[2]*cps$carbs[2] - x[3]*cps$carbs[3]+ cstr$carbs[1],\n    x[1]*cps$carbs[1] + x[2]*cps$carbs[2] + x[3]*cps$carbs[3] - cstr$carbs[2],\n    \n    # ghge\n    - x[1]*cps$ghge[1] - x[2]*cps$ghge[2] - x[3]*cps$ghge[3]+ cstr$ghge[1],\n    x[1]*cps$ghge[1] + x[2]*cps$ghge[2] + x[3]*cps$ghge[3] - cstr$ghge[2]\n  )\n  return (constr)\n}\n\n# lower and upper bounds of x (3 foods)\nlb &lt;- c(160, 140, 100)\nub &lt;- c(180, 160, 120)\n\n# Initial values\n# (try different ones!)\nx0 &lt;- c(175, 150, 110)\n\nopts &lt;- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 10 )) # match number of const\n\n# run the algorithm\nres &lt;- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n)\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  10 \nNumber of equality constraints:    0 \nCurrent value of objective function:  528.456412600945 \nCurrent value of controls: 177.753 140 100\n\n\nNow we check the results for the second problem.\n\nres_diet &lt;- res$solution\n\n# print with the current diet, and change percentage\n# also print the boundary, in case it hit boundary\n\ndiet_result &lt;- data.frame(\n  name = c('Bread', 'Vegetables', 'Red meat'),\n  current = current_diet, \n  new = res_diet, \n  percent_change = round((res_diet - current_diet)/current_diet, 3),\n  lower_limit = lb, \n  upper_limit = ub\n)\ndiet_result\n\n        name current     new percent_change lower_limit upper_limit\n1      Bread   175.4 177.753          0.013         160         180\n2 Vegetables   154.6 140.000         -0.094         140         160\n3   Red meat   117.6 100.000         -0.150         100         120\n\n\n\n# verify whether it falls within \noutput_newdiet &lt;- t(as.matrix(res_diet)) %*% as.matrix(contrib_pergram_std)\n# output_newdiet\n\n# cstr\nconst_result &lt;- t(rbind(output_newdiet, cstr))\ncolnames(const_result) &lt;- c('new_diet','const_lwr', 'const_upr')\nconst_result &lt;- data.table(const_result)\n# conditions\nconst_result[, is_ok := 'Yes']\nconst_result[new_diet &lt; const_lwr, is_ok := 'beyond lower']\nconst_result[new_diet &gt; const_upr, is_ok := 'beyond upper']\n\n# relative difference (since we rescaled the targets)\nconst_result[, relative_dev := 0]\nconst_result[is_ok == 'beyond lower', relative_dev := round((new_diet - const_lwr)/const_lwr, 3)]\nconst_result[is_ok == 'beyond upper', relative_dev := round((new_diet - const_upr)/const_upr, 3)]\n\n# print out\nconst_result\n\nIndex: &lt;is_ok&gt;\n   new_diet const_lwr const_upr        is_ok relative_dev\n      &lt;num&gt;     &lt;num&gt;     &lt;num&gt;       &lt;char&gt;        &lt;num&gt;\n1: 623.2326  588.3423  653.7137          Yes        0.000\n2: 450.2148  439.9282  488.8091          Yes        0.000\n3: 290.1302  293.0966  325.6629 beyond lower       -0.010\n4: 366.4749  329.5946  366.2162 beyond upper        0.001\n5: 233.5025  205.2454  228.0505 beyond upper        0.024"
  },
  {
    "objectID": "documentation/5_10foods.html",
    "href": "documentation/5_10foods.html",
    "title": "Part 5: 10 foods",
    "section": "",
    "text": "Select 10 foods: bread, cheese, eggs, fish, fruit and berries, milk and yoghurt, potatoes, red meat, sugar and sweets, vegetables.\nlibrary(data.table)\nfd &lt;- read.csv('data/foods_0914.csv', sep = ',')\nsetDT(fd) # use data.table format\nfd\n\n              food intake energy protein   fat carbs sugar alcohol  ghge\n            &lt;char&gt;  &lt;num&gt;  &lt;num&gt;   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;   &lt;int&gt; &lt;num&gt;\n 1:          Bread  175.4 10.696   0.091 0.030 0.441 0.002       0 0.001\n 2:         Cheese   43.4 13.502   0.217 0.242 0.048 0.002       0 0.010\n 3:           Eggs   24.6  6.179   0.130 0.106 0.004 0.000       0 0.002\n 4:           Fish   69.5  6.086   0.170 0.075 0.024 0.006       0 0.003\n 5: Fruit, berries  171.5  2.729   0.008 0.004 0.134 0.029       0 0.001\n 6:  Milk, yoghurt  306.1  1.980   0.036 0.011 0.056 0.010       0 0.001\n 7:       Potatoes   67.8  3.791   0.021 0.007 0.178 0.000       0 0.000\n 8:       Red meat  117.6  8.342   0.173 0.139 0.014 0.000       0 0.013\n 9:  Sugar, sweets   16.9 17.988   0.053 0.178 0.609 0.444       0 0.004\n10:     Vegetables  154.6  1.565   0.015 0.008 0.050 0.005       0 0.001\n    intake_mean intake_lwr intake_upr\n          &lt;num&gt;      &lt;num&gt;      &lt;num&gt;\n 1:   188.31866  18.831866  407.77324\n 2:    46.59652   4.659652  122.39639\n 3:    26.41185   2.641185  101.99699\n 4:    74.61885   7.461885  267.87632\n 5:   184.13142  18.413142  480.13743\n 6:   328.64505  32.864505  966.28731\n 7:    72.79364   7.279364  218.48830\n 8:   122.50376  12.250376  328.75242\n 9:    18.14473   1.814473   69.78742\n10:   165.98669  16.598669  365.04187\n\ncontrib_pergram &lt;- fd[, .(energy, protein, fat, carbs, sugar, alcohol, ghge)]\ncontrib_pergram\n\n    energy protein   fat carbs sugar alcohol  ghge\n     &lt;num&gt;   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;   &lt;int&gt; &lt;num&gt;\n 1: 10.696   0.091 0.030 0.441 0.002       0 0.001\n 2: 13.502   0.217 0.242 0.048 0.002       0 0.010\n 3:  6.179   0.130 0.106 0.004 0.000       0 0.002\n 4:  6.086   0.170 0.075 0.024 0.006       0 0.003\n 5:  2.729   0.008 0.004 0.134 0.029       0 0.001\n 6:  1.980   0.036 0.011 0.056 0.010       0 0.001\n 7:  3.791   0.021 0.007 0.178 0.000       0 0.000\n 8:  8.342   0.173 0.139 0.014 0.000       0 0.013\n 9: 17.988   0.053 0.178 0.609 0.444       0 0.004\n10:  1.565   0.015 0.008 0.050 0.005       0 0.001\n\n# note: intake from the food.csv is slightly different from the new file\ncurrent_diet &lt;- fd$intake\ncurrent_diet\n\n [1] 175.4  43.4  24.6  69.5 171.5 306.1  67.8 117.6  16.9 154.6\n\n# 10 foods contribution (maximum)\nconst_max_10foods &lt;- t(as.matrix(current_diet)) %*% as.matrix(contrib_pergram)\nconst_max_10foods\n\n       energy protein    fat    carbs   sugar alcohol   ghge\n[1,] 5895.142 77.7671 48.704 153.0605 17.1657       0 3.0957\n\n# exclude sugar, alcohol\nconst_max_10foods &lt;- const_max_10foods[, c('energy', 'protein', 'fat', 'carbs', 'ghge')]\n\n\n# target constraint on energy and nutrients\n# set lower to be 0.9; upper remain the current max\nconst_lwrupr &lt;- rbind(const_max_10foods*0.9, const_max_10foods*1)\nrownames(const_lwrupr) &lt;- c('lwr', 'upr')\nconst_lwrupr &lt;- data.table(const_lwrupr)\nconst_lwrupr\n\n     energy  protein     fat    carbs    ghge\n      &lt;num&gt;    &lt;num&gt;   &lt;num&gt;    &lt;num&gt;   &lt;num&gt;\n1: 5305.628 69.99039 43.8336 137.7544 2.78613\n2: 5895.142 77.76710 48.7040 153.0605 3.09570"
  },
  {
    "objectID": "documentation/5_10foods.html#constraints-for-3-foods",
    "href": "documentation/5_10foods.html#constraints-for-3-foods",
    "title": "Part 5: 10 foods",
    "section": "Constraints for 3 foods",
    "text": "Constraints for 3 foods\nWe compute the constraints for 3 foods together. Note that the consumption for each of the 28 food groups are different, hence we can not use 3/28 times the total energy, protein…; we need to use a weighted average.\nFor example, the total energy for the 10 foods together should be within [5305, 5895]."
  },
  {
    "objectID": "documentation/5_10foods.html#standardize-food-contribution-per-gram",
    "href": "documentation/5_10foods.html#standardize-food-contribution-per-gram",
    "title": "Part 5: 10 foods",
    "section": "Standardize food contribution per gram",
    "text": "Standardize food contribution per gram\nSince the range of constraints for 5 categories differ hugely, it could affect the numeric evaluation. We want them to be on comparative scales.\nThe current solution is to standardize the contribution in each category (e.g. energy) by its original value divided by the standard deviation.\nSimilarly, the upper and lower limit of the constraints also need to be re-scaled. After rescaling, the target will be on a range of hundreds, rather than 3000 vs 1.8.\n\ncontrib_pergram &lt;- contrib_pergram[, c('energy', 'protein', 'fat', 'carbs', 'ghge')]\n\nsd_coef &lt;- apply(contrib_pergram, MARGIN = 2, sd)\n\ncontrib_pergram_std &lt;- sweep(contrib_pergram, MARGIN = 2, 1/sd_coef, FUN = '*')\ncontrib_pergram_std\n\n      energy   protein        fat      carbs      ghge\n1  1.9807223 1.1926698 0.35692934 2.14338903 0.2284823\n2  2.5003470 2.8440587 2.87923000 0.23329404 2.2848233\n3  1.1442486 1.7038140 1.26115033 0.01944117 0.4569647\n4  1.1270265 2.2280644 0.89232335 0.11664702 0.6854470\n5  0.5053657 0.1048501 0.04759058 0.65127921 0.2284823\n6  0.3666632 0.4718254 0.13087409 0.27217638 0.2284823\n7  0.7020305 0.2752315 0.08328351 0.86513208 0.0000000\n8  1.5448004 2.2673832 1.65377260 0.06804410 2.9702703\n9  3.3310800 0.6946318 2.11778074 2.95991819 0.9139293\n10 0.2898121 0.1965939 0.09518116 0.24301463 0.2284823\n\n# standardize constraint\n# test the previous constraint\nconst_lwrupr\n\n     energy  protein     fat    carbs    ghge\n      &lt;num&gt;    &lt;num&gt;   &lt;num&gt;    &lt;num&gt;   &lt;num&gt;\n1: 5305.628 69.99039 43.8336 137.7544 2.78613\n2: 5895.142 77.76710 48.7040 153.0605 3.09570\n\nconst_lwrupr_std &lt;- sweep(const_lwrupr, MARGIN = 2, 1/sd_coef, FUN = '*')\nconst_lwrupr_std\n\n     energy   protein      fat    carbs     ghge\n1  982.5146  917.3123 521.5166 669.5269 636.5815\n2 1091.6828 1019.2359 579.4629 743.9188 707.3128\n\n\nIn the future, different scaling factor can be applied; but it should be a positive number after scaling. Could try dividing the difference between max and min of this variable."
  },
  {
    "objectID": "documentation/5_10foods.html#example-1-reduce-ghge-to-90",
    "href": "documentation/5_10foods.html#example-1-reduce-ghge-to-90",
    "title": "Part 5: 10 foods",
    "section": "Example 1: reduce ghge to 90%",
    "text": "Example 1: reduce ghge to 90%\nFirst we reduce the GHGE to 90%.\n\ncstr &lt;- copy(const_lwrupr_std)\ncstr$ghge &lt;- cstr$ghge * 0.9 # reduce to 0.9\ncstr\n\n     energy   protein      fat    carbs     ghge\n1  982.5146  917.3123 521.5166 669.5269 572.9233\n2 1091.6828 1019.2359 579.4629 743.9188 636.5815\n\n# use the standardized food contribution per gram \n# contrib_pergram_std\n\n# define the inequality constraints\ninequalconstr &lt;- function (x) {\n  \n  cps &lt;- contrib_pergram_std\n  \n  constr &lt;- c(\n    # energy\n    - x[1]*cps$energy[1] - x[2]*cps$energy[2] - x[3]*cps$energy[3] - x[4]*cps$energy[4] - x[5]*cps$energy[5] - x[6]*cps$energy[6] -  x[7]*cps$energy[7] - x[8]*cps$energy[8] - x[9]*cps$energy[9]- x[10]*cps$energy[10] + cstr$energy[1], # lower\n    x[1]*cps$energy[1] + x[2]*cps$energy[2] + x[3]*cps$energy[3] + x[4]*cps$energy[4] + x[5]*cps$energy[5] + x[6]*cps$energy[6] + x[7]*cps$energy[7] + x[8]*cps$energy[8] + x[9]*cps$energy[9] + x[10]*cps$energy[10] - cstr$energy[2], # upper\n    \n    # protein\n\n    - x[1]*cps$protein[1] - x[2]*cps$protein[2] - x[3]*cps$protein[3] - x[4]*cps$protein[4] - x[5]*cps$protein[5] - x[6]*cps$protein[6] -  x[7]*cps$protein[7] - x[8]*cps$protein[8] - x[9]*cps$protein[9]- x[10]*cps$protein[10] + cstr$protein[1], # lower\n    x[1]*cps$protein[1] + x[2]*cps$protein[2] + x[3]*cps$protein[3] + x[4]*cps$protein[4] + x[5]*cps$protein[5] + x[6]*cps$protein[6] + x[7]*cps$protein[7] + x[8]*cps$protein[8] + x[9]*cps$protein[9] + x[10]*cps$protein[10] - cstr$protein[2], # upper\n    \n    # fat\n\n    - x[1]*cps$fat[1] - x[2]*cps$fat[2] - x[3]*cps$fat[3] - x[4]*cps$fat[4] - x[5]*cps$fat[5] - x[6]*cps$fat[6] -  x[7]*cps$fat[7] - x[8]*cps$fat[8] - x[9]*cps$fat[9]- x[10]*cps$fat[10] + cstr$fat[1], # lower\n    x[1]*cps$fat[1] + x[2]*cps$fat[2] + x[3]*cps$fat[3] + x[4]*cps$fat[4] + x[5]*cps$fat[5] + x[6]*cps$fat[6] + x[7]*cps$fat[7] + x[8]*cps$fat[8] + x[9]*cps$fat[9] + x[10]*cps$fat[10] - cstr$fat[2], # upper\n    \n    # carbs\n\n    - x[1]*cps$carbs[1] - x[2]*cps$carbs[2] - x[3]*cps$carbs[3] - x[4]*cps$carbs[4] - x[5]*cps$carbs[5] - x[6]*cps$carbs[6] -  x[7]*cps$carbs[7] - x[8]*cps$carbs[8] - x[9]*cps$carbs[9]- x[10]*cps$carbs[10] + cstr$carbs[1], # lower\n    x[1]*cps$carbs[1] + x[2]*cps$carbs[2] + x[3]*cps$carbs[3] + x[4]*cps$carbs[4] + x[5]*cps$carbs[5] + x[6]*cps$carbs[6] + x[7]*cps$carbs[7] + x[8]*cps$carbs[8] + x[9]*cps$carbs[9] + x[10]*cps$carbs[10] - cstr$carbs[2], # upper\n    \n    # ghge\n    - x[1]*cps$ghge[1] - x[2]*cps$ghge[2] - x[3]*cps$ghge[3] - x[4]*cps$ghge[4] - x[5]*cps$ghge[5] - x[6]*cps$ghge[6] -  x[7]*cps$ghge[7] - x[8]*cps$ghge[8] - x[9]*cps$ghge[9]- x[10]*cps$ghge[10] + cstr$ghge[1], # lower\n    x[1]*cps$ghge[1] + x[2]*cps$ghge[2] + x[3]*cps$ghge[3] + x[4]*cps$ghge[4] + x[5]*cps$ghge[5] + x[6]*cps$ghge[6] + x[7]*cps$ghge[7] + x[8]*cps$ghge[8] + x[9]*cps$ghge[9] + x[10]*cps$ghge[10] - cstr$ghge[2] # upper\n    \n  )\n  return (constr)\n}\n\nSet other parameters\n\n# Initial values\nx0 &lt;- fd$intake\n\n# lower and upper bounds of x (10 foods)\nlb &lt;- fd$intake_lwr\nub &lt;- fd$intake_upr\n\n\nopts &lt;- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 10 ))\n\n# run the algorithm\nres &lt;- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n)\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  10 \nNumber of equality constraints:    0 \nCurrent value of objective function:  333.43482898391 \nCurrent value of controls: 174.6664 34.52358 24.20929 66.90563 170.1641 304.9358 67.96913 102.1114 \n15.30293 153.3331\n\n\nNow we print out the results in a more readable way\n\nres_diet &lt;- res$solution\n\n# print with the current diet, and change percentage\n# also print the boundary, in case it hit boundary\n\ndiet_result &lt;- data.frame(\n  name = fd$food, # food names\n  current = current_diet, \n  new = res_diet, \n  percent_change = round((res_diet - current_diet)/current_diet, 3),\n  lower_limit = lb, \n  upper_limit = ub\n)\ndiet_result\n\n             name current       new percent_change lower_limit upper_limit\n1           Bread   175.4 174.66638         -0.004   18.831866   407.77324\n2          Cheese    43.4  34.52358         -0.205    4.659652   122.39639\n3            Eggs    24.6  24.20929         -0.016    2.641185   101.99699\n4            Fish    69.5  66.90563         -0.037    7.461885   267.87632\n5  Fruit, berries   171.5 170.16415         -0.008   18.413142   480.13743\n6   Milk, yoghurt   306.1 304.93575         -0.004   32.864505   966.28731\n7        Potatoes    67.8  67.96913          0.002    7.279364   218.48830\n8        Red meat   117.6 102.11136         -0.132   12.250376   328.75242\n9   Sugar, sweets    16.9  15.30293         -0.095    1.814473    69.78742\n10     Vegetables   154.6 153.33308         -0.008   16.598669   365.04187\n\n\n\n# verify whether it falls within \noutput_newdiet &lt;- t(as.matrix(res_diet)) %*% as.matrix(contrib_pergram_std)\n# output_newdiet\n\n# cstr\nconst_result &lt;- t(rbind(output_newdiet, cstr))\ncolnames(const_result) &lt;- c('new_diet','const_lwr', 'const_upr')\nconst_result &lt;- data.table(const_result)\n# conditions\nconst_result[, is_ok := 'Yes']\nconst_result[new_diet &lt; const_lwr, is_ok := 'beyond lower']\nconst_result[new_diet &gt; const_upr, is_ok := 'beyond upper']\n\n# relative difference (since we rescaled the targets)\nconst_result[, relative_dev := 0]\nconst_result[is_ok == 'beyond lower', relative_dev := round((new_diet - const_lwr)/const_lwr, 3)]\nconst_result[is_ok == 'beyond upper', relative_dev := round((new_diet - const_upr)/const_upr, 3)]\n\n# print out\nconst_result\n\nIndex: &lt;is_ok&gt;\n    new_diet const_lwr const_upr  is_ok relative_dev\n       &lt;num&gt;     &lt;num&gt;     &lt;num&gt; &lt;char&gt;        &lt;num&gt;\n1: 1034.0674  982.5146 1091.6828    Yes            0\n2:  949.5498  917.3123 1019.2359    Yes            0\n3:  521.5166  521.5166  579.4629    Yes            0\n4:  732.8358  669.5269  743.9188    Yes            0\n5:  636.5815  572.9233  636.5815    Yes            0\n\n\nYou should always check how much it actually deviates from the target constraints."
  },
  {
    "objectID": "documentation/5_10foods.html#example-2-reduce-ghge-to-85",
    "href": "documentation/5_10foods.html#example-2-reduce-ghge-to-85",
    "title": "Part 5: 10 foods",
    "section": "Example 2: reduce ghge to 85%",
    "text": "Example 2: reduce ghge to 85%\n\ncstr &lt;- copy(const_lwrupr_std) # this line is important: it keeps a copy of the original values\ncstr$ghge &lt;- cstr$ghge * 0.85 # reduce to 0.85\ncstr\n\n     energy   protein      fat    carbs     ghge\n1  982.5146  917.3123 521.5166 669.5269 541.0943\n2 1091.6828 1019.2359 579.4629 743.9188 601.2158\n\n# use the standardized food contribution per gram \n# contrib_pergram_std\n\n# define the inequality constraints\ninequalconstr &lt;- function (x) {\n  \n  cps &lt;- contrib_pergram_std\n  \n  constr &lt;- c(\n    # energy\n    - x[1]*cps$energy[1] - x[2]*cps$energy[2] - x[3]*cps$energy[3] - x[4]*cps$energy[4] - x[5]*cps$energy[5] - x[6]*cps$energy[6] -  x[7]*cps$energy[7] - x[8]*cps$energy[8] - x[9]*cps$energy[9]- x[10]*cps$energy[10] + cstr$energy[1], # lower\n    x[1]*cps$energy[1] + x[2]*cps$energy[2] + x[3]*cps$energy[3] + x[4]*cps$energy[4] + x[5]*cps$energy[5] + x[6]*cps$energy[6] + x[7]*cps$energy[7] + x[8]*cps$energy[8] + x[9]*cps$energy[9] + x[10]*cps$energy[10] - cstr$energy[2], # upper\n    \n    # protein\n\n    - x[1]*cps$protein[1] - x[2]*cps$protein[2] - x[3]*cps$protein[3] - x[4]*cps$protein[4] - x[5]*cps$protein[5] - x[6]*cps$protein[6] -  x[7]*cps$protein[7] - x[8]*cps$protein[8] - x[9]*cps$protein[9]- x[10]*cps$protein[10] + cstr$protein[1], # lower\n    x[1]*cps$protein[1] + x[2]*cps$protein[2] + x[3]*cps$protein[3] + x[4]*cps$protein[4] + x[5]*cps$protein[5] + x[6]*cps$protein[6] + x[7]*cps$protein[7] + x[8]*cps$protein[8] + x[9]*cps$protein[9] + x[10]*cps$protein[10] - cstr$protein[2], # upper\n    \n    # fat\n\n    - x[1]*cps$fat[1] - x[2]*cps$fat[2] - x[3]*cps$fat[3] - x[4]*cps$fat[4] - x[5]*cps$fat[5] - x[6]*cps$fat[6] -  x[7]*cps$fat[7] - x[8]*cps$fat[8] - x[9]*cps$fat[9]- x[10]*cps$fat[10] + cstr$fat[1], # lower\n    x[1]*cps$fat[1] + x[2]*cps$fat[2] + x[3]*cps$fat[3] + x[4]*cps$fat[4] + x[5]*cps$fat[5] + x[6]*cps$fat[6] + x[7]*cps$fat[7] + x[8]*cps$fat[8] + x[9]*cps$fat[9] + x[10]*cps$fat[10] - cstr$fat[2], # upper\n    \n    # carbs\n\n    - x[1]*cps$carbs[1] - x[2]*cps$carbs[2] - x[3]*cps$carbs[3] - x[4]*cps$carbs[4] - x[5]*cps$carbs[5] - x[6]*cps$carbs[6] -  x[7]*cps$carbs[7] - x[8]*cps$carbs[8] - x[9]*cps$carbs[9]- x[10]*cps$carbs[10] + cstr$carbs[1], # lower\n    x[1]*cps$carbs[1] + x[2]*cps$carbs[2] + x[3]*cps$carbs[3] + x[4]*cps$carbs[4] + x[5]*cps$carbs[5] + x[6]*cps$carbs[6] + x[7]*cps$carbs[7] + x[8]*cps$carbs[8] + x[9]*cps$carbs[9] + x[10]*cps$carbs[10] - cstr$carbs[2], # upper\n    \n    # ghge\n    - x[1]*cps$ghge[1] - x[2]*cps$ghge[2] - x[3]*cps$ghge[3] - x[4]*cps$ghge[4] - x[5]*cps$ghge[5] - x[6]*cps$ghge[6] -  x[7]*cps$ghge[7] - x[8]*cps$ghge[8] - x[9]*cps$ghge[9]- x[10]*cps$ghge[10] + cstr$ghge[1], # lower\n    x[1]*cps$ghge[1] + x[2]*cps$ghge[2] + x[3]*cps$ghge[3] + x[4]*cps$ghge[4] + x[5]*cps$ghge[5] + x[6]*cps$ghge[6] + x[7]*cps$ghge[7] + x[8]*cps$ghge[8] + x[9]*cps$ghge[9] + x[10]*cps$ghge[10] - cstr$ghge[2] # upper\n    \n  )\n  return (constr)\n}\n\n# Initial values\nx0 &lt;- fd$intake\n\n# lower and upper bounds of x (10 foods)\nlb &lt;- fd$intake_lwr\nub &lt;- fd$intake_upr\n\n\nopts &lt;- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 10 ))\n\n# run the algorithm\nres &lt;- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n)\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  10 \nNumber of equality constraints:    0 \nCurrent value of objective function:  1130.7631790014 \nCurrent value of controls: 173.2095 37.04426 30.2285 67.62501 167.5981 303.4959 67.8251 85.94574 21.08664 \n151.6257\n\n\nNow we check the results for the second problem.\n\n\n             name current       new percent_change lower_limit upper_limit\n1           Bread   175.4 173.20950         -0.012   18.831866   407.77324\n2          Cheese    43.4  37.04426         -0.146    4.659652   122.39639\n3            Eggs    24.6  30.22850          0.229    2.641185   101.99699\n4            Fish    69.5  67.62501         -0.027    7.461885   267.87632\n5  Fruit, berries   171.5 167.59805         -0.023   18.413142   480.13743\n6   Milk, yoghurt   306.1 303.49594         -0.009   32.864505   966.28731\n7        Potatoes    67.8  67.82510          0.000    7.279364   218.48830\n8        Red meat   117.6  85.94574         -0.269   12.250376   328.75242\n9   Sugar, sweets    16.9  21.08664          0.248    1.814473    69.78742\n10     Vegetables   154.6 151.62566         -0.019   16.598669   365.04187\n\n\n\n\nIndex: &lt;is_ok&gt;\n    new_diet const_lwr const_upr  is_ok relative_dev\n       &lt;num&gt;     &lt;num&gt;     &lt;num&gt; &lt;char&gt;        &lt;num&gt;\n1: 1037.0552  982.5146 1091.6828    Yes            0\n2:  932.8798  917.3123 1019.2359    Yes            0\n3:  521.5166  521.5166  579.4629    Yes            0\n4:  743.9188  669.5269  743.9188    Yes            0\n5:  601.2158  541.0943  601.2158    Yes            0"
  },
  {
    "objectID": "documentation/3_small_demo.html",
    "href": "documentation/3_small_demo.html",
    "title": "Part 3: A simple problem with 3 foods and 3 constraints",
    "section": "",
    "text": "We document the optimization procedure with nloptr using a small example of 3 foods, and 3 constraints (energy, protein, ghge).\nfoods &lt;- read.csv('data/foods.csv', sep = ',')\ndata.table::setDT(foods) # use data.table format\n\n# we only take 3 foods\nfd &lt;- foods[food %in% c('Bread', 'Vegetables', 'Red meat')]\nfd\n\n         food intake energy protein   fat carbs sugar alcohol  ghge\n       &lt;char&gt;  &lt;num&gt;  &lt;num&gt;   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;   &lt;num&gt; &lt;num&gt;\n1:      Bread  175.4 10.696   0.091 0.030 0.441 0.002       0 0.001\n2: Vegetables  154.6  1.565   0.015 0.008 0.050 0.005       0 0.001\n3:   Red meat  117.6  8.342   0.173 0.139 0.014 0.000       0 0.013"
  },
  {
    "objectID": "documentation/3_small_demo.html#constraints-for-3-foods",
    "href": "documentation/3_small_demo.html#constraints-for-3-foods",
    "title": "Part 3: A simple problem with 3 foods and 3 constraints",
    "section": "Constraints for 3 foods",
    "text": "Constraints for 3 foods\nWe compute the constraints for 3 foods together. Note that the consumption for each of the 28 food groups are different, hence we can not use 3/28 times the total energy, protein…; we need to use a weighted average.\nThe cosntraints can be set to any positive number that make sense.\n\n# original constraint for all foods (maximum)\nconst_max_allfoods &lt;- c(9314.3, 98.2, 85.8, 234.7, 39.2, 8.6, 3.8)\n\n# 3 foods contribution (maximum)\nconst_max_3foods &lt;- t(as.matrix(fd$intake)) %*% as.matrix(fd[, .(energy, protein, fat, carbs, sugar, alcohol, ghge)])\nconst_max_3foods\n\n       energy protein     fat   carbs  sugar alcohol   ghge\n[1,] 3099.047 38.6252 22.8452 86.7278 1.1238       0 1.8588\n\n\nIn the optimization problem, we want to have a range (lower, upper) for the metrics. We can assume that the lower range is 90% of the maximum.\n\nc3foods &lt;- rbind(const_max_3foods*0.9, const_max_3foods*1)\nrownames(c3foods) &lt;- c('lwr', 'upr')\nc3foods &lt;- data.frame(c3foods)\nc3foods\n\n      energy  protein      fat    carbs   sugar alcohol    ghge\nlwr 2789.142 34.76268 20.56068 78.05502 1.01142       0 1.67292\nupr 3099.047 38.62520 22.84520 86.72780 1.12380       0 1.85880\n\n\nFor example, the total energy for the 3 foods together should be within [2789.14, 3099.05]."
  },
  {
    "objectID": "documentation/3_small_demo.html#optimization",
    "href": "documentation/3_small_demo.html#optimization",
    "title": "Part 3: A simple problem with 3 foods and 3 constraints",
    "section": "Optimization",
    "text": "Optimization\nNow we are going to solve the optimization problem using nloptr.\nThere are a few components that need to be specified:\n\nobjective function (as a function of x)\nconstraint functions\ninitial values\noptions\n\n\nObjective function\nThe objective is to minimize the following function:\n\\((x_1 - X_1)^2 + (x_2 - X_2)^2 + (x_3 - X_3)^2\\) where\n\\(x_1, x_2, x_3\\) are the target diet (grams or other units) we want to find, these three are unknown.\n\\(X_1, X_2, X_3\\) are the current diet for bread, vegetables and red meat. We have these values in the data: 175.4, 154.6, 117.6. In the function we use fd$intake to programmatically extract the values.\n\nfd$intake\n\n[1] 175.4 154.6 117.6\n\n# define objective \nobjective &lt;- function(x)\n{\n  return ( (x[1]- fd$intake[1])^2 + \n             (x[2]- fd$intake[2])^2 + \n             (x[3]- fd$intake[3])^2)\n}\n\n\n\nConstraints\nNow we define the inequality constraints. For this demo, we only include 3 metrics (energy, protein, ghge) for simplicity.\n\n# select the metrics we want to keep \nc3 &lt;- c3foods[, c('energy', 'protein', 'ghge')]\nc3\n\n      energy  protein    ghge\nlwr 2789.142 34.76268 1.67292\nupr 3099.047 38.62520 1.85880\n\n\nThe inequality constraints need to be reformulated for nloptr to work. More specifically, nloptr optimizes a function \\(f(x)\\) subject to a set of equality and inequality constraints. For the inequality constraints, they need to be the form of \\(g(x) &lt;= 0\\).\nWe write out our own constraints for energy:\n\\(x_1 e_1 + x_2e_2 + x_3e_3 &gt;= E_{lower}, x_1 e_1 + x_2e_2 + x_3e_3 &lt;= E_{upper}\\)\nThese two need to be re-written to be in the format of \\(g(x) &lt;= 0\\).\n\\(-(x_1 e_1 + x_2e_2 + x_3e_3)+E_{lower} &lt;= 0\\)\n\\(x_1 e_1 + x_2e_2 + x_3e_3 - E_{upper} &lt;= 0\\)\nThe constraints for protein, ghge can be written in similar ways.\n\n# define the inequality constraints\ninequalconstr &lt;- function (x) {\n  constr &lt;- c(\n    # energy\n    - x[1]*fd$energy[1] - x[2]*fd$energy[2] - x[3]*fd$energy[3] + c3$energy[1], # lower\n    x[1]*fd$energy[1] + x[2]*fd$energy[2] + x[3]*fd$energy[3] - c3$energy[2], # upper\n    \n    # protein\n    - x[1]*fd$protein[1] - x[2]*fd$protein[2] - x[3]*fd$protein[3] + c3$protein[1],\n    x[1]*fd$protein[1] + x[2]*fd$protein[2] + x[3]*fd$protein[3] - c3$protein[2],\n\n    # ghge\n    - x[1]*fd$ghge[1] - x[2]*fd$ghge[2] - x[3]*fd$ghge[3]+ c3$ghge[1],\n    x[1]*fd$ghge[1] + x[2]*fd$ghge[2] + x[3]*fd$ghge[3] - c3$ghge[2]\n  )\n  return (constr)\n}\n\n\n\nOther options\nWe do not need to explicitly specify the non-negativity constraints for \\(x\\) inside the function. They are specified outside the function as a set of lower and upper bounds. You can set these range to be anything that make sense; for now we make it close to the current diet.\nInitial values are the values you tell the program to start the search. This is also up to you; sometimes initial values can have a large impact on the final results when the optimization problem is difficult (e.g. has multiple local optima). We can start close to the values of the current diet.\n\n# lower and upper bounds of x (3 foods)\nlb &lt;- c(160, 140, 100)\nub &lt;- c(180, 160, 120)\n\n# Initial values\n# (try different ones!)\nx0 &lt;- c(175, 150, 110) \n\nOptions should also be supplied to the program as a named list. These are specifications for the algorithm, tolerance and maximum evaluation. For more details please check the function manual.\nPay attention to the last line here: the size inside rep() need to match the number of inequality constraints. In this example it should be 6.\n\nopts &lt;- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 6 ))\n\nNow we run the optimization by calling nloptr from nloptr package. If you have loaded the package before, you don’t need the :: between the two.\nWe print the result and check the optimized values.\n\n# run the algorithm\nres &lt;- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n  )\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 4 ( NLOPT_XTOL_REACHED: Optimization stopped because \nxtol_rel or xtol_abs (above) was reached. )\n\nNumber of Iterations....: 38269 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  6 \nNumber of equality constraints:    0 \nOptimal value of objective function:  1.55500261637166e-26 \nOptimal value of controls: 175.4 154.6 117.6\n\n\nThe optimal values are 175.4, 154.6, 117.6. These are the same as the current diet.\n\n\n\n\n\n\nNote\n\n\n\nThis result is not surprising; our current diet on the three foods already satisfies the constraints, and it is the closest to the current diet (\\((x_1 - X_1)^2 +(x_2 - X_2)^2 + (x_3 - X_3)^2 = 0\\)) when \\(x_1 = X_1, x_2 = X_2, x_3 = X_3\\)."
  },
  {
    "objectID": "documentation/3_small_demo.html#reduce-ghge-to-80",
    "href": "documentation/3_small_demo.html#reduce-ghge-to-80",
    "title": "Part 3: A simple problem with 3 foods and 3 constraints",
    "section": "Reduce ghge to 80%",
    "text": "Reduce ghge to 80%\nWe can try to modify the constraint values to see if the diet will be different.\nFor example, we can limit ghge. The current upper and lower range are [1.673, 1.859], let us try to limit it to [1.338, 1.487], which is 80% of the original values.\n\n# c3foods &lt;- rbind(const_max_3foods*0.9, const_max_3foods*1)\n# rownames(c3foods) &lt;- c('lwr', 'upr')\n# c3foods &lt;- data.frame(c3foods)\nc3\n\n      energy  protein    ghge\nlwr 2789.142 34.76268 1.67292\nupr 3099.047 38.62520 1.85880\n\nc3_alt &lt;- c3\nc3_alt$ghge &lt;- c3_alt$ghge * 0.8 # you can try different limits\nc3_alt\n\n      energy  protein     ghge\nlwr 2789.142 34.76268 1.338336\nupr 3099.047 38.62520 1.487040\n\n\nWe keep the objective function and options same as before; but we modify the inequality constraints.\n\n# define the inequality constraints\n# instead of c3, we use c3_alt\n\ninequalconstr_alt &lt;- function (x) {\n  constr &lt;- c(\n    # energy\n    - x[1]*fd$energy[1] - x[2]*fd$energy[2] - x[3]*fd$energy[3] + c3_alt$energy[1], # lower\n    x[1]*fd$energy[1] + x[2]*fd$energy[2] + x[3]*fd$energy[3] - c3_alt$energy[2], # upper\n    \n    # protein\n    - x[1]*fd$protein[1] - x[2]*fd$protein[2] - x[3]*fd$protein[3] + c3_alt$protein[1],\n    x[1]*fd$protein[1] + x[2]*fd$protein[2] + x[3]*fd$protein[3] - c3_alt$protein[2],\n\n    # ghge\n    - x[1]*fd$ghge[1] - x[2]*fd$ghge[2] - x[3]*fd$ghge[3]+ c3_alt$ghge[1], # new values\n    x[1]*fd$ghge[1] + x[2]*fd$ghge[2] + x[3]*fd$ghge[3] - c3_alt$ghge[2] # new values\n  )\n  return (constr)\n}\n\nNow we run the optimization again with the new constraint, inequalconstr_alt.\n\n# run the algorithm\nres_alt &lt;- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr_alt, # inequality constraint (NEW)\n  opts        = opts       # options\n  )\n\nprint(res_alt)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr_alt, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  6 \nNumber of equality constraints:    0 \nCurrent value of objective function:  566.401428391593 \nCurrent value of controls: 168.806 140 100\n\n\nThe new results are 168.806, 140, 100.\n\n\n\n\n\n\nCompare the two runs\n\n\n\n\nBread: 175.4 -&gt; 168.8 (3.7% reduction)\nVegetables: 154.6 -&gt; 140 (9.4% reduction)\nRed meat: 117.6 -&gt; 100 (15.0% reduction)\n\nThis makes sense, as red meat is the largest contributor for ghge.\n\n\nWhat we have shown here is a very crude demonstration of how to construct the optimization problem, and a sanity check of the results. A lot more can be tried out."
  },
  {
    "objectID": "documentation/4_troubleshoot_3foods.html",
    "href": "documentation/4_troubleshoot_3foods.html",
    "title": "Part 4: Troubleshoot part 3",
    "section": "",
    "text": "Previously we have coded the algorithm with nloptr function. A few issues have popped up: some diet do not fall within the constraints. Possible reasons:\nSteps taken so far (2023.08.27)\nlibrary(data.table)\nfoods &lt;- read.csv('data/foods.csv', sep = ',')\nsetDT(foods) # use data.table format\n\n# start with 3 foods\nfd &lt;- foods[food %in% c('Bread', 'Vegetables', 'Red meat')]\nfd\n\n         food intake energy protein   fat carbs sugar alcohol  ghge\n       &lt;char&gt;  &lt;num&gt;  &lt;num&gt;   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;   &lt;num&gt; &lt;num&gt;\n1:      Bread  175.4 10.696   0.091 0.030 0.441 0.002       0 0.001\n2: Vegetables  154.6  1.565   0.015 0.008 0.050 0.005       0 0.001\n3:   Red meat  117.6  8.342   0.173 0.139 0.014 0.000       0 0.013\n\n# split current diet (grams of intake) and contribution per gram\ncurrent_diet &lt;- fd$intake\ncurrent_diet\n\n[1] 175.4 154.6 117.6\n\ncontrib_pergram &lt;- fd[, .(energy, protein, fat, carbs, sugar, alcohol, ghge)]\ncontrib_pergram\n\n   energy protein   fat carbs sugar alcohol  ghge\n    &lt;num&gt;   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;   &lt;num&gt; &lt;num&gt;\n1: 10.696   0.091 0.030 0.441 0.002       0 0.001\n2:  1.565   0.015 0.008 0.050 0.005       0 0.001\n3:  8.342   0.173 0.139 0.014 0.000       0 0.013"
  },
  {
    "objectID": "documentation/4_troubleshoot_3foods.html#constraints-for-3-foods",
    "href": "documentation/4_troubleshoot_3foods.html#constraints-for-3-foods",
    "title": "Part 4: Troubleshoot part 3",
    "section": "Constraints for 3 foods",
    "text": "Constraints for 3 foods\nWe compute the constraints for 3 foods together. Note that the consumption for each of the 28 food groups are different, hence we can not use 3/28 times the total energy, protein…; we need to use a weighted average.\nThe cosntraints can be set to any positive number that make sense. In the optimization problem, we want to have a range (lower, upper) for the metrics. We can assume that the lower range is 90% of the maximum.\n\n# original constraint for all foods (maximum)\nconst_max_allfoods &lt;- c(9314.3, 98.2, 85.8, 234.7, 39.2, 8.6, 3.8)\n\n# 3 foods contribution (maximum)\nconst_max_3foods &lt;- t(as.matrix(current_diet)) %*% as.matrix(contrib_pergram)\nconst_max_3foods\n\n       energy protein     fat   carbs  sugar alcohol   ghge\n[1,] 3099.047 38.6252 22.8452 86.7278 1.1238       0 1.8588\n\n# exclude sugar, alcohol\nconst_max_3foods &lt;- const_max_3foods[, c('energy', 'protein', 'fat', 'carbs', 'ghge')]\n\n# range of target: 0.9-1 of the maximum\n# this is one thing that we could adjust: hard threshould to soft\nconst_lwrupr &lt;- rbind(const_max_3foods*0.9, const_max_3foods*1)\nrownames(const_lwrupr) &lt;- c('lwr', 'upr')\nconst_lwrupr &lt;- data.table(const_lwrupr)\nconst_lwrupr\n\n     energy  protein      fat    carbs    ghge\n      &lt;num&gt;    &lt;num&gt;    &lt;num&gt;    &lt;num&gt;   &lt;num&gt;\n1: 2789.142 34.76268 20.56068 78.05502 1.67292\n2: 3099.047 38.62520 22.84520 86.72780 1.85880\n\n\nFor example, the total energy for the 3 foods together should be within [2789.14, 3099.05]."
  },
  {
    "objectID": "documentation/4_troubleshoot_3foods.html#standardize-food-contribution-per-gram",
    "href": "documentation/4_troubleshoot_3foods.html#standardize-food-contribution-per-gram",
    "title": "Part 4: Troubleshoot part 3",
    "section": "Standardize food contribution per gram",
    "text": "Standardize food contribution per gram\nSince the range of constraints for 5 categories differ hugely, it could affect the numeric evaluation. We want them to be on comparative scales.\nThe current solution is to standardize the contribution in each category (e.g. energy) by its original value divided by the standard deviation. For example,\n\nthe contribution of energy per food becomes (2.25, 0.33, 1.76) rather than (10.69, 1.56, 8.34)\nthe contribution of ghge per food becomes (0.14, 0.14, 1.87) rather than (0.001, 0.001, 0.013)\n\nSimilarly, the upper and lower limit of the constraints also need to be re-scaled. After rescaling, the target will be on a range of hundreds, rather than 3000 vs 1.8.\n\n# find sd for each category: energy, protein.. ghge\n# divide by these coef\ncontrib_pergram &lt;- contrib_pergram[, c('energy', 'protein', 'fat', 'carbs', 'ghge')]\ncontrib_pergram\n\n   energy protein   fat carbs  ghge\n    &lt;num&gt;   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;\n1: 10.696   0.091 0.030 0.441 0.001\n2:  1.565   0.015 0.008 0.050 0.001\n3:  8.342   0.173 0.139 0.014 0.013\n\nsd_coef &lt;- apply(contrib_pergram, MARGIN = 2, sd)\n\ncontrib_pergram_std &lt;- sweep(contrib_pergram, MARGIN = 2, 1/sd_coef, FUN = '*')\ncontrib_pergram_std\n\n     energy   protein       fat     carbs      ghge\n1 2.2562170 1.1516220 0.4276560 1.8621635 0.1443376\n2 0.3301215 0.1898278 0.1140416 0.2111296 0.1443376\n3 1.7596637 2.1893473 1.9814728 0.0591163 1.8763884\n\n# standardize constraint\n# test the previous constraint\nconst_lwrupr\n\n     energy  protein      fat    carbs    ghge\n      &lt;num&gt;    &lt;num&gt;    &lt;num&gt;    &lt;num&gt;   &lt;num&gt;\n1: 2789.142 34.76268 20.56068 78.05502 1.67292\n2: 3099.047 38.62520 22.84520 86.72780 1.85880\n\nconst_lwrupr_std &lt;- sweep(const_lwrupr, MARGIN = 2, 1/sd_coef, FUN = '*')\nconst_lwrupr_std\n\n    energy  protein      fat    carbs     ghge\n1 588.3423 439.9282 293.0966 329.5946 241.4652\n2 653.7137 488.8091 325.6629 366.2162 268.2947\n\n\nIn the future, different scaling factor can be applied; but it should be a positive number after scaling. Could try dividing the difference between max and min of this variable."
  },
  {
    "objectID": "documentation/4_troubleshoot_3foods.html#example-1-reduce-ghge-to-90",
    "href": "documentation/4_troubleshoot_3foods.html#example-1-reduce-ghge-to-90",
    "title": "Part 4: Troubleshoot part 3",
    "section": "Example 1: reduce ghge to 90%",
    "text": "Example 1: reduce ghge to 90%\nFirst we reduce the GHGE to 90%. (This is feasible, in contrast to the 80% reduction)\n\ncstr &lt;- copy(const_lwrupr_std) # this line is important: it keeps a copy of the original values\ncstr$ghge &lt;- cstr$ghge * 0.9 # reduce to 0.9\ncstr\n\n    energy  protein      fat    carbs     ghge\n1 588.3423 439.9282 293.0966 329.5946 217.3187\n2 653.7137 488.8091 325.6629 366.2162 241.4652\n\n# use the standardized food contribution per gram \n# contrib_pergram_std\n\n# define the inequality constraints\ninequalconstr &lt;- function (x) {\n  \n  cps &lt;- contrib_pergram_std # call the values\n  # cstr is used as the last item in each equation\n  \n  constr &lt;- c(\n    # energy\n    - x[1]*cps$energy[1] - x[2]*cps$energy[2] - x[3]*cps$energy[3] + cstr$energy[1], # lower\n    x[1]*cps$energy[1] + x[2]*cps$energy[2] + x[3]*cps$energy[3] - cstr$energy[2], # upper\n    \n    # protein\n    - x[1]*cps$protein[1] - x[2]*cps$protein[2] - x[3]*cps$protein[3] + cstr$protein[1],\n    x[1]*cps$protein[1] + x[2]*cps$protein[2] + x[3]*cps$protein[3] - cstr$protein[2],\n    \n    # fat\n    - x[1]*cps$fat[1] - x[2]*cps$fat[2] - x[3]*cps$fat[3]+ cstr$fat[1],\n    x[1]*cps$fat[1] + x[2]*cps$fat[2] + x[3]*cps$fat[3] - cstr$fat[2],\n\n    # carbs\n    - x[1]*cps$carbs[1] - x[2]*cps$carbs[2] - x[3]*cps$carbs[3]+ cstr$carbs[1],\n    x[1]*cps$carbs[1] + x[2]*cps$carbs[2] + x[3]*cps$carbs[3] - cstr$carbs[2],\n    \n    # ghge\n    - x[1]*cps$ghge[1] - x[2]*cps$ghge[2] - x[3]*cps$ghge[3]+ cstr$ghge[1],\n    x[1]*cps$ghge[1] + x[2]*cps$ghge[2] + x[3]*cps$ghge[3] - cstr$ghge[2]\n  )\n  return (constr)\n}\n\nSet other parameters (this part is unchanged, apart from the number of constraints)\n\n# lower and upper bounds of x (3 foods)\nlb &lt;- c(160, 140, 100)\nub &lt;- c(180, 160, 120)\n\n# Initial values\n# (try different ones!)\nx0 &lt;- c(175, 150, 110)\n\nopts &lt;- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 10 )) # match number of const\n\n# run the algorithm\nres &lt;- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n)\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  10 \nNumber of equality constraints:    0 \nCurrent value of objective function:  202.05482164757 \nCurrent value of controls: 174.3123 153.5126 103.4689\n\n\nNow we print out the results in a more readable way\n\nres_diet &lt;- res$solution\n\n# print with the current diet, and change percentage\n# also print the boundary, in case it hit boundary\n\ndiet_result &lt;- data.frame(\n  name = c('Bread', 'Vegetables', 'Red meat'),\n  current = current_diet, \n  new = res_diet, \n  percent_change = round((res_diet - current_diet)/current_diet, 3),\n  lower_limit = lb, \n  upper_limit = ub\n)\ndiet_result\n\n        name current      new percent_change lower_limit upper_limit\n1      Bread   175.4 174.3123         -0.006         160         180\n2 Vegetables   154.6 153.5126         -0.007         140         160\n3   Red meat   117.6 103.4689         -0.120         100         120\n\n\n\n# verify whether it falls within \noutput_newdiet &lt;- t(as.matrix(res_diet)) %*% as.matrix(contrib_pergram_std)\n# output_newdiet\n\n# cstr\nconst_result &lt;- t(rbind(output_newdiet, cstr))\ncolnames(const_result) &lt;- c('new_diet','const_lwr', 'const_upr')\nconst_result &lt;- data.table(const_result)\n# conditions\nconst_result[, is_ok := 'Yes']\nconst_result[new_diet &lt; const_lwr, is_ok := 'beyond lower']\nconst_result[new_diet &gt; const_upr, is_ok := 'beyond upper']\n\n# relative difference (since we rescaled the targets)\nconst_result[, relative_dev := 0]\nconst_result[is_ok == 'beyond lower', relative_dev := round((new_diet - const_lwr)/const_lwr, 3)]\nconst_result[is_ok == 'beyond upper', relative_dev := round((new_diet - const_upr)/const_upr, 3)]\n\n# print out\nconst_result\n\nIndex: &lt;is_ok&gt;\n   new_diet const_lwr const_upr        is_ok relative_dev\n      &lt;num&gt;     &lt;num&gt;     &lt;num&gt;       &lt;char&gt;        &lt;num&gt;\n1: 626.0346  588.3423  653.7137          Yes            0\n2: 456.4121  439.9282  488.8091          Yes            0\n3: 297.0733  293.0966  325.6629          Yes            0\n4: 363.1258  329.5946  366.2162          Yes            0\n5: 241.4652  217.3187  241.4652 beyond upper            0\n\n\nYou should always check how much it actually deviates from the target constraints."
  },
  {
    "objectID": "documentation/4_troubleshoot_3foods.html#example-2-reduce-ghge-to-85",
    "href": "documentation/4_troubleshoot_3foods.html#example-2-reduce-ghge-to-85",
    "title": "Part 4: Troubleshoot part 3",
    "section": "Example 2: reduce ghge to 85%",
    "text": "Example 2: reduce ghge to 85%\nThis is one example where the optimal constraints can not be reached. You’ll see that the boundaries that we set in the algorithm have been reached; suggesting that if we modify these parameters, the solution could still be found.\nBe careful with HOW MUCH it deviates from the target!\n\ncstr &lt;- copy(const_lwrupr_std) # this line is important: it keeps a copy of the original values\ncstr$ghge &lt;- cstr$ghge * 0.85 # reduce to 0.85\ncstr\n\n    energy  protein      fat    carbs     ghge\n1 588.3423 439.9282 293.0966 329.5946 205.2454\n2 653.7137 488.8091 325.6629 366.2162 228.0505\n\n# use the standardized food contribution per gram \n# contrib_pergram_std\n\n# define the inequality constraints\ninequalconstr &lt;- function (x) {\n  \n  cps &lt;- contrib_pergram_std # call the values\n  # cstr is used as the last item in each equation\n  \n  constr &lt;- c(\n    # energy\n    - x[1]*cps$energy[1] - x[2]*cps$energy[2] - x[3]*cps$energy[3] + cstr$energy[1], # lower\n    x[1]*cps$energy[1] + x[2]*cps$energy[2] + x[3]*cps$energy[3] - cstr$energy[2], # upper\n    \n    # protein\n    - x[1]*cps$protein[1] - x[2]*cps$protein[2] - x[3]*cps$protein[3] + cstr$protein[1],\n    x[1]*cps$protein[1] + x[2]*cps$protein[2] + x[3]*cps$protein[3] - cstr$protein[2],\n    \n    # fat\n    - x[1]*cps$fat[1] - x[2]*cps$fat[2] - x[3]*cps$fat[3]+ cstr$fat[1],\n    x[1]*cps$fat[1] + x[2]*cps$fat[2] + x[3]*cps$fat[3] - cstr$fat[2],\n\n    # carbs\n    - x[1]*cps$carbs[1] - x[2]*cps$carbs[2] - x[3]*cps$carbs[3]+ cstr$carbs[1],\n    x[1]*cps$carbs[1] + x[2]*cps$carbs[2] + x[3]*cps$carbs[3] - cstr$carbs[2],\n    \n    # ghge\n    - x[1]*cps$ghge[1] - x[2]*cps$ghge[2] - x[3]*cps$ghge[3]+ cstr$ghge[1],\n    x[1]*cps$ghge[1] + x[2]*cps$ghge[2] + x[3]*cps$ghge[3] - cstr$ghge[2]\n  )\n  return (constr)\n}\n\n# lower and upper bounds of x (3 foods)\nlb &lt;- c(160, 140, 100)\nub &lt;- c(180, 160, 120)\n\n# Initial values\n# (try different ones!)\nx0 &lt;- c(175, 150, 110)\n\nopts &lt;- list( \"algorithm\" = \"NLOPT_GN_ISRES\",\n              \"xtol_rel\"= 1.0e-15,\n              \"maxeval\"= 160000,\n              \"tol_constraints_ineq\" = rep( 1.0e-10, 10 )) # match number of const\n\n# run the algorithm\nres &lt;- nloptr::nloptr(\n  x0          = x0,        # initial value for x\n  eval_f      = objective, # objective function\n  lb          = lb,        # lower bound for x\n  ub          = ub,        # upper bound for x\n  eval_g_ineq = inequalconstr, # inequality constraint\n  opts        = opts       # options\n)\n\nprint(res)\n\n\nCall:\nnloptr::nloptr(x0 = x0, eval_f = objective, lb = lb, ub = ub, \n    eval_g_ineq = inequalconstr, opts = opts)\n\n\nMinimization using NLopt version 2.7.1 \n\nNLopt solver status: 5 ( NLOPT_MAXEVAL_REACHED: Optimization stopped because \nmaxeval (above) was reached. )\n\nNumber of Iterations....: 160000 \nTermination conditions:  xtol_rel: 1e-15    maxeval: 160000 \nNumber of inequality constraints:  10 \nNumber of equality constraints:    0 \nCurrent value of objective function:  528.456412562443 \nCurrent value of controls: 177.753 140 100\n\n\nNow we check the results for the second problem.\n\nres_diet &lt;- res$solution\n\n# print with the current diet, and change percentage\n# also print the boundary, in case it hit boundary\n\ndiet_result &lt;- data.frame(\n  name = c('Bread', 'Vegetables', 'Red meat'),\n  current = current_diet, \n  new = res_diet, \n  percent_change = round((res_diet - current_diet)/current_diet, 3),\n  lower_limit = lb, \n  upper_limit = ub\n)\ndiet_result\n\n        name current     new percent_change lower_limit upper_limit\n1      Bread   175.4 177.753          0.013         160         180\n2 Vegetables   154.6 140.000         -0.094         140         160\n3   Red meat   117.6 100.000         -0.150         100         120\n\n\n\n# verify whether it falls within \noutput_newdiet &lt;- t(as.matrix(res_diet)) %*% as.matrix(contrib_pergram_std)\n# output_newdiet\n\n# cstr\nconst_result &lt;- t(rbind(output_newdiet, cstr))\ncolnames(const_result) &lt;- c('new_diet','const_lwr', 'const_upr')\nconst_result &lt;- data.table(const_result)\n# conditions\nconst_result[, is_ok := 'Yes']\nconst_result[new_diet &lt; const_lwr, is_ok := 'beyond lower']\nconst_result[new_diet &gt; const_upr, is_ok := 'beyond upper']\n\n# relative difference (since we rescaled the targets)\nconst_result[, relative_dev := 0]\nconst_result[is_ok == 'beyond lower', relative_dev := round((new_diet - const_lwr)/const_lwr, 3)]\nconst_result[is_ok == 'beyond upper', relative_dev := round((new_diet - const_upr)/const_upr, 3)]\n\n# print out\nconst_result\n\nIndex: &lt;is_ok&gt;\n   new_diet const_lwr const_upr        is_ok relative_dev\n      &lt;num&gt;     &lt;num&gt;     &lt;num&gt;       &lt;char&gt;        &lt;num&gt;\n1: 623.2326  588.3423  653.7137          Yes        0.000\n2: 450.2148  439.9282  488.8091          Yes        0.000\n3: 290.1302  293.0966  325.6629 beyond lower       -0.010\n4: 366.4749  329.5946  366.2162 beyond upper        0.001\n5: 233.5025  205.2454  228.0505 beyond upper        0.024"
  },
  {
    "objectID": "documentation/2_define_problem.html",
    "href": "documentation/2_define_problem.html",
    "title": "Part 2: Problem definition",
    "section": "",
    "text": "The information we have are the food groups and constraints.\nfoods &lt;- read.csv('data/foods.csv', sep = ',')\ndata.table::setDT(foods) # use data.table format\nhead(foods)  # print the fist 6\n\n           food intake energy protein   fat carbs sugar alcohol  ghge\n         &lt;char&gt;  &lt;num&gt;  &lt;num&gt;   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;   &lt;num&gt; &lt;num&gt;\n1:        Bread  175.4 10.696   0.091 0.030 0.441 0.002       0 0.001\n2: Other grains   45.0 14.022   0.100 0.042 0.607 0.011       0 0.002\n3:        Cakes   35.6 14.185   0.067 0.152 0.424 0.185       0 0.002\n4:     Potatoes   67.8  3.791   0.021 0.007 0.178 0.000       0 0.000\n5:   Vegetables  154.6  1.565   0.015 0.008 0.050 0.005       0 0.001\n6:      Legumes    3.5  8.571   0.143 0.029 0.286 0.000       0 0.001\nconstraint energy protein  fat carbs sugar alcohol ghge\n1      lower   9000    55.0 61.8 250.0   0.0       0  0.0\n2      upper  10000   111.5 98.8 334.6  54.8      10  4.7"
  },
  {
    "objectID": "documentation/2_define_problem.html#formulation",
    "href": "documentation/2_define_problem.html#formulation",
    "title": "Part 2: Problem definition",
    "section": "Formulation",
    "text": "Formulation\nAim: find a diet combination that satisfy the nutritional and environmental constraints, while similar to the current diet.\n\nNotation\nWe make the following notation:\n\n\\(x_1, x_2, ..., x_{k}\\) are the target food intake (in grams, or other units) for \\(k\\) food groups.\n\\(X_1, X_2, ..., X_{k}\\) are the current food intake (in grams, or other units).\n\nFor the constraints,\n\n\\(e_1, ..., e_k\\): energy associated with each of the food groups\n\n\\(E\\) is the total energy for all foods, with range between \\(E_{lower}, E_{upper}\\)\nFor example, with the data we have, this range is (9000, 10000).\n\n\\(p_1, ..., p_k\\): protein\n\\(f_1, ..., f_k\\): fat\n\\(c_1, ..., c_k\\): carbs\n\\(s_1, ..., s_k\\): sugar\n\\(a_1, ..., a_k\\): alcohol\n\\(g_1, ..., g_k\\): ghge\n\n\n\nOptimization\nFind a set of \\(x_1, ..., x_k\\) such that the values would\nminimise the squared sum of differences between current diet and target diet:\n\\((x_1 - X_1)^2 + (x_2 - X_2)^2 + ... + (x_k - X_k)^2\\)\nand satisfy the following constraints:\n\\(x_1, ..., x_k &gt;= 0\\) (realistic diet intake can not be negative)\n\\(x_1e_1 + x_2 e_2 + ... + x_k e_k &gt;= E_{lower}\\), total energy above the lower limit\n\\(x_1e_1 + x_2 e_2 + ... + x_k e_k &lt;= E_{upper}\\), total energy below the upper limit\n\\(x_1p_1 + x_2 p_2 + ... + x_k p_k &gt;= P_{lower}\\), total protein below the upper limit\n\\(x_1p_1 + x_2 p_2 + ... + x_k e_k &lt;= P_{upper}\\), total protein below the upper limit\nAnd so on."
  },
  {
    "objectID": "documentation/2_define_problem.html#solve-the-optimization-problem",
    "href": "documentation/2_define_problem.html#solve-the-optimization-problem",
    "title": "Part 2: Problem definition",
    "section": "Solve the optimization problem",
    "text": "Solve the optimization problem\nThis setting is a quadratic program (QP). It is an optimization problem with quadratic objective, and inequality constraints. We do not have equality constraints in this setting.\nWith R, there are various software to find a solution:\n\nnloptr in nloptr package (non-linear optimization),\nconstrOptim in stats package, which relies on optim function,\nsolve.QP in quadprog package\n\namong others."
  },
  {
    "objectID": "documentation/1_understand_data.html",
    "href": "documentation/1_understand_data.html",
    "title": "Part 1: Understand the current diet",
    "section": "",
    "text": "Load the aggregated food groups and their attributes. We have 28 food groups.\nfoods &lt;- read.csv('data/foods.csv', sep = ',')\ndata.table::setDT(foods) # use data.table format\nfoods[1:10,] # show the first 10\n\n                   food intake energy protein   fat carbs sugar alcohol  ghge\n                 &lt;char&gt;  &lt;num&gt;  &lt;num&gt;   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;   &lt;num&gt; &lt;num&gt;\n 1:               Bread  175.4 10.696   0.091 0.030 0.441 0.002       0 0.001\n 2:        Other grains   45.0 14.022   0.100 0.042 0.607 0.011       0 0.002\n 3:               Cakes   35.6 14.185   0.067 0.152 0.424 0.185       0 0.002\n 4:            Potatoes   67.8  3.791   0.021 0.007 0.178 0.000       0 0.000\n 5:          Vegetables  154.6  1.565   0.015 0.008 0.050 0.005       0 0.001\n 6:             Legumes    3.5  8.571   0.143 0.029 0.286 0.000       0 0.001\n 7:      Fruit, berries  171.5  2.729   0.008 0.004 0.134 0.029       0 0.001\n 8:               Juice  111.0  1.928   0.005 0.002 0.103 0.000       0 0.001\n 9:                Nuts    4.3 25.581   0.209 0.535 0.116 0.000       0 0.005\n10: Vegetarian products    0.7  4.286   0.143 0.000 0.000 0.000       0 0.003\nDefine the constraints on\nconstraints &lt;- data.frame(\n  constraint = c('lower', 'upper'), \n  energy = c(9000, 10000), \n  protein = c(55, 111.5), \n  fat = c(61.8, 98.8), \n  carbs = c(250, 334.6), \n  sugar = c(0, 54.8), \n  alcohol = c(0, 10),\n  ghge = c(0, 4.7)\n)\nconstraints\n\n  constraint energy protein  fat carbs sugar alcohol ghge\n1      lower   9000    55.0 61.8 250.0   0.0       0  0.0\n2      upper  10000   111.5 98.8 334.6  54.8      10  4.7"
  },
  {
    "objectID": "documentation/1_understand_data.html#exploratory-data-analysis-on-current-diet",
    "href": "documentation/1_understand_data.html#exploratory-data-analysis-on-current-diet",
    "title": "Part 1: Understand the current diet",
    "section": "Exploratory data analysis on current diet",
    "text": "Exploratory data analysis on current diet\nBefore we construct the optimization problem, we should always understand the data. This helps us picking the important food groups, as well as making sense of the constraints.\n\n# compute the contribution (indiv * intake) for 28 foods\nftotal &lt;- apply(X = foods[, c('energy', 'protein', 'fat', \n                              'carbs', 'sugar', 'alcohol', 'ghge')], \n                MARGIN = 2, \n                FUN = function(x){x*foods$intake})\nrownames(ftotal) &lt;- foods$food # name the rows\nhead(ftotal)\n\n                energy protein    fat   carbs  sugar alcohol   ghge\nBread        1876.0784 15.9614 5.2620 77.3514 0.3508       0 0.1754\nOther grains  630.9900  4.5000 1.8900 27.3150 0.4950       0 0.0900\nCakes         504.9860  2.3852 5.4112 15.0944 6.5860       0 0.0712\nPotatoes      257.0298  1.4238 0.4746 12.0684 0.0000       0 0.0000\nVegetables    241.9490  2.3190 1.2368  7.7300 0.7730       0 0.1546\nLegumes        29.9985  0.5005 0.1015  1.0010 0.0000       0 0.0035\n\n\nWe can also examine whether the current intake satisfy the constraints from above. For example, the energy contribution from bread is \\(175.4 \\times 10.696\\), which is the intake times per unit energy.\n\nt(as.matrix(foods$intake)) %*% as.matrix(foods[, .(energy, protein, fat, carbs, sugar, alcohol, ghge)])\n\n       energy protein     fat    carbs   sugar alcohol   ghge\n[1,] 9314.278 98.2159 85.7644 234.7172 39.2148  8.6498 3.7807\n\n\nIt looks like all categories but carbs fall within the expected range. Carb is slighter lower than the lower threshold.\nNow we can compute the percentage of each one of the 28 food group contribution towards the total.\n\n# divide by total of all 28 (upper constraints)\nfsum &lt;- apply(ftotal, 2, sum)\nfsum\n\n   energy   protein       fat     carbs     sugar   alcohol      ghge \n9314.2778   98.2159   85.7644  234.7172   39.2148    8.6498    3.7807 \n\nfprop &lt;- t(apply(X = ftotal, MARGIN = 1, FUN = function(x){x/fsum}))\nfprop &lt;- round(fprop, digits = 3) # keep 3 digits\nrownames(fprop) &lt;- foods$food\nhead(fprop)\n\n             energy protein   fat carbs sugar alcohol  ghge\nBread         0.201   0.163 0.061 0.330 0.009       0 0.046\nOther grains  0.068   0.046 0.022 0.116 0.013       0 0.024\nCakes         0.054   0.024 0.063 0.064 0.168       0 0.019\nPotatoes      0.028   0.014 0.006 0.051 0.000       0 0.000\nVegetables    0.026   0.024 0.014 0.033 0.020       0 0.041\nLegumes       0.003   0.005 0.001 0.004 0.000       0 0.001\n\n\nFor example, bread contributes to 20% towards the total energy, and 16.3% of the total protein."
  },
  {
    "objectID": "documentation/1_understand_data.html#visualization",
    "href": "documentation/1_understand_data.html#visualization",
    "title": "Part 1: Understand the current diet",
    "section": "Visualization",
    "text": "Visualization\n\n\n\n\n\n\nNote\n\n\n\nIn this section we are mostly focused on energy, intake, ghge. It is easy to extend to other macronutrient categories.\n\n\nWe need some more data manipulation before plotting.\n\n\nShow code\n# first define big groups\ngrain &lt;- c('Bread', 'Other grains', 'Cakes')\nfruit_vege &lt;- c('Potatoes', 'Vegetables', 'Legumes', 'Fruit, berries', \n                'Juice', 'Nuts', 'Vegetarian products')\nmeat &lt;- c('Red meat', 'White meat')\nfish_egg &lt;- c('Fish', 'Eggs')\ndairy &lt;- c('Cream, cream desserts', 'Milk, yoghurt', 'Cheese')\nfats &lt;- c('Butter, margarine, oil')\nbeverages &lt;- c('Coffee, tea', 'Soda, saft', 'Water', \n               'Alcoholic beverages', 'Non-dairy milk')\nsugar_other &lt;- c('Sugar, sweets', 'Snacks', 'Sauces', 'Spices', 'Other')\n\n# reorder food names to make the plot easier to read\nnames_ordered &lt;- c(grain, fruit_vege, meat, fish_egg, \n                   dairy, fats, beverages, sugar_other)\n\nnames_ordered\n\n\n [1] \"Bread\"                  \"Other grains\"           \"Cakes\"                 \n [4] \"Potatoes\"               \"Vegetables\"             \"Legumes\"               \n [7] \"Fruit, berries\"         \"Juice\"                  \"Nuts\"                  \n[10] \"Vegetarian products\"    \"Red meat\"               \"White meat\"            \n[13] \"Fish\"                   \"Eggs\"                   \"Cream, cream desserts\" \n[16] \"Milk, yoghurt\"          \"Cheese\"                 \"Butter, margarine, oil\"\n[19] \"Coffee, tea\"            \"Soda, saft\"             \"Water\"                 \n[22] \"Alcoholic beverages\"    \"Non-dairy milk\"         \"Sugar, sweets\"         \n[25] \"Snacks\"                 \"Sauces\"                 \"Spices\"                \n[28] \"Other\"                 \n\n\n\n\nShow code\n# require some data manip\n# need big food group, food name (smaller food group)\npdt &lt;- data.frame(ftotal) # total \npdt$food_name &lt;- row.names(pdt)\npdt &lt;- data.table::setDT(pdt)\n\n# attach big group\npdt[food_name %in% grain, big_group := 'grain']\npdt[food_name %in% fruit_vege, big_group := 'fruit_vege']\npdt[food_name %in% meat, big_group := 'meat']\npdt[food_name %in% fish_egg, big_group := 'fish_egg']\npdt[food_name %in% dairy, big_group := 'dairy']\npdt[food_name %in% fats, big_group := 'fats']\npdt[food_name %in% beverages, big_group := 'beverages']\npdt[food_name %in% sugar_other, big_group := 'sugar_other']\n\n# make long format\npdt_long &lt;- tidyr::pivot_longer(pdt, cols = -c(food_name, big_group),\n                                names_to = 'category')\npdt_long &lt;- data.table::setDT(pdt_long)\n\n# new variable, food_name_order\npdt_long$food_name_order &lt;- factor(pdt_long$food_name, \n                                   levels = names_ordered, \n                                   labels = names_ordered)\n\n\n\nEnergy contribution from 28 food groups\nIn total these 28 food groups contribute to 9314kJ. Here is a breakdown of each food groups, colored by different types of food (crude).\n\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(RColorBrewer)\n\np1 &lt;- ggplot(data = pdt_long[category == 'energy'], \n             aes(x = food_name_order, y = value, fill = big_group))\np1 &lt;- p1 + geom_bar(stat = 'identity')\np1 &lt;- p1 + coord_flip()\np1 &lt;- p1 + theme_bw()\np1 &lt;- p1 + scale_fill_brewer(palette = 'Dark2')\np1 &lt;- p1 + labs(title = 'Energy (multiplied by food intake)', \n                x = 'Food groups', \n                y = 'Energy')\np1 &lt;- p1 + theme(axis.text = element_text(size = 12), \n                   axis.title = element_text(size = 12), \n                   plot.title = element_text(size = 20))\np1\n\n\n\n\n\n\n\n\n\n\nGHGE contribution from 28 food groups\nWe can also plot a different metric, say GHGE. We can see that red meat is the largest contributor, followed by cheese and milk (dairy products).\n\n\nShow code\np2 &lt;- ggplot(data = pdt_long[category == 'ghge'], \n             aes(x = food_name_order, y = value, fill = big_group))\np2 &lt;- p2 + geom_bar(stat = 'identity')\np2 &lt;- p2 + coord_flip()\np2 &lt;- p2 + theme_bw()\np2 &lt;- p2 + scale_fill_brewer(palette = 'Dark2')\np2 &lt;- p2 + labs(title = 'GHGE (multiplied by food intake)', \n                x = 'Food groups', \n                y = 'GHGE')\np2 &lt;- p2 + theme(axis.text = element_text(size = 12), \n                 axis.title = element_text(size = 12), \n                 plot.title = element_text(size = 20))\n\np2\n\n\n\n\n\n\n\n\n\n\n\nEnergy vs GHGE\nWe can also show the per unit contribution to energy and GHGE. The size of the bubbles are the amount of consumption: the bigger the more consumed.\n\n\nShow code\npdfd &lt;- data.table::setDT(foods)\n# remove water, outlier\npdfd &lt;- pdfd[food != 'Water']\n\n\n# attach label \npdfd[food %in% grain, big_group := 'grain']\npdfd[food %in% fruit_vege, big_group := 'fruit_vege']\npdfd[food %in% meat, big_group := 'meat']\npdfd[food %in% fish_egg, big_group := 'fish_egg']\npdfd[food %in% dairy, big_group := 'dairy']\npdfd[food %in% fats, big_group := 'fats']\npdfd[food %in% beverages, big_group := 'beverages']\npdfd[food %in% sugar_other, big_group := 'sugar_other']\n\n\np3 &lt;- ggplot(data = pdfd, \n             aes(x = energy, y = ghge, size = intake, \n                 label = food, color = big_group))\np3 &lt;- p3 + geom_point(alpha = 0.3) + xlim(-3, 30) + ylim(-0.002, 0.015)\np3 &lt;- p3 + scale_size(range = c(0.1, 20))\np3 &lt;- p3 + geom_text_repel(size = 4, max.overlaps = 15)\n# p3 &lt;- p3 + geom_text(size = 3, check_overlap = T)\np3 &lt;- p3 + theme_bw()\np3 &lt;- p3 + scale_color_brewer(palette = 'Dark2')\np3 &lt;- p3 + labs(title = 'Energy vs GHGE per unit food (group)', \n                x = 'Energy (per unit)', \n                y = 'GHGE (per unit)')\np3\n\n\n\n\n\n\n\n\n\n\n\nProportion for 5 metrics\nFinally we present the percentage contribution of 28 food groups towards 5 categories.\n\n\nShow code\npdfp &lt;- data.frame(fprop) # total \npdfp$food_name &lt;- row.names(pdfp)\n\n# attach big group\ndata.table::setDT(pdfp)\npdfp[food_name %in% grain, big_group := 'grain']\npdfp[food_name %in% fruit_vege, big_group := 'fruit_vege']\npdfp[food_name %in% meat, big_group := 'meat']\npdfp[food_name %in% fish_egg, big_group := 'fish_egg']\npdfp[food_name %in% dairy, big_group := 'dairy']\npdfp[food_name %in% fats, big_group := 'fats']\npdfp[food_name %in% beverages, big_group := 'beverages']\npdfp[food_name %in% sugar_other, big_group := 'sugar_other']\n\npdfp_long &lt;- tidyr::pivot_longer(pdfp, cols = -c(food_name, big_group), names_to = 'category')\npdfp_long &lt;- data.table::setDT(pdfp_long)\n\n# also add orders here\npdfp_long$food_name_order &lt;- factor(pdfp_long$food_name, \n                                   levels = names_ordered, \n                                   labels = names_ordered)\n\n# plot \np4 &lt;- ggplot(data = pdfp_long[category %in% c('energy', 'protein', 'fat', 'carbs','ghge')], \n             aes(x = food_name_order, y = value, fill = big_group))\np4 &lt;- p4 + geom_bar(stat = 'identity')\np4 &lt;- p4 + coord_flip()\np4 &lt;- p4 + facet_wrap(~category, ncol = 5)\np4 &lt;- p4 + scale_fill_brewer(palette = 'Dark2')\np4 &lt;- p4 + labs(title = 'Proportion of food contribution',\n                subtitle = 'Each category sums up to 1',\n                x = 'Food groups', \n                y = 'Percentage')\np4 &lt;- p4 + theme_bw()\np4 &lt;- p4 + theme(axis.text = element_text(size = 10), \n                 axis.title = element_text(size = 10), \n                 plot.title = element_text(size = 15), \n                 strip.text = element_text(size = 12), \n                 legend.position = 'none')\np4"
  },
  {
    "objectID": "archive/7_func_factory.html",
    "href": "archive/7_func_factory.html",
    "title": "Flexible input with function factory",
    "section": "",
    "text": "When we want to make systematic production of constraints for the optimization, it is important to use functions. Given the special requirement as input when the constraint function enters the algorithm, where the argument is x and output is a scalar value, we need to treat this function as an object produced by our function factory - so that we can tweak the elements outside the function itself.\nThe basic structure looks like this.\nf_make_constraint_function &lt;- function(constraint_values, tag_outcomes){\n  \n  # constraint_values &lt;- constval$val_std\n  # tag_outcomes &lt;- c('energy', 'ghge')\n  \n  # this is the function we want to return\n  f_constr &lt;- function (x) {\n    \n    energy &lt;- constraint_values$energy\n    protein &lt;- constraint_values$protein\n\n    # a few computed constraints, where x is the new diet\n    # it should be the complete set of constrants, \n    # as we select in the last step from \n    energy_output_lwr &lt;- - sum(x * energy$unit_contrib) + energy$lwr\n    energy_output_upr &lt;- sum(x * energy$unit_contrib) - energy$upr\n    \n    protein_output_lwr &lt;- - sum(x * protein$unit_contrib) + protein$lwr\n    protein_output_upr &lt;- sum(x * protein$unit_contrib) - protein$upr\n    \n    \n    # collect in a named vector\n    constr_all &lt;- c(\n      energy_lwr = energy_output_lwr, \n      energy_upr = energy_output_upr, \n      \n      protein_lwr = protein_output_lwr, \n      protein_upr = protein_output_upr \n      \n     )\n    \n    # key step:\n    # select the ones that we want, for example, tag1\n    # need to watch out for the names \n    tags_lwr &lt;- paste0(tag_outcomes, '_lwr')\n    tags_upr &lt;- paste0(tag_outcomes, '_upr')\n    \n    constr &lt;- constr_all[c(tags_lwr, tags_upr)]\n    \n    # res &lt;- list(constr = constr, \n    #             tags_lwr = tags_lwr, \n    #             tags_upr = tags_upr)\n    \n    return (constr)\n  }\n  \n  # possibly better to also return the input\n  \n  return(f_constr)\n}\nWhen calling function, can do this\n# in this setting, the input data must have the columns required by the ff\n  f_ineq &lt;- f_make_constraint_function(\n    constraint_values = constraint_val, # list of constraints\n    tag_outcomes = tag_outcomes)"
  },
  {
    "objectID": "archive/7_func_factory.html#an-example-of-a-function-factory",
    "href": "archive/7_func_factory.html#an-example-of-a-function-factory",
    "title": "Flexible input with function factory",
    "section": "An example of a function factory",
    "text": "An example of a function factory\n\nf_out &lt;- function(x, constant){\n  f &lt;- function(y){\n    res &lt;- y ^ x + constant\n    return(res)\n  }\n  return(f)\n}\n\n\n# it creates a function that at its core, the inner function\n# create a function that raise to the power of 2\n# 3^2 + 1\nf_out1 &lt;- f_out(x = 2, constant = 1) \nf_out1(y=3)\n\n[1] 10\n\n# create a function that raise to the power of 1\n# 3^1 + 1\nf_out2 &lt;- f_out(x=1, constant = 1) \nf_out2(y=3)\n\n[1] 4"
  },
  {
    "objectID": "archive/2_define_problem.html",
    "href": "archive/2_define_problem.html",
    "title": "Part 2: Problem definition",
    "section": "",
    "text": "The information we have are the food groups and constraints.\nfoods &lt;- read.csv('data/foods.csv', sep = ',')\ndata.table::setDT(foods) # use data.table format\nhead(foods)  # print the fist 6\n\n           food intake energy protein   fat carbs sugar alcohol  ghge\n         &lt;char&gt;  &lt;num&gt;  &lt;num&gt;   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;   &lt;num&gt; &lt;num&gt;\n1:        Bread  175.4 10.696   0.091 0.030 0.441 0.002       0 0.001\n2: Other grains   45.0 14.022   0.100 0.042 0.607 0.011       0 0.002\n3:        Cakes   35.6 14.185   0.067 0.152 0.424 0.185       0 0.002\n4:     Potatoes   67.8  3.791   0.021 0.007 0.178 0.000       0 0.000\n5:   Vegetables  154.6  1.565   0.015 0.008 0.050 0.005       0 0.001\n6:      Legumes    3.5  8.571   0.143 0.029 0.286 0.000       0 0.001\nconstraint energy protein  fat carbs sugar alcohol ghge\n1      lower   9000    55.0 61.8 250.0   0.0       0  0.0\n2      upper  10000   111.5 98.8 334.6  54.8      10  4.7"
  },
  {
    "objectID": "archive/2_define_problem.html#formulation",
    "href": "archive/2_define_problem.html#formulation",
    "title": "Part 2: Problem definition",
    "section": "Formulation",
    "text": "Formulation\nAim: find a diet combination that satisfy the nutritional and environmental constraints, while similar to the current diet.\n\nNotation\nWe make the following notation:\n\n\\(x_1, x_2, ..., x_{k}\\) are the target food intake (in grams, or other units) for \\(k\\) food groups.\n\\(X_1, X_2, ..., X_{k}\\) are the current food intake (in grams, or other units).\n\nFor the constraints,\n\n\\(e_1, ..., e_k\\): energy associated with each of the food groups\n\n\\(E\\) is the total energy for all foods, with range between \\(E_{lower}, E_{upper}\\)\nFor example, with the data we have, this range is (9000, 10000).\n\n\\(p_1, ..., p_k\\): protein\n\\(f_1, ..., f_k\\): fat\n\\(c_1, ..., c_k\\): carbs\n\\(s_1, ..., s_k\\): sugar\n\\(a_1, ..., a_k\\): alcohol\n\\(g_1, ..., g_k\\): ghge\n\n\n\nOptimization\nFind a set of \\(x_1, ..., x_k\\) such that the values would\nminimise the squared sum of differences between current diet and target diet:\n\\((x_1 - X_1)^2 + (x_2 - X_2)^2 + ... + (x_k - X_k)^2\\)\nand satisfy the following constraints:\n\\(x_1, ..., x_k &gt;= 0\\) (realistic diet intake can not be negative)\n\\(x_1e_1 + x_2 e_2 + ... + x_k e_k &gt;= E_{lower}\\), total energy above the lower limit\n\\(x_1e_1 + x_2 e_2 + ... + x_k e_k &lt;= E_{upper}\\), total energy below the upper limit\n\\(x_1p_1 + x_2 p_2 + ... + x_k p_k &gt;= P_{lower}\\), total protein below the upper limit\n\\(x_1p_1 + x_2 p_2 + ... + x_k e_k &lt;= P_{upper}\\), total protein below the upper limit\nAnd so on."
  },
  {
    "objectID": "archive/2_define_problem.html#solve-the-optimization-problem",
    "href": "archive/2_define_problem.html#solve-the-optimization-problem",
    "title": "Part 2: Problem definition",
    "section": "Solve the optimization problem",
    "text": "Solve the optimization problem\nThis setting is a quadratic program (QP). It is an optimization problem with quadratic objective, and inequality constraints. We do not have equality constraints in this setting.\nWith R, there are various software to find a solution:\n\nnloptr in nloptr package (non-linear optimization),\nconstrOptim in stats package, which relies on optim function,\nsolve.QP in quadprog package\n\namong others."
  },
  {
    "objectID": "archive/index.html",
    "href": "archive/index.html",
    "title": "Documentation",
    "section": "",
    "text": "It is important to document while you go.\n\n\n\n\n\n\n\n\n\nTitle\n\n\n\n\n\n\nPart 1: Understand the current diet\n\n\n\n\nPart 2: Problem definition\n\n\n\n\nPart 3: A simple problem with 3 foods and 3 constraints\n\n\n\n\nPart 4: Troubleshoot part 3\n\n\n\n\nPart 5: 10 foods\n\n\n\n\nNote on the input data\n\n\n\n\nFlexible input with function factory\n\n\n\n\nLiterature review and article planning\n\n\n\n\nPackage development log\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "archive/1_understand_data.html",
    "href": "archive/1_understand_data.html",
    "title": "Part 1: Understand the current diet",
    "section": "",
    "text": "Load the aggregated food groups and their attributes. We have 28 food groups.\nfoods &lt;- read.csv('data/foods.csv', sep = ',')\ndata.table::setDT(foods) # use data.table format\nfoods[1:10,] # show the first 10\n\n                   food intake energy protein   fat carbs sugar alcohol  ghge\n                 &lt;char&gt;  &lt;num&gt;  &lt;num&gt;   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;   &lt;num&gt; &lt;num&gt;\n 1:               Bread  175.4 10.696   0.091 0.030 0.441 0.002       0 0.001\n 2:        Other grains   45.0 14.022   0.100 0.042 0.607 0.011       0 0.002\n 3:               Cakes   35.6 14.185   0.067 0.152 0.424 0.185       0 0.002\n 4:            Potatoes   67.8  3.791   0.021 0.007 0.178 0.000       0 0.000\n 5:          Vegetables  154.6  1.565   0.015 0.008 0.050 0.005       0 0.001\n 6:             Legumes    3.5  8.571   0.143 0.029 0.286 0.000       0 0.001\n 7:      Fruit, berries  171.5  2.729   0.008 0.004 0.134 0.029       0 0.001\n 8:               Juice  111.0  1.928   0.005 0.002 0.103 0.000       0 0.001\n 9:                Nuts    4.3 25.581   0.209 0.535 0.116 0.000       0 0.005\n10: Vegetarian products    0.7  4.286   0.143 0.000 0.000 0.000       0 0.003\nDefine the constraints on\nconstraints &lt;- data.frame(\n  constraint = c('lower', 'upper'), \n  energy = c(9000, 10000), \n  protein = c(55, 111.5), \n  fat = c(61.8, 98.8), \n  carbs = c(250, 334.6), \n  sugar = c(0, 54.8), \n  alcohol = c(0, 10),\n  ghge = c(0, 4.7)\n)\nconstraints\n\n  constraint energy protein  fat carbs sugar alcohol ghge\n1      lower   9000    55.0 61.8 250.0   0.0       0  0.0\n2      upper  10000   111.5 98.8 334.6  54.8      10  4.7"
  },
  {
    "objectID": "archive/1_understand_data.html#exploratory-data-analysis-on-current-diet",
    "href": "archive/1_understand_data.html#exploratory-data-analysis-on-current-diet",
    "title": "Part 1: Understand the current diet",
    "section": "Exploratory data analysis on current diet",
    "text": "Exploratory data analysis on current diet\nBefore we construct the optimization problem, we should always understand the data. This helps us picking the important food groups, as well as making sense of the constraints.\n\n# compute the contribution (indiv * intake) for 28 foods\nftotal &lt;- apply(X = foods[, c('energy', 'protein', 'fat', \n                              'carbs', 'sugar', 'alcohol', 'ghge')], \n                MARGIN = 2, \n                FUN = function(x){x*foods$intake})\nrownames(ftotal) &lt;- foods$food # name the rows\nhead(ftotal)\n\n                energy protein    fat   carbs  sugar alcohol   ghge\nBread        1876.0784 15.9614 5.2620 77.3514 0.3508       0 0.1754\nOther grains  630.9900  4.5000 1.8900 27.3150 0.4950       0 0.0900\nCakes         504.9860  2.3852 5.4112 15.0944 6.5860       0 0.0712\nPotatoes      257.0298  1.4238 0.4746 12.0684 0.0000       0 0.0000\nVegetables    241.9490  2.3190 1.2368  7.7300 0.7730       0 0.1546\nLegumes        29.9985  0.5005 0.1015  1.0010 0.0000       0 0.0035\n\n\nWe can also examine whether the current intake satisfy the constraints from above. For example, the energy contribution from bread is \\(175.4 \\times 10.696\\), which is the intake times per unit energy.\n\nt(as.matrix(foods$intake)) %*% as.matrix(foods[, .(energy, protein, fat, carbs, sugar, alcohol, ghge)])\n\n       energy protein     fat    carbs   sugar alcohol   ghge\n[1,] 9314.278 98.2159 85.7644 234.7172 39.2148  8.6498 3.7807\n\n\nIt looks like all categories but carbs fall within the expected range. Carb is slighter lower than the lower threshold.\nNow we can compute the percentage of each one of the 28 food group contribution towards the total.\n\n# divide by total of all 28 (upper constraints)\nfsum &lt;- apply(ftotal, 2, sum)\nfsum\n\n   energy   protein       fat     carbs     sugar   alcohol      ghge \n9314.2778   98.2159   85.7644  234.7172   39.2148    8.6498    3.7807 \n\nfprop &lt;- t(apply(X = ftotal, MARGIN = 1, FUN = function(x){x/fsum}))\nfprop &lt;- round(fprop, digits = 3) # keep 3 digits\nrownames(fprop) &lt;- foods$food\nhead(fprop)\n\n             energy protein   fat carbs sugar alcohol  ghge\nBread         0.201   0.163 0.061 0.330 0.009       0 0.046\nOther grains  0.068   0.046 0.022 0.116 0.013       0 0.024\nCakes         0.054   0.024 0.063 0.064 0.168       0 0.019\nPotatoes      0.028   0.014 0.006 0.051 0.000       0 0.000\nVegetables    0.026   0.024 0.014 0.033 0.020       0 0.041\nLegumes       0.003   0.005 0.001 0.004 0.000       0 0.001\n\n\nFor example, bread contributes to 20% towards the total energy, and 16.3% of the total protein."
  },
  {
    "objectID": "archive/1_understand_data.html#visualization",
    "href": "archive/1_understand_data.html#visualization",
    "title": "Part 1: Understand the current diet",
    "section": "Visualization",
    "text": "Visualization\n\n\n\n\n\n\nNote\n\n\n\nIn this section we are mostly focused on energy, intake, ghge. It is easy to extend to other macronutrient categories.\n\n\nWe need some more data manipulation before plotting.\n\n\nShow code\n# first define big groups\ngrain &lt;- c('Bread', 'Other grains', 'Cakes')\nfruit_vege &lt;- c('Potatoes', 'Vegetables', 'Legumes', 'Fruit, berries', \n                'Juice', 'Nuts', 'Vegetarian products')\nmeat &lt;- c('Red meat', 'White meat')\nfish_egg &lt;- c('Fish', 'Eggs')\ndairy &lt;- c('Cream, cream desserts', 'Milk, yoghurt', 'Cheese')\nfats &lt;- c('Butter, margarine, oil')\nbeverages &lt;- c('Coffee, tea', 'Soda, saft', 'Water', \n               'Alcoholic beverages', 'Non-dairy milk')\nsugar_other &lt;- c('Sugar, sweets', 'Snacks', 'Sauces', 'Spices', 'Other')\n\n# reorder food names to make the plot easier to read\nnames_ordered &lt;- c(grain, fruit_vege, meat, fish_egg, \n                   dairy, fats, beverages, sugar_other)\n\nnames_ordered\n\n\n [1] \"Bread\"                  \"Other grains\"           \"Cakes\"                 \n [4] \"Potatoes\"               \"Vegetables\"             \"Legumes\"               \n [7] \"Fruit, berries\"         \"Juice\"                  \"Nuts\"                  \n[10] \"Vegetarian products\"    \"Red meat\"               \"White meat\"            \n[13] \"Fish\"                   \"Eggs\"                   \"Cream, cream desserts\" \n[16] \"Milk, yoghurt\"          \"Cheese\"                 \"Butter, margarine, oil\"\n[19] \"Coffee, tea\"            \"Soda, saft\"             \"Water\"                 \n[22] \"Alcoholic beverages\"    \"Non-dairy milk\"         \"Sugar, sweets\"         \n[25] \"Snacks\"                 \"Sauces\"                 \"Spices\"                \n[28] \"Other\"                 \n\n\n\n\nShow code\n# require some data manip\n# need big food group, food name (smaller food group)\npdt &lt;- data.frame(ftotal) # total \npdt$food_name &lt;- row.names(pdt)\npdt &lt;- data.table::setDT(pdt)\n\n# attach big group\npdt[food_name %in% grain, big_group := 'grain']\npdt[food_name %in% fruit_vege, big_group := 'fruit_vege']\npdt[food_name %in% meat, big_group := 'meat']\npdt[food_name %in% fish_egg, big_group := 'fish_egg']\npdt[food_name %in% dairy, big_group := 'dairy']\npdt[food_name %in% fats, big_group := 'fats']\npdt[food_name %in% beverages, big_group := 'beverages']\npdt[food_name %in% sugar_other, big_group := 'sugar_other']\n\n# make long format\npdt_long &lt;- tidyr::pivot_longer(pdt, cols = -c(food_name, big_group),\n                                names_to = 'category')\npdt_long &lt;- data.table::setDT(pdt_long)\n\n# new variable, food_name_order\npdt_long$food_name_order &lt;- factor(pdt_long$food_name, \n                                   levels = names_ordered, \n                                   labels = names_ordered)\n\n\n\nEnergy contribution from 28 food groups\nIn total these 28 food groups contribute to 9314kJ. Here is a breakdown of each food groups, colored by different types of food (crude).\n\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(RColorBrewer)\n\np1 &lt;- ggplot(data = pdt_long[category == 'energy'], \n             aes(x = food_name_order, y = value, fill = big_group))\np1 &lt;- p1 + geom_bar(stat = 'identity')\np1 &lt;- p1 + coord_flip()\np1 &lt;- p1 + theme_bw()\np1 &lt;- p1 + scale_fill_brewer(palette = 'Dark2')\np1 &lt;- p1 + labs(title = 'Energy (multiplied by food intake)', \n                x = 'Food groups', \n                y = 'Energy')\np1 &lt;- p1 + theme(axis.text = element_text(size = 12), \n                   axis.title = element_text(size = 12), \n                   plot.title = element_text(size = 20))\np1\n\n\n\n\n\n\n\n\n\n\nGHGE contribution from 28 food groups\nWe can also plot a different metric, say GHGE. We can see that red meat is the largest contributor, followed by cheese and milk (dairy products).\n\n\nShow code\np2 &lt;- ggplot(data = pdt_long[category == 'ghge'], \n             aes(x = food_name_order, y = value, fill = big_group))\np2 &lt;- p2 + geom_bar(stat = 'identity')\np2 &lt;- p2 + coord_flip()\np2 &lt;- p2 + theme_bw()\np2 &lt;- p2 + scale_fill_brewer(palette = 'Dark2')\np2 &lt;- p2 + labs(title = 'GHGE (multiplied by food intake)', \n                x = 'Food groups', \n                y = 'GHGE')\np2 &lt;- p2 + theme(axis.text = element_text(size = 12), \n                 axis.title = element_text(size = 12), \n                 plot.title = element_text(size = 20))\n\np2\n\n\n\n\n\n\n\n\n\n\n\nEnergy vs GHGE\nWe can also show the per unit contribution to energy and GHGE. The size of the bubbles are the amount of consumption: the bigger the more consumed.\n\n\nShow code\npdfd &lt;- data.table::setDT(foods)\n# remove water, outlier\npdfd &lt;- pdfd[food != 'Water']\n\n\n# attach label \npdfd[food %in% grain, big_group := 'grain']\npdfd[food %in% fruit_vege, big_group := 'fruit_vege']\npdfd[food %in% meat, big_group := 'meat']\npdfd[food %in% fish_egg, big_group := 'fish_egg']\npdfd[food %in% dairy, big_group := 'dairy']\npdfd[food %in% fats, big_group := 'fats']\npdfd[food %in% beverages, big_group := 'beverages']\npdfd[food %in% sugar_other, big_group := 'sugar_other']\n\n\np3 &lt;- ggplot(data = pdfd, \n             aes(x = energy, y = ghge, size = intake, \n                 label = food, color = big_group))\np3 &lt;- p3 + geom_point(alpha = 0.3) + xlim(-3, 30) + ylim(-0.002, 0.015)\np3 &lt;- p3 + scale_size(range = c(0.1, 20))\np3 &lt;- p3 + geom_text_repel(size = 4, max.overlaps = 15)\n# p3 &lt;- p3 + geom_text(size = 3, check_overlap = T)\np3 &lt;- p3 + theme_bw()\np3 &lt;- p3 + scale_color_brewer(palette = 'Dark2')\np3 &lt;- p3 + labs(title = 'Energy vs GHGE per unit food (group)', \n                x = 'Energy (per unit)', \n                y = 'GHGE (per unit)')\np3\n\n\n\n\n\n\n\n\n\n\n\nProportion for 5 metrics\nFinally we present the percentage contribution of 28 food groups towards 5 categories.\n\n\nShow code\npdfp &lt;- data.frame(fprop) # total \npdfp$food_name &lt;- row.names(pdfp)\n\n# attach big group\ndata.table::setDT(pdfp)\npdfp[food_name %in% grain, big_group := 'grain']\npdfp[food_name %in% fruit_vege, big_group := 'fruit_vege']\npdfp[food_name %in% meat, big_group := 'meat']\npdfp[food_name %in% fish_egg, big_group := 'fish_egg']\npdfp[food_name %in% dairy, big_group := 'dairy']\npdfp[food_name %in% fats, big_group := 'fats']\npdfp[food_name %in% beverages, big_group := 'beverages']\npdfp[food_name %in% sugar_other, big_group := 'sugar_other']\n\npdfp_long &lt;- tidyr::pivot_longer(pdfp, cols = -c(food_name, big_group), names_to = 'category')\npdfp_long &lt;- data.table::setDT(pdfp_long)\n\n# also add orders here\npdfp_long$food_name_order &lt;- factor(pdfp_long$food_name, \n                                   levels = names_ordered, \n                                   labels = names_ordered)\n\n# plot \np4 &lt;- ggplot(data = pdfp_long[category %in% c('energy', 'protein', 'fat', 'carbs','ghge')], \n             aes(x = food_name_order, y = value, fill = big_group))\np4 &lt;- p4 + geom_bar(stat = 'identity')\np4 &lt;- p4 + coord_flip()\np4 &lt;- p4 + facet_wrap(~category, ncol = 5)\np4 &lt;- p4 + scale_fill_brewer(palette = 'Dark2')\np4 &lt;- p4 + labs(title = 'Proportion of food contribution',\n                subtitle = 'Each category sums up to 1',\n                x = 'Food groups', \n                y = 'Percentage')\np4 &lt;- p4 + theme_bw()\np4 &lt;- p4 + theme(axis.text = element_text(size = 10), \n                 axis.title = element_text(size = 10), \n                 plot.title = element_text(size = 15), \n                 strip.text = element_text(size = 12), \n                 legend.position = 'none')\np4"
  },
  {
    "objectID": "archive/6_standard_input.html",
    "href": "archive/6_standard_input.html",
    "title": "Note on the input data",
    "section": "",
    "text": "This is the current implementation of input needed for the optimization algorithm."
  },
  {
    "objectID": "archive/6_standard_input.html#what-does-the-algorithm-require",
    "href": "archive/6_standard_input.html#what-does-the-algorithm-require",
    "title": "Note on the input data",
    "section": "What does the algorithm require",
    "text": "What does the algorithm require\nThe current aim of optimization is to find a set of values (‘diet’) that is similar to the current diet, yet satisfies some constraints on nutrition and environment impact.\nFor the objective function,\n\na vector of current diet (in grams), diet0. This is used to compute the deviation (sum of squares) between the new (target) and current.\n\nFor the inequality constraints (standaradized or original),\n\na list of constraint values, ordered by tag_outcome (e.g. energy, ghge)\ninside each tag_outcome such as energy,\n\nunit_contrib for each food: a vector of size n\nlwr, upr: constraint lower and upper bound. This is after reduction.\n\n\n\n\n\n\n\n\nConstraint bounds\n\n\n\nThe values of constraint bounds need to be pre-computed before entering the algorithm - that means, setting the reduction on ghge is already done."
  },
  {
    "objectID": "archive/6_standard_input.html#how-are-constaints-computed",
    "href": "archive/6_standard_input.html#how-are-constaints-computed",
    "title": "Note on the input data",
    "section": "How are constaints computed",
    "text": "How are constaints computed\n\nThe total contribution of a diet is a weighted sum of all food intake (diet, in gram) and contribution to this particular nutrition / environment impact outcome (tag_outcome). For instance, in total, the current diet of 188g bread and 165g red meat contributes to X1 units of energy; X2 units of ghge.\nThe current diet is the average for each food group among all subjects who we collected data from. The lwr, upr of the current are used to limit the search region for the new diet. In the current implementation, they are 5% and 95% quantiles from all the subject.\nThe inequality constraints (e.g. energy) requires two values: constr_min, constr_max. This means that the computed total contribution of the new diet need to be between these two. In the current implementation:\n\nminimum (lower bound) is 0.9 times of the total contribution\nmaximum (upper bound) is the same of the total contribution\nif we want to reduce ghge, then multiply a factor to the two values above.\n\nIn addition to the raw values, we also implement a standardized version for each of the tag_outcome.\n\n\n\n\n\n\nRationale for standardization\n\n\n\nWe wish to have roughly the same scale for different tag_outcomes. The current implementation takes the standard deviation across all foods for a specific tag (e.g. energy), then divide by this value. This is only ONE of the many ways to standardize for numerical stability.\nAlternatively, it is also possible to multiply a fixed constant such as 1000 to ghge. The interpretation could be better. As long the original diet vector is intact (meaning that the ratio between the original food 1, food 2 are unchanged), one can artificially modify the coefficients as they wish.\nHowever, it is important to keep consistency in the values and the inequality function!\n\n\n\ndemo_input &lt;- readRDS('data/demo_9foods_input.rda')\ndemo_input$current_diet\n\n       food_name intake_mean intake_lwr intake_upr\n1          Bread   188.31866  18.831866      343.8\n2     Vegetables    72.79364   7.279364      230.7\n3       Red meat   165.98669  16.598669      419.7\n4  Milk, yoghurt   184.13142  18.413142      552.7\n5           Fish   126.26154  12.626154      299.6\n6         Cheese    74.61885   7.461885      302.9\n7           Eggs    26.41185   2.641185      111.6\n8 Fruit, berries   328.64505  32.864505      900.6\n9       Potatoes    46.59652   4.659652      121.6\n\n\n\ndemo_input$unit_contrib\n\n       food_name    energy     protein       carbs         fat    vitaminc\n1          Bread 10.695553 0.091220068 0.441277081 0.030216648 0.005701254\n2     Vegetables  3.790560 0.020648968 0.178466077 0.007374631 0.132743363\n3       Red meat  1.565330 0.014877102 0.049805951 0.008408797 0.206985770\n4  Milk, yoghurt  2.728863 0.007580175 0.134110787 0.004081633 0.198250729\n5           Fish  8.341837 0.172619048 0.013605442 0.139455782 0.042517007\n6         Cheese  6.086331 0.169784173 0.024460432 0.074820144 0.000000000\n7           Eggs  6.178862 0.130081301 0.004065041 0.105691057 0.000000000\n8 Fruit, berries  1.979745 0.035935969 0.055864097 0.011107481 0.000000000\n9       Potatoes 13.502304 0.216589862 0.048387097 0.241935484 0.000000000\n     calcium    ghge\n1 0.33637400 0.00107\n2 0.08849558 0.00037\n3 0.25873221 0.00103\n4 0.15160350 0.00072\n5 0.11054422 0.01294\n6 0.24460432 0.00311\n7 0.52845529 0.00215\n8 1.28062725 0.00143\n9 6.58986175 0.01030\n\n\n\ndemo_constraints &lt;- readRDS('data/demo_9foods_constraints.rda')\ndemo_constraints\n\n  tag_outcome total_contrib_raw total_contrib_std    std_coef constr_min_std\n1      energy       6002.791497         1460.2828   0.2432673      1314.2545\n2     protein         82.349152         1034.1940  12.5586475       930.7746\n3       carbs        153.317587         1108.5790   7.2306054       997.7211\n4         fat         49.280653          606.6639  12.3103864       545.9975\n5    vitaminc         86.965858          976.6934  11.2307682       879.0241\n6     calcium        914.751986          434.7877   0.4753067       391.3090\n7        ghge          3.404557          736.7069 216.3885105       663.0362\n  cosntr_max_std constr_min_raw constr_max_raw\n1      1460.2828    5402.512347    6002.791497\n2      1034.1940      74.114237      82.349152\n3      1108.5790     137.985828     153.317587\n4       606.6639      44.352588      49.280653\n5       976.6934      78.269272      86.965858\n6       434.7877     823.276788     914.751986\n7       736.7069       3.064101       3.404557"
  },
  {
    "objectID": "software/index.html",
    "href": "software/index.html",
    "title": "Software",
    "section": "",
    "text": "The R package noreden provides user-friendly functions to facilitate sustainable diet discovery. Given information for food (groups) and their nutritional and environmental impact information, the aim is to find a new diet (i.e. set of foods) that is healthy, acceptable, yet more sustainable in terms of environmental impact.\nPlease refer to the documentation for noreden for more information.\nIntroductory vignette can be read here."
  },
  {
    "objectID": "documentation/optimization_problem.html",
    "href": "documentation/optimization_problem.html",
    "title": "1. Optimization problem",
    "section": "",
    "text": "Aim: find a diet combination that satisfy the nutritional and environmental constraints, while similar to the current diet."
  },
  {
    "objectID": "notes_internal/x_organise_code.html",
    "href": "notes_internal/x_organise_code.html",
    "title": "Notes",
    "section": "",
    "text": "Attaching a copy of the code with annotations. Also adding a file that includes the input files I’ve used for one of my analyses - I have copies of the same input files with some small changes made for each of the 4 diet scenarios I’ve run. Within each scenario there are 9 files that represent the different step-wise carbon footprint constraints (0%, -5%, -10%, -15%, -20%) etc. In each of these files you’ll find the code I ran for that specific iteration, along with the input data, nutrient constraints, nutrient reference values (for comparing results to), and realism constraints. Just adding these so you can see the way the data has been set up.\nOne important element in Rcplex is that the constraint matrix needs to have the same dimensions vertically and horizontally. So if there are 20 rows of nutrient constraints, there need to be 20 columns of nutrient input data, etc."
  },
  {
    "objectID": "notes_internal/x_organise_code.html#objective-function",
    "href": "notes_internal/x_organise_code.html#objective-function",
    "title": "Notes",
    "section": "Objective function",
    "text": "Objective function\nobs here is the same as first column in realism\nif we have 53 food groups, 10 nutrients:\ndimension requirement:\nobjective: min 1/2 x_transpose Qmat x + c_transpose x\n\nx, x_transpose: vector, 53 by 1; 1 by 53\nQmat (diagnal matrix), 53 by 53\nc, c_transpose: 53 by 1; 1 by 53\n\ninequality constraint: Amat x &lt;= b\n\nAmat: 10 by 53\nx: 53 by 1\nb: 10 by 1\n\nconstraint on x bounds\n\nlb: 53 by 1\nub: 53 by 1"
  },
  {
    "objectID": "notes_internal/x_organise_code.html#result-processing",
    "href": "notes_internal/x_organise_code.html#result-processing",
    "title": "Notes",
    "section": "Result processing",
    "text": "Result processing\n\nNutrients\ndiet\ndiet departure\nruminant meat departure\nred meat departure\ntotal meat departure"
  },
  {
    "objectID": "documentation/optimization_problem.html#formulation",
    "href": "documentation/optimization_problem.html#formulation",
    "title": "Optimization problem",
    "section": "",
    "text": "Aim: find a diet combination that satisfy the nutritional and environmental constraints, while similar to the current diet.\n\n\nWe make the following notation:\n\n\\(x_1, x_2, ..., x_{k}\\) are the target food intake (in grams, or other units) for \\(k\\) food groups.\n\\(X_1, X_2, ..., X_{k}\\) are the current food intake (in grams, or other units).\n\nFor the constraints,\n\n\\(e_1, ..., e_k\\): energy associated with each of the food groups\n\n\\(E\\) is the total energy for all foods, with range between \\(E_{lower}, E_{upper}\\)\nFor example, with the data we have, this range is (9000, 10000).\n\n\\(p_1, ..., p_k\\): protein\n\\(f_1, ..., f_k\\): fat\n\\(c_1, ..., c_k\\): carbs\n\\(s_1, ..., s_k\\): sugar\n\\(a_1, ..., a_k\\): alcohol\n\\(g_1, ..., g_k\\): ghge\n\n\n\n\nFind a set of \\(x_1, ..., x_k\\) such that the values would\nminimise the squared sum of differences between current diet and target diet:\n\\((x_1 - X_1)^2 + (x_2 - X_2)^2 + ... + (x_k - X_k)^2\\)\nand satisfy the following constraints:\n\\(x_1, ..., x_k &gt;= 0\\) (realistic diet intake can not be negative)\n\\(x_1e_1 + x_2 e_2 + ... + x_k e_k &gt;= E_{lower}\\), total energy above the lower limit\n\\(x_1e_1 + x_2 e_2 + ... + x_k e_k &lt;= E_{upper}\\), total energy below the upper limit\n\\(x_1p_1 + x_2 p_2 + ... + x_k p_k &gt;= P_{lower}\\), total protein below the upper limit\n\\(x_1p_1 + x_2 p_2 + ... + x_k e_k &lt;= P_{upper}\\), total protein below the upper limit\nAnd so on.\n\n\n\nThis setting is a quadratic program (QP). It is an optimization problem with quadratic objective, and inequality constraints. We do not have equality constraints in this setting.\nWith R, there are various software to find a solution:\n\nCPLEX (chosen one)\nnloptr in nloptr package (non-linear optimization),\nconstrOptim in stats package, which relies on optim function,\nsolve.QP in quadprog package\n\namong others."
  },
  {
    "objectID": "documentation/optimization_problem.html#cplex",
    "href": "documentation/optimization_problem.html#cplex",
    "title": "1. Optimization problem",
    "section": "CPLEX",
    "text": "CPLEX\n\nResources: official Rcplex vignette, page 2.\n\nThe CPLEX solver aims to solve the optimisation problem:\n\\[min \\frac{1}{2} x' Q x + c'x\\] subject to\n\\[Ax \\leq b\\]\n\\[lb \\leq x \\leq ub\\]\n\nThe program in R looks like this\n\nlibrary(Rcplex)\n\n# the values needs to be available\n1result_obj &lt;- Rcplex(cvec = cvec,\n2                     Amat = Amat,\n3                     bvec = bvec,\n4                     Qmat = Qmat,\n5                     lb = lb,\n                     ub = ub,\n6                     objsense = \"min\",\n                     sense = sense)\n# the result is saved in result_obj, to see the results\nresult_obj\n\n\n1\n\ncvec: vector, current diet values (multiplied by -2)\n\n2\n\nAmat: matrix, individual food contribution to total nutrition and environmental impact\n\n3\n\nbvec: vector, constraint values for nutrition and environmental impact for total diet\n\n4\n\nQmat: matrix\n\n5\n\nlb, ub: lower and upper bound for target diet\n\n6\n\nobjsense, sense: E, L, and R instead of ==, &lt;= and &gt;="
  },
  {
    "objectID": "documentation/1_define_problem.html",
    "href": "documentation/1_define_problem.html",
    "title": "Optimization problem in Rcplex",
    "section": "",
    "text": "Aim: find a diet combination that satisfy the nutritional and environmental constraints, while similar to the current diet.\n\n\nWe make the following notation:\n\n\\(x_1, x_2, ..., x_{k}\\) are the target food intake (in grams, or other units) for \\(k\\) food groups.\n\\(X_1, X_2, ..., X_{k}\\) are the current food intake (in grams, or other units).\n\nFor the constraints,\n\n\\(e_1, ..., e_k\\): energy associated with each of the food groups\n\n\\(E\\) is the total energy for all foods, with range between \\(E_{lower}, E_{upper}\\)\nFor example, with the data we have, this range is (9000, 10000).\n\n\\(p_1, ..., p_k\\): protein\n\\(f_1, ..., f_k\\): fat\n\\(c_1, ..., c_k\\): carbs\n\\(s_1, ..., s_k\\): sugar\n\\(a_1, ..., a_k\\): alcohol\n\\(g_1, ..., g_k\\): ghge\n\n\n\n\nFind a set of \\(x_1, ..., x_k\\) such that the values would\nminimise the squared sum of differences between current diet and target diet:\n\\((x_1 - X_1)^2 + (x_2 - X_2)^2 + ... + (x_k - X_k)^2\\)\nand satisfy the following constraints:\n\\(x_1, ..., x_k &gt;= 0\\) (realistic diet intake can not be negative)\n\\(x_1e_1 + x_2 e_2 + ... + x_k e_k &gt;= E_{lower}\\), total energy above the lower limit\n\\(x_1e_1 + x_2 e_2 + ... + x_k e_k &lt;= E_{upper}\\), total energy below the upper limit\n\\(x_1p_1 + x_2 p_2 + ... + x_k p_k &gt;= P_{lower}\\), total protein below the upper limit\n\\(x_1p_1 + x_2 p_2 + ... + x_k e_k &lt;= P_{upper}\\), total protein below the upper limit\nAnd so on."
  },
  {
    "objectID": "documentation/1_define_problem.html#formulation",
    "href": "documentation/1_define_problem.html#formulation",
    "title": "Optimization problem in Rcplex",
    "section": "",
    "text": "Aim: find a diet combination that satisfy the nutritional and environmental constraints, while similar to the current diet.\n\n\nWe make the following notation:\n\n\\(x_1, x_2, ..., x_{k}\\) are the target food intake (in grams, or other units) for \\(k\\) food groups.\n\\(X_1, X_2, ..., X_{k}\\) are the current food intake (in grams, or other units).\n\nFor the constraints,\n\n\\(e_1, ..., e_k\\): energy associated with each of the food groups\n\n\\(E\\) is the total energy for all foods, with range between \\(E_{lower}, E_{upper}\\)\nFor example, with the data we have, this range is (9000, 10000).\n\n\\(p_1, ..., p_k\\): protein\n\\(f_1, ..., f_k\\): fat\n\\(c_1, ..., c_k\\): carbs\n\\(s_1, ..., s_k\\): sugar\n\\(a_1, ..., a_k\\): alcohol\n\\(g_1, ..., g_k\\): ghge\n\n\n\n\nFind a set of \\(x_1, ..., x_k\\) such that the values would\nminimise the squared sum of differences between current diet and target diet:\n\\((x_1 - X_1)^2 + (x_2 - X_2)^2 + ... + (x_k - X_k)^2\\)\nand satisfy the following constraints:\n\\(x_1, ..., x_k &gt;= 0\\) (realistic diet intake can not be negative)\n\\(x_1e_1 + x_2 e_2 + ... + x_k e_k &gt;= E_{lower}\\), total energy above the lower limit\n\\(x_1e_1 + x_2 e_2 + ... + x_k e_k &lt;= E_{upper}\\), total energy below the upper limit\n\\(x_1p_1 + x_2 p_2 + ... + x_k p_k &gt;= P_{lower}\\), total protein below the upper limit\n\\(x_1p_1 + x_2 p_2 + ... + x_k e_k &lt;= P_{upper}\\), total protein below the upper limit\nAnd so on."
  },
  {
    "objectID": "documentation/1_define_problem.html#solve-the-optimization-problem",
    "href": "documentation/1_define_problem.html#solve-the-optimization-problem",
    "title": "Optimization problem in Rcplex",
    "section": "Solve the optimization problem",
    "text": "Solve the optimization problem\nThis setting is a quadratic program (QP). It is an optimization problem with quadratic objective, and inequality constraints. We do not have equality constraints in this setting.\nWith R, there are various software to find a solution:\n\nnloptr in nloptr package (non-linear optimization),\nconstrOptim in stats package, which relies on optim function,\nsolve.QP in quadprog package\n\namong others."
  },
  {
    "objectID": "documentation/input_data.html",
    "href": "documentation/input_data.html",
    "title": "2. Input Data Processing",
    "section": "",
    "text": "The pseudomised data is available in the public_data folder as an example. These are NOT the original values from KBS database.\nThree datasets are relevant:\n\ncontrib_per_unit.xlsx\nconstraints.xlsx\nbounds.xlsx\n\n\n\nThis dataframe stores data for contribution per unit food on\n\nmacro nutrients\nmicro nutrients\nenvironmental impact\nothers\n\n\nlibrary(readxl)\nlibrary(data.table)\n\ncpu &lt;- read_excel(\"data/contrib_per_unit.xlsx\")\nhead(cpu)\n\n# A tibble: 6 × 55\n  Foodgroup  Means_pr10MJ `Energy (MJ)` Protein1 Protein2 Available carbohydra…¹\n  &lt;chr&gt;             &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;                  &lt;dbl&gt;\n1 Bread, fi…        85.3         0.0109   0.0828   0.0828                  0.460\n2 Bread, co…       116.          0.0101   0.0940   0.0940                  0.413\n3 Flour, gr…         3.78        0.014    0.117    0.117                   0.671\n4 Rice               9.87        0.0135   0.0670   0.0670                  0.704\n5 Pasta             11.1         0.0137   0.109    0.109                   0.624\n6 Breakfast…        17.2         0.0157   0.109    0.109                   0.608\n# ℹ abbreviated name: ¹​`Available carbohydrates1`\n# ℹ 49 more variables: `Available carbohydrates2` &lt;dbl&gt;, `Added Sugar` &lt;dbl&gt;,\n#   `Dietary fiber` &lt;dbl&gt;, Fat1 &lt;dbl&gt;, Fat2 &lt;dbl&gt;,\n#   `Sum saturated fatty acids` &lt;dbl&gt;, `Sum trans fatty acids` &lt;dbl&gt;,\n#   `Sum n-3 fatty acids` &lt;dbl&gt;, `Sum ALA` &lt;dbl&gt;,\n#   `Sum monounsaturated fatty acids1` &lt;dbl&gt;,\n#   `Sum monounsaturated fatty acids2` &lt;dbl&gt;, …\n\ncolnames(cpu)\n\n [1] \"Foodgroup\"                        \"Means_pr10MJ\"                    \n [3] \"Energy (MJ)\"                      \"Protein1\"                        \n [5] \"Protein2\"                         \"Available carbohydrates1\"        \n [7] \"Available carbohydrates2\"         \"Added Sugar\"                     \n [9] \"Dietary fiber\"                    \"Fat1\"                            \n[11] \"Fat2\"                             \"Sum saturated fatty acids\"       \n[13] \"Sum trans fatty acids\"            \"Sum n-3 fatty acids\"             \n[15] \"Sum ALA\"                          \"Sum monounsaturated fatty acids1\"\n[17] \"Sum monounsaturated fatty acids2\" \"Sum polyunsaturated fatty acids1\"\n[19] \"Sum polyunsaturated fatty acids2\" \"Vitamin A\"                       \n[21] \"Vitamin E\"                        \"Thiamin (Vitamin B1)\"            \n[23] \"Riboflavin (Vitamin B2)\"          \"Niacin equivalent\"               \n[25] \"Vitamin B6\"                       \"Folate\"                          \n[27] \"Vitamin B12\"                      \"Vitamin C\"                       \n[29] \"Vitamin D\"                        \"Sodium\"                          \n[31] \"Potassium\"                        \"Calcium\"                         \n[33] \"Magnesium\"                        \"Phosphorus\"                      \n[35] \"Iron\"                             \"Zinc\"                            \n[37] \"Iodine\"                           \"Selenium\"                        \n[39] \"Copper\"                           \"Alcohol\"                         \n[41] \"GHGE\"                             \"FE\"                              \n[43] \"ME\"                               \"ACID\"                            \n[45] \"WU\"                               \"LU\"                              \n[47] \"Whole grains\"                     \"Fruit\"                           \n[49] \"Vegetables\"                       \"Dairy1\"                          \n[51] \"Dairy2\"                           \"Fish1\"                           \n[53] \"Fish2\"                            \"Red meat\"                        \n[55] \"White meat\"                      \n\n\n\n\n\n\n\n\nNote\n\n\n\nThe 2nd column (Means_pr10MJ) is the average food intake, which is same as mean in bounds data (3rd data file). It is not necessary to be in this table as it is not the per unit contribution. We will drop it in the subsequent data processing.\n\n\n\n\n\nTotal diet constraint limits for each outcome of interest. The names need to match the column names in contrib_per_unit (check it in the next section)\n\nDir: direction: equal, greater or less than\nrhs: right hand side values\n\n\nconstraints &lt;- read_excel(\"data/constraints.xlsx\") \nhead(constraints)\n\n# A tibble: 6 × 3\n  tag_outcome             Dir     rhs\n  &lt;chr&gt;                   &lt;chr&gt; &lt;dbl&gt;\n1 Energy (MJ)             E      10.5\n2 Protein, g, lower       G      62.9\n3 Protein, g, upper       L     126. \n4 Carbohydrates, g, lower G     283. \n5 Carbohydrates, g, upper L     377. \n6 Added sugar, g          L      62.9\n\n\n\n\n\nIntake information on each food groups. Food names need to match the food names in contrib_per_unit.\n\nmean: average intake based on dietary survey. Served as baseline\nlower_bound, upper_bound: lower and upper permissible optimised intake.\n\n\nintake &lt;- read_excel(\"data/bounds.xlsx\") \nhead(intake)\n\n# A tibble: 6 × 4\n  Foodgroup           mean lower_bound upper_bound\n  &lt;chr&gt;              &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n1 Bread fine         85.3        8.53        245. \n2 Bread coarse      116.        11.6         289. \n3 Flours grains       3.78       0.378        20.6\n4 Rice                9.87       0.987        53.1\n5 Pasta              11.1        1.11         61.6\n6 Breakfast cereals  17.2        1.72         99.1"
  },
  {
    "objectID": "documentation/output_data.html",
    "href": "documentation/output_data.html",
    "title": "4. Output Data Processing",
    "section": "",
    "text": "The pseudomised data is available in the public_data folder as an example. These are NOT the original values from KBS database.\nThese datasets are relevant:\n\ncontrib_per_unit.xlsx\nconstraints.xlsx\nbounds.xlsx\nnutref.xlsx - this is the nutrition reference file for comparison.\n\nThe result data, result.RData is pre-computed loaded. Please refer to 3. Run Optimisation for how to reach this result."
  },
  {
    "objectID": "documentation/output_data.html#cplex",
    "href": "documentation/output_data.html#cplex",
    "title": "Optimization problem",
    "section": "CPLEX",
    "text": "CPLEX\n\nResources: official Rcplex vignette, page 2.\n\nThe CPLEX solver aims to solve the optimisation problem:\n\\[min \\frac{1}{2} x' Q x + c'x\\] subject to\n\\[Ax \\leq b\\]\n\\[lb \\leq x \\leq ub\\]\n\nThe program in R looks like this\n\nlibrary(Rcplex)\n\n# the values needs to be available\n1result_obj &lt;- Rcplex(cvec = cvec,\n2                     Amat = Amat,\n3                     bvec = bvec,\n4                     Qmat = Qmat,\n5                     lb = lb,\n                     ub = ub,\n6                     objsense = \"min\",\n                     sense = sense)\n# the result is saved in result_obj, to see the results\nresult_obj\n\n\n1\n\ncvec: vector, current diet values (multiplied by -2)\n\n2\n\nAmat: matrix, individual food contribution to total nutrition and environmental impact\n\n3\n\nbvec: vector, constraint values for nutrition and environmental impact for total diet\n\n4\n\nQmat: matrix\n\n5\n\nlb, ub: lower and upper bound for target diet\n\n6\n\nobjsense, sense: E, L, and R instead of ==, &lt;= and &gt;="
  },
  {
    "objectID": "documentation/input_data.html#data",
    "href": "documentation/input_data.html#data",
    "title": "2. Input Data Processing",
    "section": "",
    "text": "The pseudomised data is available in the public_data folder as an example. These are NOT the original values from KBS database.\nThree datasets are relevant:\n\ncontrib_per_unit.xlsx\nconstraints.xlsx\nbounds.xlsx\n\n\n\nThis dataframe stores data for contribution per unit food on\n\nmacro nutrients\nmicro nutrients\nenvironmental impact\nothers\n\n\nlibrary(readxl)\nlibrary(data.table)\n\ncpu &lt;- read_excel(\"data/contrib_per_unit.xlsx\")\nhead(cpu)\n\n# A tibble: 6 × 55\n  Foodgroup  Means_pr10MJ `Energy (MJ)` Protein1 Protein2 Available carbohydra…¹\n  &lt;chr&gt;             &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;                  &lt;dbl&gt;\n1 Bread, fi…        85.3         0.0109   0.0828   0.0828                  0.460\n2 Bread, co…       116.          0.0101   0.0940   0.0940                  0.413\n3 Flour, gr…         3.78        0.014    0.117    0.117                   0.671\n4 Rice               9.87        0.0135   0.0670   0.0670                  0.704\n5 Pasta             11.1         0.0137   0.109    0.109                   0.624\n6 Breakfast…        17.2         0.0157   0.109    0.109                   0.608\n# ℹ abbreviated name: ¹​`Available carbohydrates1`\n# ℹ 49 more variables: `Available carbohydrates2` &lt;dbl&gt;, `Added Sugar` &lt;dbl&gt;,\n#   `Dietary fiber` &lt;dbl&gt;, Fat1 &lt;dbl&gt;, Fat2 &lt;dbl&gt;,\n#   `Sum saturated fatty acids` &lt;dbl&gt;, `Sum trans fatty acids` &lt;dbl&gt;,\n#   `Sum n-3 fatty acids` &lt;dbl&gt;, `Sum ALA` &lt;dbl&gt;,\n#   `Sum monounsaturated fatty acids1` &lt;dbl&gt;,\n#   `Sum monounsaturated fatty acids2` &lt;dbl&gt;, …\n\ncolnames(cpu)\n\n [1] \"Foodgroup\"                        \"Means_pr10MJ\"                    \n [3] \"Energy (MJ)\"                      \"Protein1\"                        \n [5] \"Protein2\"                         \"Available carbohydrates1\"        \n [7] \"Available carbohydrates2\"         \"Added Sugar\"                     \n [9] \"Dietary fiber\"                    \"Fat1\"                            \n[11] \"Fat2\"                             \"Sum saturated fatty acids\"       \n[13] \"Sum trans fatty acids\"            \"Sum n-3 fatty acids\"             \n[15] \"Sum ALA\"                          \"Sum monounsaturated fatty acids1\"\n[17] \"Sum monounsaturated fatty acids2\" \"Sum polyunsaturated fatty acids1\"\n[19] \"Sum polyunsaturated fatty acids2\" \"Vitamin A\"                       \n[21] \"Vitamin E\"                        \"Thiamin (Vitamin B1)\"            \n[23] \"Riboflavin (Vitamin B2)\"          \"Niacin equivalent\"               \n[25] \"Vitamin B6\"                       \"Folate\"                          \n[27] \"Vitamin B12\"                      \"Vitamin C\"                       \n[29] \"Vitamin D\"                        \"Sodium\"                          \n[31] \"Potassium\"                        \"Calcium\"                         \n[33] \"Magnesium\"                        \"Phosphorus\"                      \n[35] \"Iron\"                             \"Zinc\"                            \n[37] \"Iodine\"                           \"Selenium\"                        \n[39] \"Copper\"                           \"Alcohol\"                         \n[41] \"GHGE\"                             \"FE\"                              \n[43] \"ME\"                               \"ACID\"                            \n[45] \"WU\"                               \"LU\"                              \n[47] \"Whole grains\"                     \"Fruit\"                           \n[49] \"Vegetables\"                       \"Dairy1\"                          \n[51] \"Dairy2\"                           \"Fish1\"                           \n[53] \"Fish2\"                            \"Red meat\"                        \n[55] \"White meat\"                      \n\n\n\n\n\n\n\n\nNote\n\n\n\nThe 2nd column (Means_pr10MJ) is the average food intake, which is same as mean in bounds data (3rd data file). It is not necessary to be in this table as it is not the per unit contribution. We will drop it in the subsequent data processing.\n\n\n\n\n\nTotal diet constraint limits for each outcome of interest. The names need to match the column names in contrib_per_unit (check it in the next section)\n\nDir: direction: equal, greater or less than\nrhs: right hand side values\n\n\nconstraints &lt;- read_excel(\"data/constraints.xlsx\") \nhead(constraints)\n\n# A tibble: 6 × 3\n  tag_outcome             Dir     rhs\n  &lt;chr&gt;                   &lt;chr&gt; &lt;dbl&gt;\n1 Energy (MJ)             E      10.5\n2 Protein, g, lower       G      62.9\n3 Protein, g, upper       L     126. \n4 Carbohydrates, g, lower G     283. \n5 Carbohydrates, g, upper L     377. \n6 Added sugar, g          L      62.9\n\n\n\n\n\nIntake information on each food groups. Food names need to match the food names in contrib_per_unit.\n\nmean: average intake based on dietary survey. Served as baseline\nlower_bound, upper_bound: lower and upper permissible optimised intake.\n\n\nintake &lt;- read_excel(\"data/bounds.xlsx\") \nhead(intake)\n\n# A tibble: 6 × 4\n  Foodgroup           mean lower_bound upper_bound\n  &lt;chr&gt;              &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n1 Bread fine         85.3        8.53        245. \n2 Bread coarse      116.        11.6         289. \n3 Flours grains       3.78       0.378        20.6\n4 Rice                9.87       0.987        53.1\n5 Pasta              11.1        1.11         61.6\n6 Breakfast cereals  17.2        1.72         99.1"
  },
  {
    "objectID": "documentation/input_data.html#put-together-as-a-list",
    "href": "documentation/input_data.html#put-together-as-a-list",
    "title": "2. Input Data Processing",
    "section": "Put together as a list",
    "text": "Put together as a list\nFor convenience, these values can be saved in an R object (a list) and used directly in the optimisation program.\n\nd &lt;- list(cvec = cvec, \n          Amat = Amat, \n          bvec = bvec, \n          Qmat = Qmat, \n          lb = lb, \n          ub = ub, \n          sense = sense)\n\n# to save: execute the following line\nsaveRDS(d, file = 'd.RData')\n# to read: execute the following line\nd &lt;- readRDS('d.RData')\n\nOnce this is done, you can refer to the next chapter: Run optimisation."
  },
  {
    "objectID": "documentation/run_optimisation.html",
    "href": "documentation/run_optimisation.html",
    "title": "3. Run Optimisation",
    "section": "",
    "text": "Requirements:\n\n\n\nThe package Rcplex needs to be correctly installed.\n\n\nTo understand more about what the data input should look like, please refer to the previous document: input data processing.\n\n# read the saved data\nd &lt;- readRDS('d.RData')\n\nCheck if the data look like the right format,\n\n# check if the data is correctly loaded\nd$cvec\nd$Amat\nd$bvec\nd$Qmat\nd$lb\nd$ub\nd$sense\n\nOnce you’re satisfied, run the following code chunk.\n\nlibrary(Rcplex)\n\n# use data from the d list\nproblem_1 &lt;- Rcplex(cvec = d$cvec, \n                    Amat = d$Amat, \n                    bvec = d$bvec, \n                    Qmat = d$Qmat, \n                    lb = d$lb, \n                    ub = d$ub, \n                    objsense =\"min\", \n                    sense = d$sense) \n\nTo save the results for the future,\n\nsaveRDS(problem_1, file = 'result.RData')"
  },
  {
    "objectID": "dev/noreden3.html",
    "href": "dev/noreden3.html",
    "title": "Format 1",
    "section": "",
    "text": "Paper 3 Julie\n\nKBS produce 2d output\neach participant, each meal, how much food contribute to the 18g protein (e.g)\nlink food ID with foods eaten\n\nEnd goal:\nproduce the data in format 2, sheet 2\ntable 1,2,4 can be merged\n\n\nFormat 1\n\n1. Food nutrients per g\n4031 rows, each row has a code, name and nutrients\n\n\n2. Groupings and digestibility\nfood group:\nDigestibility:\ncode:\nname (food)\n\n\n3. Intake foods\n4 participants 1001, 1002, 1003, 1004\n? is it total - not divided by meals?\n\n\n\nFormat 2\n\n4. Grouping and digestibility\nonly food group (unique)\nfood group name\ndigestibility factor\n\n\n5. Nutrients contribution of foods\nby person: each consumption is broken down into intake (gram), energy, …"
  },
  {
    "objectID": "documentation/output_data.html#data",
    "href": "documentation/output_data.html#data",
    "title": "4. Output Data Processing",
    "section": "",
    "text": "The pseudomised data is available in the public_data folder as an example. These are NOT the original values from KBS database.\nThese datasets are relevant:\n\ncontrib_per_unit.xlsx\nconstraints.xlsx\nbounds.xlsx\nnutref.xlsx - this is the nutrition reference file for comparison.\n\nThe result data, result.RData is pre-computed loaded. Please refer to 3. Run Optimisation for how to reach this result."
  },
  {
    "objectID": "documentation/output_data.html#load-data",
    "href": "documentation/output_data.html#load-data",
    "title": "4. Output Data Processing",
    "section": "Load data",
    "text": "Load data\n\nlibrary(readxl)\nlibrary(data.table)\n\n# files needed during cleaning up: \nintake &lt;- read_excel(\"data/bounds.xlsx\") \n\n# contstraints\nconstraints &lt;- read_excel(\"data/constraints.xlsx\") \n\n# contrib per unit\ncpu &lt;- read_excel(\"data/contrib_per_unit.xlsx\")\n\n# nutrition reference\nnutref &lt;- read_excel(\"data/nutref.xlsx\")\n\nLoad the results from previous step,\n\nresults &lt;- readRDS('data/result.RData')\n# examine the strucure of this R object\nresults |&gt; str()\n\nList of 4\n $ xopt  : num [1:53] 8.12 138.62 4.2 13.72 20.26 ...\n $ obj   : num -15.4\n $ status: int 1\n $ extra :List of 2\n  ..$ lambda: num [1:53] 4.52 5.32e-12 -1.27e-11 1.45e-11 -3.02e-12 ...\n  ..$ slack : num [1:53] -5.33e-15 -4.22e+01 1.77e+01 -1.55e+01 7.43e+01 ...\n\n\nThe first object in this list, results$xopt is the one we need."
  }
]