---
title: "4. Output Data Processing"
description: Process results
format: 
  html:
    code-fold: false
    code-tools: false
    code-annotations: select
editor: source
---


## Data

The pseudomised data is available in the `public_data` folder as an example. These are NOT the original values from KBS database. 

These datasets are relevant: 

* `contrib_per_unit.xlsx`
* `constraints.xlsx`
* `bounds.xlsx`
* `nutref.xlsx` - this is the nutrition reference file for comparison.

The result data, `result.RData` is pre-computed loaded. Please refer to [3. Run Optimisation](run_optimisation.qmd) for how to reach this result.


## Load data

```{r}
#| label: load-data
#| echo: true
#| eval: true
library(readxl)
library(data.table)

# files needed during cleaning up: 
intake <- read_excel("data/bounds.xlsx") 

# contstraints
constraints <- read_excel("data/constraints.xlsx") 

# contrib per unit
cpu <- read_excel("data/contrib_per_unit.xlsx")

# nutrition reference
nutref <- read_excel("data/nutref.xlsx")
```


Load the results from previous step,

```{r}
#| label: load-result
#| echo: true
#| eval: true

results <- readRDS('data/result.RData')
# examine the strucure of this R object
results |> str()
```

The first object in this list, `results$xopt` is the one we need.


# Compare diets

### New diet chart

Create chart to compare food composition of diets (g of each food group in new vs baseline diet, percent change between diets, lower and upper intake limits aka realism constraints)

```{r}
#| label: diet-chart1
#| echo: true
#| eval: true

new_intake <- round(results$xopt, digits=1) 
# New diet name (in this case 'new_intake' aka Nutrition, 
# since this scenario includes only nutritional and realism constraints)

# Baseline <- round(constraintsdata[,2],digits=1) #Baseline diet
intake_baseline <- round(intake$mean, digits=1) #Baseline diet
intake_upr <- intake$upper_bound
intake_lwr <- intake$lower_bound
foodgroup <- intake$Foodgroup

#Percent change between new diet and baseline diet
percent_change <- round((new_intake - intake_baseline)/intake_baseline, digits=3) 
percent_change
```


```{r}
#| label: diet-chart2
#| echo: true
#| eval: true

# food chart for compact display
diet_result <- data.frame(
  foodgroup = foodgroup,
  baseline = intake_baseline, 
  new_intake = new_intake, 
  percent_change = percent_change,
  lower_limit = intake_lwr, 
  upper_limit = intake_upr
)

head(diet_result)
```


### Constraint on nutrients

```{r}
#| code-fold: true
#| code-summary: "Code for selecting names and renaming them"

cpu <- dplyr::select(cpu , 
                     "Foodgroup", 
                     "Energy (MJ)" = "Energy (MJ)", 
                     "Protein, g, lower" = "Protein1", 
                     "Protein, g, upper" = "Protein2", 
                     "Carbohydrates, g, lower"="Available carbohydrates1", 
                     "Carbohydrates, g, upper"="Available carbohydrates2",
                     "Added sugar, g"="Added Sugar",
                     "Dietary fiber, g"= "Dietary fiber", 
                     "Fat, g, lower"= "Fat1",  
                     "Fat, g, upper"= "Fat2",
                     "Saturated fatty acids, g"="Sum saturated fatty acids",
                     "Trans fatty acids, g"="Sum trans fatty acids", #Added
                     "n-3 fatty acids, g"="Sum n-3 fatty acids",
                     "ALA, g" = "Sum ALA",
                     "MUFA, g, lower" = "Sum monounsaturated fatty acids1",
                     "MUFA, g, upper" = "Sum monounsaturated fatty acids2",
                     "PUFA, g, lower" = "Sum polyunsaturated fatty acids1",
                     "PUFA, g, upper" = "Sum polyunsaturated fatty acids2",
                     "Vitamin A, RE µg"= "Vitamin A",
                     "Vitamin E, alfa-TE"= "Vitamin E",
                     "Thiamin (Vitamin B1), mg"= "Thiamin (Vitamin B1)",
                     "Riboflavin (Vitamin B2), mg"= "Riboflavin (Vitamin B2)",
                     "Niacin, NE"="Niacin equivalent",
                     "Vitamin B6, mg"="Vitamin B6",
                     "Folate, µg"="Folate",
                     "Vitamin B12, µg"="Vitamin B12",
                     "Vitamin C, mg"="Vitamin C",
                     "Vitamin D, µg" = "Vitamin D",
                     "Sodium, mg"="Sodium",
                     "Potassium, mg"="Potassium",
                     "Calcium, mg"="Calcium",
                     "Magnesium, mg"= "Magnesium",
                     "Phosphorus, mg"="Phosphorus",
                     "Iron, mg"="Iron",
                     "Zinc, mg"="Zinc",
                     "Iodine, µg"="Iodine",
                     "Selenium, µg"="Selenium",
                     "Copper, µg"="Copper",
                     "Alcohol, g" = "Alcohol",
                     "GHGE, kg CO2-eq" = "GHGE",
                     "FE, g P-eq" = "FE",
                     "ME, g N-eq" = "ME",
                     "TA, g SO2-eq" = "ACID",
                     "WU, m2" = "WU",
                     "LU, m3a" = "LU",
                     "Whole grains, g" = "Whole grains",
                     "Total fruit, g" = "Fruit",
                     "Total vegetables, g" = "Vegetables",
                     "Total dairy, minimum, g" = "Dairy1",
                     "Total dairy, maximum, g" = "Dairy2",
                     "Total fish, minimum, g" = "Fish1",
                     "Total fish, maximum, g" = "Fish2",
                     "Total red meat, maximum, g" = "Red meat",
                     "Total white meat, maximum, g" = "White meat" 
)

cstr <- nutref |> 
  dplyr::select("Energy (MJ)",
         "Protein, g, lower" = "Protein1", 
         "Protein, g, upper" = "Protein2", 
         "Carbohydrates, g, lower"="Available carbohydrates1", 
         "Carbohydrates, g, upper"="Available carbohydrates2",
         "Added sugar, g"="Added Sugar",
         "Dietary fiber, g"= "Dietary fiber", 
         "Fat, g, lower"= "Fat1",  
         "Fat, g, upper"= "Fat2",
         "Saturated fatty acids, g"="Sum saturated fatty acids",
         "Trans fatty acids, g"="Sum trans fatty acids", #Added
         "n-3 fatty acids, g"="Sum n-3 fatty acids",
         "ALA, g" = "Sum ALA",
         "MUFA, g, lower" = "Sum monounsaturated fatty acids1",
         "MUFA, g, upper" = "Sum monounsaturated fatty acids2",
         "PUFA, g, lower" = "Sum polyunsaturated fatty acids1",
         "PUFA, g, upper" = "Sum polyunsaturated fatty acids2",
         "Vitamin A, RE µg"= "Vitamin A",
         "Vitamin E, alfa-TE"= "Vitamin E",
         "Thiamin (Vitamin B1), mg"= "Thiamin (Vitamin B1)",
         "Riboflavin (Vitamin B2), mg"= "Riboflavin (Vitamin B2)",
         "Niacin, NE"="Niacin equivalent",
         "Vitamin B6, mg"="Vitamin B6",
         "Folate, µg"="Folate",
         "Vitamin B12, µg"="Vitamin B12",
         "Vitamin C, mg"="Vitamin C",
         "Vitamin D, µg" = "Vitamin D",
         "Sodium, mg"="Sodium",
         "Potassium, mg"="Potassium",
         "Calcium, mg"="Calcium",
         "Magnesium, mg"= "Magnesium",
         "Phosphorus, mg"="Phosphorus",
         "Iron, mg"="Iron",
         "Zinc, mg"="Zinc",
         "Iodine, µg"="Iodine",
         "Selenium, µg"="Selenium",
         "Copper, µg"="Copper",
         "Alcohol, g" = "Alcohol",
         "GHGE, kg CO2-eq" = "GHGE",
         "FE, g P-eq" = "FE",
         "ME, g N-eq" = "ME",
         "TA, g SO2-eq" = "ACID",
         "WU, m2" = "WU",
         "LU, m3a" = "LU",
         "Whole grains, g" = "Whole grains",
         "Total fruit, g" = "Fruit",
         "Total vegetables, g" = "Vegetables",
         "Total dairy, minimum, g" = "Dairy1",
         "Total dairy, maximum, g" = "Dairy2",
         "Total fish, minimum, g" = "Fish1",
         "Total fish, maximum, g" = "Fish2",
         "Total red meat, maximum, g" = "Red meat",
         "Total white meat, maximum, g" = "White meat"  
  )

```


Compute the nutrient for the new diet, and compare with the upper and lower constraints. Make sure the names match!

```{r}
#| label: const-1
#| echo: true
#| eval: true

#Create chart and assign column names and row names
# colnames(output_newdiet)
# colnames(cstr)
# data.frame(colnames(output_newdiet), colnames(cstr))
# make sure the match the names!
output_newdiet <- t(as.matrix(new_intake)) %*%  as.matrix(cpu[,2:54])
```

Combine the results and add tags

```{r}
#| label: const-2
#| echo: true
#| eval: true

const_result <- t(rbind(output_newdiet, cstr))
colnames(const_result) <- c('new_diet','const_lwr', 'const_upr')
head(const_result)
```


It can be convenient to add some indicators for us to read easily. 

```{r}
#| label: const-3
#| echo: true
#| eval: true

# extract nutrition names
nutnames <- constraints$tag_outcome

const_result <- data.table(const_result)
const_result[, nutrient := nutnames]

#Check if results meet constraints
const_result[, is_ok := 'Yes']
const_result[new_diet < const_lwr, is_ok := 'beyond lower']
const_result[new_diet > const_upr, is_ok := 'beyond upper']
const_result[, relative_dev := 0]
const_result[is_ok == 'beyond lower', relative_dev := round((new_diet - const_lwr)/const_lwr, 3)]
const_result[is_ok == 'beyond upper', relative_dev := round((new_diet - const_upr)/const_upr, 3)]

head(const_result)
```






### Departure

Diet departure is customized indicator for comparing new and current diet. They are based on customized functions, so you need to be careful with the formula and implementation.

::: {.callout-note}
## Technical note

Diet departure was computed from a formula where each diet element is manually selected and compared, then summed together. This can be compactly written as below, utilizing the vectorized computation. Please compare if this is the object you need!

:::

```{r}
#| label: departure1
#| echo: true
#| eval: true

currentintake <- intake_baseline
head(diet_result)

# sum(diet_result$percent_change^2) # slightly different numbers, due to rounding

# departure
diet_departure <- ((diet_result$new_intake - diet_result$baseline)/diet_result$baseline)^2 |> sum()
diet_departure
```



Red meat departure, need to select a subset that are relevant for red meat first:

```{r}
#| label: departure2
#| echo: true
#| eval: true

# red meat departure
# select necessary data rows 
redmeat <- diet_result[c(23, 24, 25, 26, 27),]
redmeat
redmeat_departure <- ((sum(redmeat$new_intake) - sum(redmeat$baseline))/sum(redmeat$baseline))*100
redmeat_departure
```

It is convenient to use a function instead of computing from formula

```{r}
#| label: departure3
#| echo: true
#| eval: true

# define function 
f_meat_departure <- function(meat_data){
  
  meat_departure <- ((sum(meat_data$new_intake) - sum(meat_data$baseline))/sum(meat_data$baseline))*100
  return(meat_departure)
}

# use the function 
f_meat_departure(meat_data = redmeat)
```

This is giving the same value as above. Now use the formula for the other departures. First select the relevant foods, then pass them into the function.


```{r}
#| label: departure4
#| echo: true
#| eval: true

# total meat departure
totalmeat <- diet_result[c(23, 24, 25, 26, 27, 28, 29, 30, 31),]
f_meat_departure(meat_data = totalmeat)


# ruminant meat departure
ruminantmeat <- diet_result[c(23, 24),]
f_meat_departure(meat_data = ruminantmeat)
```



